/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["canvasDatagrid"] = factory();
	else
		root["canvasDatagrid"] = factory();
})(self, function() {
return /******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./lib/component.js":
/*!**************************!*\
  !*** ./lib/component.js ***!
  \**************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var _defaults__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./defaults */ \"./lib/defaults.js\");\n/*jslint browser: true, unparam: true, todo: true*/\n\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var typeMap,\n      component = {};\n\n  component.dehyphenateProperty = function hyphenateProperty(prop) {\n    prop = prop.replace('--cdg-', '');\n    var p = '',\n        nextLetterCap;\n    Array.prototype.forEach.call(prop, function (_char) {\n      if (nextLetterCap) {\n        nextLetterCap = false;\n        p += _char.toUpperCase();\n        return;\n      }\n\n      if (_char === '-') {\n        nextLetterCap = true;\n        return;\n      }\n\n      p += _char;\n    });\n    return p;\n  };\n\n  component.hyphenateProperty = function hyphenateProperty(prop, cust) {\n    var p = '';\n    Array.prototype.forEach.call(prop, function (_char2) {\n      if (_char2 === _char2.toUpperCase()) {\n        p += '-' + _char2.toLowerCase();\n        return;\n      }\n\n      p += _char2;\n    });\n    return (cust ? '--cdg-' : '') + p;\n  };\n\n  function getDefaultItem(base, item) {\n    var i = {},\n        r;\n    (0,_defaults__WEBPACK_IMPORTED_MODULE_0__.default)(i);\n    r = i.defaults[base].filter(function (i) {\n      return i[0].toLowerCase() === item.toLowerCase() || component.hyphenateProperty(i[0]) === item.toLowerCase() || component.hyphenateProperty(i[0], true) === item.toLowerCase();\n    })[0];\n    return r;\n  }\n\n  component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n    if (!intf.isComponent) {\n      return;\n    }\n\n    var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n        defs = {};\n    intf.computedStyle = cStyle;\n    (0,_defaults__WEBPACK_IMPORTED_MODULE_0__.default)(defs);\n    defs = defs.defaults.styles;\n    defs.forEach(function (def) {\n      var val;\n      val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], true));\n\n      if (val === '') {\n        val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], false));\n      }\n\n      if (val !== '' && typeof val === 'string') {\n        intf.setStyleProperty(def[0], typeMap[_typeof(def[1])](val.replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]), true);\n      }\n    });\n\n    if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n      requestAnimationFrame(function () {\n        intf.resize(true);\n      });\n      intf.dispatchEvent('stylechanged', intf.style);\n    }\n  };\n\n  typeMap = {\n    data: function data(strData) {\n      try {\n        return JSON.parse(strData);\n      } catch (e) {\n        throw new Error('Cannot read JSON data in canvas-datagrid data.');\n      }\n    },\n    schema: function schema(strSchema) {\n      try {\n        return JSON.parse(strSchema);\n      } catch (e) {\n        throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n      }\n    },\n    number: function number(strNum, def) {\n      var n = parseInt(strNum, 10);\n      return isNaN(n) ? def : n;\n    },\n    \"boolean\": function boolean(strBool) {\n      return /true/i.test(strBool);\n    },\n    string: function string(str) {\n      return str;\n    }\n  };\n\n  component.getObservableAttributes = function () {\n    var i = {},\n        attrs = ['data', 'schema', 'style', 'className', 'name'];\n    (0,_defaults__WEBPACK_IMPORTED_MODULE_0__.default)(i);\n    i.defaults.attributes.forEach(function (attr) {\n      attrs.push(attr[0].toLowerCase());\n    });\n    return attrs;\n  };\n\n  component.disconnectedCallback = function () {\n    this.connected = false;\n  };\n\n  component.connectedCallback = function () {\n    var intf = this;\n    intf.parentDOMNode.innerHTML = '';\n    intf.parentDOMNode.appendChild(intf.canvas);\n    intf.connected = true;\n    component.observe(intf);\n    component.applyComponentStyle(true, intf);\n    intf.resize(true);\n  };\n\n  component.adoptedCallback = function () {\n    this.resize();\n  };\n\n  component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n    var tfn,\n        intf = this,\n        def;\n\n    if (attrName === 'style') {\n      component.applyComponentStyle(false, intf);\n      return;\n    }\n\n    if (attrName === 'data') {\n      if (intf.dataType === 'application/x-canvas-datagrid') {\n        intf.dataType = 'application/json+x-canvas-datagrid';\n      }\n\n      intf.data = newVal;\n      return;\n    }\n\n    if (attrName === 'schema') {\n      intf.schema = typeMap.schema(newVal);\n      return;\n    }\n\n    if (attrName === 'name') {\n      intf.name = newVal;\n      return;\n    }\n\n    if (attrName === 'class' || attrName === 'className') {\n      return;\n    }\n\n    def = getDefaultItem('attributes', attrName);\n\n    if (def) {\n      tfn = typeMap[_typeof(def[1])];\n      intf.attributes[def[0]] = tfn(newVal);\n      return;\n    }\n\n    if (/^on/.test(attrName)) {\n      intf.addEventListener('on' + attrName, Function('e', newVal));\n    }\n\n    return;\n  };\n\n  component.observe = function (intf) {\n    var observer;\n\n    if (!window.MutationObserver) {\n      return;\n    }\n\n    intf.applyComponentStyle = function () {\n      component.applyComponentStyle(false, intf);\n      intf.resize();\n    };\n    /**\r\n     * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\r\n     * @memberof canvasDatagrid\r\n     * @name applyComponentStyle\r\n     * @method\r\n     */\n\n\n    observer = new window.MutationObserver(function (mutations) {\n      var checkInnerHTML, checkStyle;\n      Array.prototype.forEach.call(mutations, function (mutation) {\n        if (mutation.attributeName === 'class' || mutation.attributeName === 'style') {\n          checkStyle = true;\n          return;\n        }\n\n        if (mutation.target.nodeName === 'STYLE') {\n          checkStyle = true;\n          return;\n        }\n\n        if (mutation.target.parentNode && mutation.target.parentNode.nodeName === 'STYLE') {\n          checkStyle = true;\n          return;\n        }\n\n        if (mutation.target === intf && (mutation.addedNodes.length > 0 || mutation.type === 'characterData')) {\n          checkInnerHTML = true;\n        }\n      });\n\n      if (checkStyle) {\n        intf.applyComponentStyle(false, intf);\n      }\n\n      if (checkInnerHTML) {\n        if (intf.dataType === 'application/x-canvas-datagrid') {\n          intf.dataType = 'application/json+x-canvas-datagrid';\n        }\n\n        intf.data = intf.innerHTML;\n      }\n    });\n    observer.observe(intf, {\n      characterData: true,\n      childList: true,\n      attributes: true,\n      subtree: true\n    });\n    Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n      observer.observe(el, {\n        characterData: true,\n        childList: true,\n        attributes: true,\n        subtree: true\n      });\n    });\n  };\n\n  return component;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/component.js\n");

/***/ }),

/***/ "./lib/contextMenu.js":
/*!****************************!*\
  !*** ./lib/contextMenu.js ***!
  \****************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/*jslint browser: true, unparam: true, todo: true*/\n\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(self) {\n  var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n\n  function applyContextItemStyle(contextItemContainer) {\n    self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n    contextItemContainer.addEventListener('mouseover', function () {\n      self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n    });\n    contextItemContainer.addEventListener('mouseout', function () {\n      self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n    });\n  }\n\n  function createContextMenu(ev, pos, items, parentContextMenu) {\n    var container = document.createElement('div'),\n        upArrow = document.createElement('div'),\n        downArrow = document.createElement('div'),\n        children = [],\n        selectedIndex = -1,\n        intf = {},\n        rect;\n\n    if (!Array.isArray(items)) {\n      throw new Error('createContextMenu expects an array.');\n    }\n\n    function createItems() {\n      items.forEach(function (item) {\n        var contextItemContainer = document.createElement('div'),\n            childMenuArrow;\n\n        function removeChildContext(e) {\n          if (e.relatedTarget === container || item.contextMenu.container === e.relatedTarget || childMenuArrow === e.relatedTarget || contextItemContainer === e.relatedTarget || item.contextMenu.container.contains(e.relatedTarget)) {\n            return;\n          }\n\n          item.contextMenu.dispose();\n          children.splice(children.indexOf(item.contextMenu), 1);\n          item.contextMenu = undefined;\n          contextItemContainer.removeEventListener('mouseout', removeChildContext);\n          container.removeEventListener('mouseout', removeChildContext);\n          contextItemContainer.setAttribute('contextOpen', '0');\n          contextItemContainer.setAttribute('opening', '0');\n        }\n\n        function contextAddCallback(items) {\n          // check yet again if the user hasn't moved off\n          if (contextItemContainer.getAttribute('opening') !== '1' || contextItemContainer.getAttribute('contextOpen') === '1') {\n            return;\n          }\n\n          var cPos = contextItemContainer.getBoundingClientRect();\n          cPos = {\n            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n            top: cPos.top + self.style.childContextMenuMarginTop,\n            bottom: cPos.bottom,\n            right: cPos.right\n          };\n          item.contextMenu = createContextMenu(ev, cPos, items, intf);\n          contextItemContainer.setAttribute('contextOpen', '1');\n          contextItemContainer.addEventListener('mouseout', removeChildContext);\n          container.addEventListener('mouseout', removeChildContext);\n          children.push(item.contextMenu);\n        }\n\n        function createChildContext() {\n          var i;\n\n          if (contextItemContainer.getAttribute('contextOpen') === '1') {\n            return;\n          }\n\n          contextItemContainer.setAttribute('opening', '1');\n\n          if (typeof item.items === 'function') {\n            i = item.items.apply(intf, [function (items) {\n              contextAddCallback(items);\n            }]);\n\n            if (i !== undefined && Array.isArray(i)) {\n              contextAddCallback(i);\n            }\n\n            return;\n          }\n\n          contextAddCallback(item.items);\n        }\n\n        function addItem(item) {\n          function addContent(content) {\n            if (content === null) {\n              return;\n            }\n\n            if (typeof content === 'function') {\n              return addContent(content(ev));\n            }\n\n            if (_typeof(content) === 'object') {\n              contextItemContainer.appendChild(content);\n              return;\n            }\n\n            applyContextItemStyle(contextItemContainer);\n            contextItemContainer.innerHTML = content;\n            return;\n          }\n\n          addContent(item.title);\n          item.contextItemContainer = contextItemContainer;\n\n          if (item.items && item.items.length > 0 || typeof item.items === 'function') {\n            childMenuArrow = document.createElement('div');\n            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n            contextItemContainer.appendChild(childMenuArrow);\n            contextItemContainer.addEventListener('mouseover', createChildContext);\n            contextItemContainer.addEventListener('mouseout', function () {\n              contextItemContainer.setAttribute('opening', '0');\n            });\n          }\n\n          if (item.click) {\n            contextItemContainer.addEventListener('click', function (ev) {\n              item.click.apply(self, [ev]);\n            });\n          }\n        }\n\n        addItem(item);\n        container.appendChild(contextItemContainer);\n      });\n    }\n\n    function clickIndex(idx) {\n      items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n    }\n\n    function checkArrowVisibility() {\n      if (container.scrollTop > 0) {\n        self.parentDOMNode.appendChild(upArrow);\n      } else if (upArrow.parentNode) {\n        upArrow.parentNode.removeChild(upArrow);\n      }\n\n      if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n        downArrow.parentNode.removeChild(downArrow);\n      } else if (container.scrollHeight - container.offsetHeight > 0 && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n        self.parentDOMNode.appendChild(downArrow);\n      }\n    }\n\n    function startHoverScroll(type) {\n      return function t() {\n        var a = self.attributes.contextHoverScrollAmount;\n\n        if (type === 'up' && container.scrollTop === 0) {\n          return;\n        }\n\n        if (type === 'down' && container.scrollTop === container.scrollHeight) {\n          return;\n        }\n\n        container.scrollTop += type === 'up' ? -a : a;\n        hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n      };\n    }\n\n    function endHoverScroll(type) {\n      return function () {\n        clearTimeout(hoverScrollTimeout);\n      };\n    }\n\n    function init() {\n      var loc = {},\n          s = self.scrollOffset(self.canvas);\n\n      if (zIndexTop === undefined) {\n        zIndexTop = self.style.contextMenuZIndex;\n      }\n\n      createItems();\n      self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n      loc.x = pos.left - s.left;\n      loc.y = pos.top - s.top;\n      loc.height = 0;\n      zIndexTop += 1;\n      container.style.position = 'absolute';\n      upArrow.style.color = self.style.contextMenuArrowColor;\n      downArrow.style.color = self.style.contextMenuArrowColor;\n      [upArrow, downArrow].forEach(function (el) {\n        el.style.textAlign = 'center';\n        el.style.position = 'absolute';\n        el.style.zIndex = zIndexTop + 1;\n      });\n      container.style.zIndex = zIndexTop;\n\n      if (parentContextMenu && parentContextMenu.inputDropdown) {\n        container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n        container.style.minWidth = pos.width + 'px';\n        loc.y += pos.height;\n      }\n\n      if (self.mobile) {\n        container.style.width = pos.width + 'px';\n      }\n\n      container.style.left = loc.x + 'px';\n      container.style.top = loc.y + 'px';\n      container.addEventListener('scroll', checkArrowVisibility);\n      container.addEventListener('wheel', function (e) {\n        if (self.hasFocus) {\n          container.scrollTop += e.deltaY;\n          container.scrollLeft += e.deltaX;\n        }\n\n        checkArrowVisibility();\n      });\n      upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n      downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n      container.appendChild(upArrow);\n      document.body.appendChild(downArrow);\n      document.body.appendChild(container);\n      rect = container.getBoundingClientRect(); // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n\n      if (rect.bottom > window.innerHeight) {\n        if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n          loc.y -= rect.bottom + self.style.contextMenuWindowMargin - window.innerHeight;\n        }\n\n        if (loc.y < 0) {\n          loc.y = self.style.contextMenuWindowMargin;\n        }\n\n        if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n          container.style.height = window.innerHeight - self.style.contextMenuWindowMargin * 2 + 'px';\n        }\n      }\n\n      if (rect.right > window.innerWidth) {\n        loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n      }\n\n      if (loc.x < 0) {\n        loc.x = self.style.contextMenuWindowMargin;\n      }\n\n      if (loc.y < 0) {\n        loc.y = self.style.contextMenuWindowMargin;\n      }\n\n      container.style.left = loc.x + 'px';\n      container.style.top = loc.y + 'px';\n      rect = container.getBoundingClientRect();\n      upArrow.style.top = rect.top + 'px';\n      downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n      upArrow.style.left = rect.left + 'px';\n      downArrow.style.left = rect.left + 'px';\n      downArrow.style.width = container.offsetWidth + 'px';\n      upArrow.style.width = container.offsetWidth + 'px';\n      downArrow.addEventListener('mouseover', startHoverScroll('down'));\n      downArrow.addEventListener('mouseout', endHoverScroll('down'));\n      upArrow.addEventListener('mouseover', startHoverScroll('up'));\n      upArrow.addEventListener('mouseout', endHoverScroll('up'));\n      checkArrowVisibility();\n    }\n\n    intf.parentGrid = self.intf;\n    intf.parentContextMenu = parentContextMenu;\n    intf.container = container;\n    init();\n    intf.clickIndex = clickIndex;\n    intf.rect = rect;\n    intf.items = items;\n    intf.upArrow = upArrow;\n    intf.downArrow = downArrow;\n\n    intf.dispose = function () {\n      clearTimeout(hoverScrollTimeout);\n      children.forEach(function (c) {\n        c.dispose();\n      });\n      [downArrow, upArrow, container].forEach(function (el) {\n        if (el.parentNode) {\n          el.parentNode.removeChild(el);\n        }\n      });\n    };\n\n    Object.defineProperty(intf, 'selectedIndex', {\n      get: function get() {\n        return selectedIndex;\n      },\n      set: function set(value) {\n        if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n          throw new Error('Context menu selected index must be a sane number.');\n        }\n\n        selectedIndex = value;\n\n        if (selectedIndex > items.length - 1) {\n          selectedIndex = items.length - 1;\n        }\n\n        if (selectedIndex < 0) {\n          selectedIndex = 0;\n        }\n\n        items.forEach(function (item, index) {\n          if (index === selectedIndex) {\n            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n          }\n\n          self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n        });\n      }\n    });\n    return intf;\n  }\n\n  function createFilterContextMenuItems(e) {\n    var filterContainer = document.createElement('div'),\n        filterLabel = document.createElement('div'),\n        filterAutoCompleteButton = document.createElement('button'),\n        filterInput = document.createElement('input'),\n        n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n        iRect;\n\n    function checkRegExpErrorState() {\n      filterInput.style.background = self.style.contextFilterInputBackground;\n      filterInput.style.color = self.style.contextFilterInputColor;\n\n      if (self.invalidFilterRegEx) {\n        filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n        filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n      }\n    }\n\n    function fillAutoComplete() {\n      var count = 0;\n      var items = {};\n      var blanksItem = [];\n      self.viewData.forEach(function (row) {\n        var cellValue = row[e.cell.header.name] == null ? row[e.cell.header.name] : String(row[e.cell.header.name]).trim();\n        var value = self.blankValues.includes(cellValue) ? self.attributes.blanksText : cellValue;\n\n        if (items[value] || count > self.attributes.maxAutoCompleteItems) {\n          return;\n        }\n\n        count += 1;\n        items[value] = {\n          title: self.formatters[e.cell.header.type || 'string']({\n            cell: {\n              value: value\n            }\n          }),\n          click: function click(e) {\n            filterInput.value = value;\n            e.stopPropagation();\n            filterInput.dispatchEvent(new Event('keyup'));\n            self.disposeAutocomplete();\n            return;\n          }\n        };\n      });\n\n      if (Object.keys(items).indexOf(self.attributes.blanksText) !== -1) {\n        blanksItem.push(items[self.attributes.blanksText]);\n        delete items[self.attributes.blanksText];\n      }\n\n      return blanksItem.concat(Object.keys(items).map(function (key) {\n        return items[key];\n      }));\n    }\n\n    function createAutoCompleteContext(ev) {\n      if (ev && ['ArrowDown', 'ArrowUp', 'Enter', 'Tab'].includes(ev.key)) {\n        return;\n      }\n\n      var autoCompleteItems = fillAutoComplete();\n      iRect = filterInput.getBoundingClientRect();\n\n      if (autoCompleteContext) {\n        autoCompleteContext.dispose();\n        autoCompleteContext = undefined;\n      }\n\n      autoCompleteContext = createContextMenu(e, {\n        left: iRect.left,\n        top: iRect.top,\n        right: iRect.right,\n        bottom: iRect.bottom,\n        height: iRect.height,\n        width: iRect.width\n      }, autoCompleteItems, {\n        inputDropdown: true\n      });\n      autoCompleteContext.selectedIndex = 0;\n    }\n\n    self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n    self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n    self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n    checkRegExpErrorState();\n    filterInput.onclick = self.disposeAutocomplete;\n    filterInput.addEventListener('keydown', function (e) {\n      if (e.key === 'ArrowDown') {\n        autoCompleteContext.selectedIndex += 1;\n      }\n\n      if (e.key === 'ArrowUp') {\n        autoCompleteContext.selectedIndex -= 1;\n      }\n\n      if (e.key === 'Enter') {\n        autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n        self.disposeContextMenu();\n      }\n\n      if (e.key === 'Tab') {\n        autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n        e.preventDefault();\n      }\n\n      if (e.key === 'Escape') {\n        self.disposeContextMenu();\n      }\n    });\n    filterInput.addEventListener('keyup', function () {\n      self.setFilter(e.cell.header.name, filterInput.value);\n    });\n    filterInput.addEventListener('keyup', createAutoCompleteContext);\n    ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n      filterInput.addEventListener(en, checkRegExpErrorState);\n    });\n    filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n    filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n\n    filterAutoCompleteButton.onclick = function () {\n      if (autoCompleteContext) {\n        return self.disposeAutocomplete();\n      }\n\n      createAutoCompleteContext();\n    };\n\n    filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n    filterContainer.addEventListener('click', function (e) {\n      return e.stopPropagation();\n    });\n    filterContainer.appendChild(filterLabel);\n    filterContainer.appendChild(filterInput);\n    filterContainer.appendChild(filterAutoCompleteButton);\n    e.items.push({\n      title: filterContainer\n    });\n\n    if (Object.keys(self.columnFilters).length) {\n      Object.keys(self.columnFilters).forEach(function (cf) {\n        var h = self.getHeaderByName(cf);\n        e.items.push({\n          title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n          click: function removeFilterClick(e) {\n            e.preventDefault();\n            self.setFilter(cf, '');\n            self.controlInput.focus();\n          }\n        });\n      });\n    }\n  }\n\n  function addDefaultContextMenuItem(e) {\n    var isNormalCell = !(e.cell.isBackground || e.cell.isColumnHeaderCellCap || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader) && e.cell.header;\n\n    if (self.attributes.showFilter && isNormalCell) {\n      createFilterContextMenuItems(e);\n    }\n\n    if (self.attributes.showCopy && self.selections.reduce(function (p, r) {\n      return p + r.length;\n    }, 0) > 0) {\n      e.items.push({\n        title: self.attributes.copyText,\n        click: function click() {\n          document.execCommand('copy');\n          self.disposeContextMenu();\n          self.controlInput.focus();\n        }\n      });\n    }\n\n    if (self.attributes.showPaste && self.clipBoardData) {\n      e.items.push({\n        title: self.attributes.pasteText,\n        click: function click() {\n          self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n          self.draw();\n        }\n      });\n    }\n\n    if (self.attributes.showColumnSelector) {\n      e.items.push({\n        title: self.attributes.columnSelectorText,\n        items: function items() {\n          var d = [];\n          self.getSchema().forEach(function (column) {\n            function toggleColumnVisibility(e) {\n              column.hidden = !column.hidden;\n              self.dispatchEvent('togglecolumn', {\n                column: column,\n                hidden: column.hidden\n              });\n              e.preventDefault();\n              self.stopPropagation(e);\n              self.disposeContextMenu();\n              self.resize(true);\n              self.setStorageData();\n            }\n\n            var el = document.createElement('div');\n            applyContextItemStyle(el);\n            el.addEventListener('touchstart', toggleColumnVisibility);\n            el.addEventListener('click', toggleColumnVisibility);\n            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText : self.attributes.columnSelectorVisibleText) + (column.title || column.name);\n            d.push({\n              title: el\n            });\n          });\n          return d;\n        }\n      });\n\n      if (e.cell && e.cell.header && e.cell.columnIndex > -1) {\n        e.items.push({\n          title: self.attributes.hideColumnText.replace(/%s/gi, e.cell.header.title || e.cell.header.name),\n          click: function click(ev) {\n            self.getSchema()[e.cell.columnIndex].hidden = true;\n            ev.preventDefault();\n            self.stopPropagation(ev);\n            self.disposeContextMenu();\n            self.setStorageData();\n            setTimeout(function () {\n              self.resize(true);\n            }, 10);\n          }\n        });\n      }\n    }\n\n    if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption && (Object.keys(self.sizes.rows).length > 0 || Object.keys(self.sizes.columns).length > 0)) {\n      e.items.push({\n        title: self.attributes.clearSettingsOptionText,\n        click: function click(e) {\n          e.preventDefault();\n          self.sizes.rows = {};\n          self.sizes.columns = {};\n          self.createRowOrders();\n          self.createColumnOrders();\n          self.storedSettings = undefined;\n          self.dispatchEvent('resizecolumn', {\n            columnWidth: self.style.cellWidth\n          });\n          self.dispatchEvent('resizerow', {\n            cellHeight: self.style.cellHeight\n          });\n          self.setStorageData();\n          self.resize(true);\n          self.disposeContextMenu();\n          self.controlInput.focus();\n        }\n      });\n    }\n\n    if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n      e.items.push({\n        title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n        click: function click(ev) {\n          ev.preventDefault();\n          self.order(e.cell.header.name, 'asc');\n          self.controlInput.focus();\n        }\n      });\n      e.items.push({\n        title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n        click: function click(ev) {\n          ev.preventDefault();\n          self.order(e.cell.header.name, 'desc');\n          self.disposeContextMenu();\n          self.controlInput.focus();\n        }\n      });\n    }\n  }\n\n  self.disposeAutocomplete = function () {\n    if (autoCompleteContext) {\n      autoCompleteContext.dispose();\n      autoCompleteContext = undefined;\n    }\n  };\n\n  self.disposeContextMenu = function () {\n    document.removeEventListener('click', self.disposeContextMenu);\n    zIndexTop = self.style.contextMenuZIndex;\n    self.disposeAutocomplete();\n\n    if (self.contextMenu) {\n      self.contextMenu.dispose();\n    }\n\n    self.contextMenu = undefined;\n  };\n\n  self.contextmenuEvent = function (e, overridePos) {\n    if (!self.hasFocus && e.target !== self.canvas) {\n      return;\n    }\n\n    function createDiposeEvent() {\n      requestAnimationFrame(function () {\n        document.addEventListener('click', self.disposeContextMenu);\n        document.removeEventListener('mouseup', createDiposeEvent);\n      });\n    }\n\n    var contextPosition,\n        items = [],\n        pos = overridePos || self.getLayerPos(e),\n        ev = {\n      NativeEvent: e,\n      cell: self.getCellAt(pos.x, pos.y),\n      items: items\n    };\n\n    if (!ev.cell.isGrid) {\n      addDefaultContextMenuItem(ev);\n    }\n\n    if (self.dispatchEvent('contextmenu', ev)) {\n      return;\n    }\n\n    if (!ev.cell.isGrid) {\n      if (self.contextMenu) {\n        self.disposeContextMenu();\n      }\n\n      contextPosition = {\n        left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n        top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n        right: ev.cell.width + ev.cell.x + pos.rect.left,\n        bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n        height: ev.cell.height,\n        width: ev.cell.width\n      };\n\n      if (self.mobile) {\n        contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n        contextPosition.width = self.width - self.style.mobileContextMenuMargin * 2 + 'px';\n      }\n\n      self.contextMenu = createContextMenu(ev, contextPosition, items);\n      document.addEventListener('mouseup', createDiposeEvent);\n      e.preventDefault();\n    }\n  };\n\n  return;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/contextMenu.js\n");

/***/ }),

/***/ "./lib/defaults.js":
/*!*************************!*\
  !*** ./lib/defaults.js ***!
  \*************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/*jslint browser: true, unparam: true, todo: true*/\n\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(self) {\n  self.defaults = {\n    attributes: [['allowColumnReordering', true], ['allowColumnResize', true], ['allowColumnResizeFromCell', false], ['allowFreezingRows', false], ['allowFreezingColumns', false], ['allowMovingSelection', true], ['allowRowHeaderResize', true], ['allowRowReordering', false], ['allowRowResize', true], ['allowRowResizeFromCell', false], ['allowSorting', true], ['autoGenerateSchema', false], ['autoResizeColumns', false], ['autoResizeRows', false], ['blanksText', '(Blanks)'], ['borderDragBehavior', 'none'], ['borderResizeZone', 10], ['clearSettingsOptionText', 'Clear saved settings'], ['columnHeaderClickBehavior', 'sort'], ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'], ['columnSelectorText', 'Add/Remove columns'], ['columnSelectorVisibleText', \"\\u2713\"], ['contextHoverScrollAmount', 2], ['contextHoverScrollRateMs', 5], ['copyHeadersOnSelectAll', true], ['copyText', 'Copy'], ['debug', false], ['editable', true], ['ellipsisText', '...'], ['filterOptionText', 'Filter %s'], ['filterTextPrefix', '(filtered) '], ['globalRowResize', false], ['hideColumnText', 'Hide %s'], ['hoverMode', 'cell'], ['maxAutoCompleteItems', 200], ['multiLine', false], ['name', ''], ['pageUpDownOverlap', 1], ['pasteText', 'Paste'], ['persistantSelectionMode', false], ['removeFilterOptionText', 'Remove filter on %s'], ['reorderDeadZone', 3], ['resizeScrollZone', 20], ['rowGrabZoneSize', 5], ['saveAppearance', true], ['scrollAnimationPPSThreshold', 0.75], ['scrollPointerLock', false], ['scrollRepeatRate', 75], ['selectionFollowsActiveCell', false], ['selectionHandleBehavior', 'none'], ['selectionMode', 'cell'], ['selectionScrollIncrement', 20], ['selectionScrollZone', 20], ['showClearSettingsOption', true], ['showColumnHeaders', true], ['showColumnSelector', true], ['showCopy', false], ['showFilter', true], ['showNewRow', false], ['showOrderByOption', true], ['showOrderByOptionTextAsc', 'Order by %s ascending'], ['showOrderByOptionTextDesc', 'Order by %s descending'], ['showPaste', false], ['showPerformance', false], ['showRowHeaders', true], ['showRowNumbers', true], ['showRowNumberGaps', true], ['singleSelectionMode', false], ['snapToRow', false], ['touchContextMenuTimeMs', 800], ['touchDeadZone', 3], ['touchEasingMethod', 'easeOutQuad'], ['touchReleaseAcceleration', 1000], ['touchReleaseAnimationDurationMs', 2000], ['touchScrollZone', 20], ['touchSelectHandleZone', 20], ['touchZoomSensitivity', 0.005], ['touchZoomMin', 0.5], ['touchZoomMax', 1.75], ['maxPixelRatio', 2], ['tree', false], ['treeHorizontalScroll', false]],\n    styles: [['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'], ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'], ['activeCellBorderWidth', 1], ['activeCellColor', 'rgba(0, 0, 0, 1)'], ['activeCellFont', '16px sans-serif'], ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'], ['activeCellHorizontalAlignment', 'left'], ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'], ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'], ['activeCellOverlayBorderWidth', 1], ['activeCellPaddingBottom', 5], ['activeCellPaddingLeft', 5], ['activeCellPaddingRight', 5], ['activeCellPaddingTop', 5], ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'], ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'], ['activeCellVerticalAlignment', 'center'], ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'], ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'], ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'], ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'], ['autocompleteBottomMargin', 60], ['autosizeHeaderCellPadding', 8], ['autosizePadding', 5], ['cellAutoResizePadding', 13], ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'], ['cellBorderColor', 'rgba(195, 199, 202, 1)'], ['cellBorderWidth', 1], ['cellColor', 'rgba(0, 0, 0, 1)'], ['cellFont', '16px sans-serif'], ['cellGridHeight', 250], ['cellHeight', 24], ['cellHeightWithChildGrid', 150], ['cellHorizontalAlignment', 'left'], ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'], ['cellHoverColor', 'rgba(0, 0, 0, 1)'], ['cellPaddingBottom', 5], ['cellPaddingLeft', 5], ['cellPaddingRight', 5], ['cellPaddingTop', 5], ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'], ['cellSelectedColor', 'rgba(0, 0, 0, 1)'], ['cellVerticalAlignment', 'center'], ['cellWidth', 250], ['cellWidthWithChildGrid', 250], ['cellWhiteSpace', 'nowrap'], ['cellLineHeight', 1], ['cellLineSpacing', 3], ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'], ['childContextMenuArrowHTML', '&#x25BA;'], ['childContextMenuMarginLeft', -11], ['childContextMenuMarginTop', -6], ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'], ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'], ['columnHeaderCellBorderWidth', 1], ['columnHeaderCellCapBackgroundColor', 'rgba(240, 240, 240, 1)'], ['columnHeaderCellCapBorderColor', 'rgba(172, 172, 172, 1)'], ['columnHeaderCellCapBorderWidth', 1], ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'], ['columnHeaderCellFont', '16px sans-serif'], ['columnHeaderCellHeight', 25], ['columnHeaderCellHorizontalAlignment', 'left'], ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'], ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'], ['columnHeaderCellPaddingBottom', 5], ['columnHeaderCellPaddingLeft', 5], ['columnHeaderCellPaddingRight', 5], ['columnHeaderCellPaddingTop', 5], ['columnHeaderCellVerticalAlignment', 'center'], ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'], ['columnHeaderOrderByArrowBorderWidth', 1], ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'], ['columnHeaderOrderByArrowHeight', 8], ['columnHeaderOrderByArrowMarginLeft', 0], ['columnHeaderOrderByArrowMarginRight', 5], ['columnHeaderOrderByArrowMarginTop', 6], ['columnHeaderOrderByArrowWidth', 13], ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'], ['contextFilterButtonBorderRadius', '3px'], ['contextFilterButtonHTML', '&#x25BC;'], ['contextFilterInputBackground', 'rgba(255,255,255,1)'], ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'], ['contextFilterInputBorderRadius', '0'], ['contextFilterInputColor', 'rgba(0,0,0,1)'], ['contextFilterInputFontFamily', 'sans-serif'], ['contextFilterInputFontSize', '14px'], ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'], ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'], ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'], ['contextMenuArrowDownHTML', '&#x25BC;'], ['contextMenuArrowUpHTML', '&#x25B2;'], ['contextMenuBackground', 'rgba(240, 240, 240, 1)'], ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'], ['contextMenuBorderRadius', '3px'], ['contextMenuChildArrowFontSize', '12px'], ['contextMenuColor', 'rgba(43, 48, 43, 1)'], ['contextMenuCursor', 'default'], ['contextMenuFilterButtonFontFamily', 'sans-serif'], ['contextMenuFilterButtonFontSize', '10px'], ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'], ['contextMenuFontFamily', 'sans-serif'], ['contextMenuFontSize', '16px'], ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'], ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'], ['contextMenuItemBorderRadius', '3px'], ['contextMenuItemMargin', '2px'], ['contextMenuLabelDisplay', 'inline-block'], ['contextMenuLabelMargin', '0 3px 0 0'], ['contextMenuLabelMaxWidth', '700px'], ['contextMenuLabelMinWidth', '75px'], ['contextMenuMarginLeft', 3], ['contextMenuMarginTop', -3], ['contextMenuOpacity', '0.98'], ['contextMenuPadding', '2px'], ['contextMenuWindowMargin', 30], ['contextMenuZIndex', 10000], ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'], ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'], ['debugBackgroundColor', 'rgba(0, 0, 0, .0)'], ['debugColor', 'rgba(255, 15, 24, 1)'], ['debugEntitiesColor', 'rgba(76, 231, 239, 1.00)'], ['debugFont', '11px sans-serif'], ['debugPerfChartBackground', 'rgba(29, 25, 26, 1.00)'], ['debugPerfChartTextColor', 'rgba(255, 255, 255, 0.8)'], ['debugPerformanceColor', 'rgba(252, 255, 37, 1.00)'], ['debugScrollHeightColor', 'rgba(248, 33, 103, 1.00)'], ['debugScrollWidthColor', 'rgba(66, 255, 27, 1.00)'], ['debugTouchPPSXColor', 'rgba(246, 102, 24, 1.00)'], ['debugTouchPPSYColor', 'rgba(186, 0, 255, 1.00)'], ['display', 'inline-block'], ['editCellBackgroundColor', 'white'], ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'], ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'], ['editCellColor', 'black'], ['editCellFontFamily', 'sans-serif'], ['editCellFontSize', '16px'], ['editCellPaddingLeft', 4], ['editCellZIndex', 10000], ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'], ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'], ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'], ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'], ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'], ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'], ['frozenMarkerBorderWidth', 1], ['frozenMarkerWidth', 2], ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'], ['gridBorderCollapse', 'collapse'], ['gridBorderColor', 'rgba(202, 202, 202, 1)'], ['gridBorderWidth', 1], ['height', 'auto'], ['maxHeight', 'inherit'], ['maxWidth', 'inherit'], ['minColumnWidth', 45], ['minHeight', 'inherit'], ['minRowHeight', 24], ['minWidth', 'inherit'], ['mobileContextMenuMargin', 10], ['mobileEditInputHeight', 30], ['mobileEditFontFamily', 'sans-serif'], ['mobileEditFontSize', '16px'], ['moveOverlayBorderWidth', 1], ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'], ['moveOverlayBorderSegments', '12, 7'], ['name', 'default'], ['overflowY', 'auto'], ['overflowX', 'auto'], ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'], ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'], ['reorderMarkerBorderWidth', 1.25], ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'], ['reorderMarkerIndexBorderWidth', 2.75], ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'], ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'], ['rowHeaderCellBorderWidth', 1], ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'], ['rowHeaderCellFont', '16px sans-serif'], ['rowHeaderCellHeight', 25], ['rowHeaderCellHorizontalAlignment', 'left'], ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'], ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'], ['rowHeaderCellPaddingBottom', 5], ['rowHeaderCellPaddingLeft', 5], ['rowHeaderCellPaddingRight', 5], ['rowHeaderCellPaddingTop', 5], ['rowHeaderCellRowNumberGapHeight', 5], ['rowHeaderCellRowNumberGapColor', 'rgba(50, 50, 50, 1)'], ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'], ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'], ['rowHeaderCellVerticalAlignment', 'center'], ['rowHeaderCellWidth', 57], ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'], ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'], ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'], ['scrollBarBorderWidth', 0.5], ['scrollBarBoxBorderRadius', 4.125], ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'], ['scrollBarBoxMargin', 2], ['scrollBarBoxMinSize', 15], ['scrollBarBoxWidth', 8], ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'], ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'], ['scrollBarWidth', 11], ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'], ['selectionHandleBorderWidth', 1.5], ['selectionHandleColor', 'rgba(66, 133, 244, 1)'], ['selectionHandleSize', 8], ['selectionHandleType', 'square'], ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'], ['selectionOverlayBorderWidth', 1], ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'], ['treeArrowBorderWidth', 1], ['treeArrowClickRadius', 5], ['treeArrowColor', 'rgba(155, 155, 155, 1)'], ['treeArrowHeight', 8], ['treeArrowMarginLeft', 0], ['treeArrowMarginRight', 5], ['treeArrowMarginTop', 6], ['treeArrowWidth', 13], ['treeGridHeight', 250], ['width', 'auto']]\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/defaults.js\n");

/***/ }),

/***/ "./lib/dom.js":
/*!********************!*\
  !*** ./lib/dom.js ***!
  \********************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/*jslint browser: true, unparam: true, todo: true*/\n\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(self) {\n  self.getClippingRect = function (ele) {\n    var boundingRect = self.position(self.parentNode),\n        eleRect = self.position(ele),\n        s = self.scrollOffset(self.canvas),\n        clipRect = {\n      x: 0,\n      y: 0,\n      h: 0,\n      w: 0\n    },\n        parentRect = {\n      x: -Infinity,\n      y: -Infinity,\n      h: Infinity,\n      w: Infinity\n    },\n        columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n        rowHeaderCellWidth = self.getRowHeaderCellWidth();\n    boundingRect.top -= s.top;\n    boundingRect.left -= s.left;\n    eleRect.top -= s.top;\n    eleRect.left -= s.left;\n    clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n    clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n    clipRect.x = boundingRect.left + eleRect.left * -1 + rowHeaderCellWidth;\n    clipRect.y = boundingRect.top + eleRect.top * -1 + columnHeaderCellHeight;\n    return {\n      x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n      y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n      h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n      w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n    };\n  };\n\n  self.clipElement = function (ele) {\n    var clipRect = self.getClippingRect(ele);\n\n    if (clipRect.w < 0) {\n      clipRect.w = 0;\n    }\n\n    if (clipRect.h < 0) {\n      clipRect.h = 0;\n    }\n\n    ele.style.clip = 'rect(' + clipRect.y + 'px,' + clipRect.w + 'px,' + clipRect.h + 'px,' + clipRect.x + 'px' + ')'; // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n    // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n    // supports clip path, so we'll keep using clip until someday clipPath becomes\n    // more widely support.  The code below works correctly, but setting clipPath and clip\n    // at the same time has undesirable results.\n    // ele.style.clipPath = 'polygon('\n    //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n    //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n    //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n    //     + clipRect.w + 'px ' + clipRect.y + 'px'\n    //     + ')';\n  };\n\n  self.scrollOffset = function (e) {\n    var x = 0,\n        y = 0,\n        scrollingElement = document.scrollingElement || {\n      scrollLeft: 0,\n      scrollTop: 0\n    };\n\n    while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n      if (e.nodeType !== 'canvas-datagrid-tree' && e.nodeType !== 'canvas-datagrid-cell') {\n        x -= e.scrollLeft;\n        y -= e.scrollTop;\n      }\n\n      e = e.parentNode;\n    }\n\n    return {\n      left: x - scrollingElement.scrollLeft,\n      top: y - scrollingElement.scrollTop\n    };\n  };\n\n  self.resizeEditInput = function () {\n    if (self.input && self.input.editCell) {\n      var pos = self.canvas.getBoundingClientRect(),\n          s = self.scrollOffset(self.intf),\n          bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n          borderWidth = self.style.cellBorderWidth * bm,\n          cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex) || {\n        x: -100,\n        y: -100,\n        height: 0,\n        width: 0\n      };\n\n      if (self.mobile) {\n        self.input.style.left = '0';\n        self.input.style.top = self.height - self.style.mobileEditInputHeight - borderWidth - 1 + 'px';\n        self.input.style.height = self.style.mobileEditInputHeight + 'px';\n        self.input.style.width = self.width - borderWidth - 1 + 'px';\n        return;\n      }\n\n      self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n      self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n      self.input.style.height = cell.height - borderWidth + 'px';\n      self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n      self.clipElement(self.input);\n    }\n  };\n\n  self.position = function (e, ignoreScrollOffset) {\n    var x = 0,\n        y = 0,\n        s = e,\n        h,\n        w;\n\n    while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n      x += e.offsetLeft;\n      y += e.offsetTop;\n      h = e.offsetHeight;\n      w = e.offsetWidth;\n      e = e.offsetParent;\n    }\n\n    if (ignoreScrollOffset) {\n      return {\n        left: x,\n        top: y,\n        height: h,\n        width: w\n      };\n    }\n\n    e = s;\n    s = self.scrollOffset(e);\n    return {\n      left: x + s.left,\n      top: y + s.top,\n      height: h,\n      width: w\n    };\n  };\n\n  self.getLayerPos = function (e) {\n    var rect = self.canvas.getBoundingClientRect(),\n        pos = {\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top\n    };\n\n    if (self.isChildGrid) {\n      pos.x -= self.canvasOffsetLeft;\n      pos.y -= self.canvasOffsetTop;\n    }\n\n    return {\n      x: pos.x,\n      y: pos.y,\n      rect: rect\n    };\n  };\n  /**\n   * Ends editing, optionally aborting the edit.\n   * @memberof canvasDatagrid\n   * @name endEdit\n   * @method\n   * @param {boolean} abort When true, abort the edit.\n   */\n\n\n  self.endEdit = function (abort) {\n    var cell = self.input.editCell,\n        y = cell.rowIndex;\n\n    function abortEdit() {\n      abort = true;\n    }\n\n    var ev = {\n      cell: cell,\n      newValue: self.input.value,\n      oldValue: cell.value,\n      abort: abortEdit,\n      input: self.input\n    };\n\n    if (self.dispatchEvent('beforeendedit', ev)) {\n      return false;\n    }\n\n    if (ev.objValue != undefined && _typeof(ev.objValue) === 'object' && !abort) {\n      self.changes[y] = self.changes[y] || {};\n      self.changes[y][cell.header.name] = ev.objValue;\n\n      if (!cell.data) {\n        self.originalData[cell.boundRowIndex] = {};\n        cell.data = self.originalData[cell.boundRowIndex];\n      }\n\n      cell.data[cell.header.name] = ev.objValue;\n\n      if (y === self.viewData.length) {\n        var ev2 = {\n          value: self.input.value,\n          defaultValue: cell.value,\n          aborted: abort,\n          cell: cell,\n          input: self.input,\n          objValue: ev.objValue\n        };\n\n        if (self.dispatchEvent('newrow', ev2)) {\n          return false;\n        }\n\n        self.addRow(cell.data);\n        self.createNewRowData();\n      }\n\n      self.draw(true);\n    } else {\n      if (self.input.value !== cell.value && !abort) {\n        self.changes[y] = self.changes[y] || {};\n        self.changes[y][cell.header.name] = self.input.value;\n\n        if (!cell.data) {\n          self.originalData[cell.boundRowIndex] = {};\n          cell.data = self.originalData[cell.boundRowIndex];\n        }\n\n        cell.data[cell.header.name] = self.input.value;\n\n        if (y === self.viewData.length) {\n          if (self.dispatchEvent('newrow', {\n            value: self.input.value,\n            defaultValue: cell.value,\n            aborted: abort,\n            cell: cell,\n            input: self.input\n          })) {\n            return false;\n          }\n\n          self.addRow(cell.data);\n          self.createNewRowData();\n        }\n\n        self.draw(true);\n      }\n    }\n\n    if (self.input.parentNode) {\n      self.input.parentNode.removeChild(self.input);\n    }\n\n    self.intf.focus();\n    self.dispatchEvent('endedit', {\n      cell: cell,\n      value: self.input.value,\n      aborted: abort,\n      input: self.input\n    });\n    self.input = undefined;\n    return true;\n  };\n  /**\n   * Begins editing at cell x, row y.\n   * @memberof canvasDatagrid\n   * @name beginEditAt\n   * @method\n   * @param {number} x The column index of the cell to edit.\n   * @param {number} y The row index of the cell to edit.\n   * @param {boolean} inEnterMode If true, starting to type in cell will replace the\n   * cell's previous value instead of appending, and using the arrow keys will allow\n   * the user to navigate to adjacent cells instead of moving the text cursor around\n   * (default is false, and means user is in 'edit' mode).\n   */\n\n\n  self.beginEditAt = function (x, y, NativeEvent) {\n    var inEnterMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n    if (!self.attributes.editable) {\n      return;\n    }\n\n    if (self.input) {\n      self.endEdit();\n    }\n\n    var cell = self.getVisibleCellByIndex(x, y),\n        s = self.getSchema(),\n        adjacentCells,\n        enumItems,\n        enu,\n        option,\n        valueInEnum;\n\n    if (!(cell && cell.header)) {\n      return;\n    } //HACK for IE10, does not like literal enum\n\n\n    enu = cell.header['enum'];\n\n    if (self.dispatchEvent('beforebeginedit', {\n      cell: cell,\n      NativeEvent: NativeEvent\n    })) {\n      return false;\n    }\n\n    self.scrollIntoView(x, y);\n    self.setActiveCell(x, y);\n    adjacentCells = self.getAdjacentCells();\n\n    if (enu) {\n      self.input = document.createElement('select');\n    } else {\n      self.input = document.createElement(self.attributes.multiLine ? 'textarea' : 'input');\n    }\n\n    cell = self.getVisibleCellByIndex(x, y); //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n\n    if (!cell) {\n      return;\n    }\n\n    if (enu) {\n      // add enums\n      if (typeof enu === 'function') {\n        enumItems = enu.apply(self.intf, [{\n          cell: cell\n        }]);\n      } else if (Array.isArray(enu)) {\n        enumItems = enu;\n      }\n\n      enumItems.forEach(function (e) {\n        var i = document.createElement('option'),\n            val,\n            title;\n\n        if (Array.isArray(e)) {\n          val = e[0];\n          title = e[1];\n        } else {\n          val = e;\n          title = e;\n        }\n\n        if (val === cell.value) {\n          valueInEnum = true;\n        }\n\n        i.value = val;\n        i.innerHTML = title;\n        self.input.appendChild(i);\n      });\n\n      if (!valueInEnum) {\n        option = document.createElement('option');\n        option.value = cell.value;\n        option.innerHTML = cell.value;\n        self.input.appendChild(option);\n      }\n\n      self.input.addEventListener('change', function () {\n        self.endEdit();\n        self.draw(true);\n      });\n    } // if the user has not prevented the default action, append to the body\n\n\n    if (!self.dispatchEvent('appendeditinput', {\n      cell: cell,\n      input: self.input\n    })) {\n      document.body.appendChild(self.input);\n    }\n\n    self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n    self.input.style.position = 'absolute';\n    self.input.editCell = cell;\n    self.resizeEditInput();\n    self.input.style.zIndex = self.style.editCellZIndex;\n    self.input.style.fontSize = parseInt(self.style.editCellFontSize, 10) * self.scale + 'px';\n    var cellValueIsEmpty = [null, undefined].indexOf(cell.value) !== -1;\n    var shouldClearCellValue = cellValueIsEmpty || inEnterMode;\n\n    if (_typeof(cell.value) === 'object') {\n      var ev = {\n        value: cell.value,\n        row: {\n          endCap: ''\n        },\n        header: cell.header,\n        cell: cell,\n        event: 'beginedit'\n      };\n      var f = self.formatters[cell.header.type || 'string'];\n\n      if (f) {\n        self.input.value = shouldClearCellValue ? '' : f(ev);\n      }\n    } else {\n      self.input.value = shouldClearCellValue ? '' : cell.value;\n    }\n\n    self.input.focus();\n    self.input.addEventListener('click', self.stopPropagation);\n    self.input.addEventListener('dblclick', self.stopPropagation);\n    self.input.addEventListener('mouseup', self.stopPropagation);\n    self.input.addEventListener('mousedown', self.stopPropagation);\n    self.input.addEventListener('keydown', function (e) {\n      var nx = cell.columnIndex,\n          ny = cell.rowIndex;\n\n      if (e.key === 'Escape') {\n        self.endEdit(true); // end edit and abort the value change\n\n        self.draw(true);\n      } else if (e.key === 'Enter' && self.attributes.multiLine && e.altKey) {\n        self.input.value = self.input.value + '\\n';\n        self.input.scrollTop = self.input.scrollHeight;\n      } else if (e.key === 'Enter') {\n        self.endEdit(); // Move to cell in next or previous row\n\n        var nextRowIndex = e.shiftKey ? Math.max(0, ny - 1) : Math.min(ny + 1, self.viewData.length - 1);\n\n        if (nextRowIndex !== ny) {\n          self.scrollIntoView(nx, nextRowIndex);\n          self.setActiveCell(nx, nextRowIndex);\n        }\n\n        self.draw(true);\n      } else if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.key) && inEnterMode) {\n        switch (e.key) {\n          case 'ArrowUp':\n            ny = Math.max(0, ny - 1);\n            break;\n\n          case 'ArrowDown':\n            ny = Math.min(ny + 1, self.viewData.length - 1);\n            break;\n\n          case 'ArrowLeft':\n            nx = Math.max(nx - 1, 0);\n            break;\n\n          case 'ArrowRight':\n            nx = adjacentCells.right;\n            break;\n        }\n\n        self.endEdit();\n        self.scrollIntoView(nx, ny);\n        self.setActiveCell(nx, ny);\n        self.draw(true);\n      } else if (e.key === 'Tab') {\n        e.preventDefault();\n\n        if (!self.endEdit()) {\n          return;\n        }\n\n        if (e.shiftKey) {\n          nx = adjacentCells.left;\n        } else {\n          nx = adjacentCells.right;\n        }\n\n        if (adjacentCells.left === x && e.shiftKey) {\n          nx = adjacentCells.last;\n          ny -= 1;\n        }\n\n        if (adjacentCells.right === x && !e.shiftKey) {\n          nx = adjacentCells.first;\n          ny += 1;\n        }\n\n        if (ny < 0) {\n          ny = self.viewData.length - 1;\n        }\n\n        if (ny > self.viewData.length - 1) {\n          ny = 0;\n        }\n\n        self.scrollIntoView(nx, ny);\n        self.beginEditAt(nx, ny, e);\n      }\n    });\n    self.dispatchEvent('beginedit', {\n      cell: cell,\n      input: self.input\n    });\n  };\n\n  self.createInlineStyle = function (el, className) {\n    var css = {\n      'canvas-datagrid-context-menu-filter-input': {\n        height: '19px',\n        verticalAlign: 'bottom',\n        marginLeft: '2px',\n        padding: '0',\n        background: self.style.contextFilterInputBackground,\n        color: self.style.contextFilterInputColor,\n        border: self.style.contextFilterInputBorder,\n        borderRadius: self.style.contextFilterInputBorderRadius,\n        lineHeight: 'normal',\n        fontWeight: 'normal',\n        fontFamily: self.style.contextFilterInputFontFamily,\n        fontSize: self.style.contextFilterInputFontSize\n      },\n      'canvas-datagrid-context-menu-filter-button': {\n        height: '19px',\n        verticalAlign: 'bottom',\n        marginLeft: '2px',\n        padding: '0',\n        background: self.style.contextMenuBackground,\n        color: self.style.contextMenuColor,\n        border: self.style.contextFilterButtonBorder,\n        borderRadius: self.style.contextFilterButtonBorderRadius,\n        lineHeight: 'normal',\n        fontWeight: 'normal',\n        fontFamily: self.style.contextMenuFilterButtonFontFamily,\n        fontSize: self.style.contextMenuFilterButtonFontSize\n      },\n      'canvas-datagrid-context-child-arrow': {\n        cssFloat: 'right',\n        color: self.style.childContextMenuArrowColor,\n        fontSize: self.style.contextMenuChildArrowFontSize,\n        fontFamily: self.style.contextMenuFontFamily,\n        verticalAlign: 'middle'\n      },\n      'canvas-datagrid-autocomplete': {\n        fontFamily: self.style.contextMenuFontFamily,\n        fontSize: self.style.contextMenuFontSize,\n        background: self.style.contextMenuBackground,\n        color: self.style.contextMenuColor,\n        border: self.style.contextMenuBorder,\n        padding: self.style.contextMenuPadding,\n        borderRadius: self.style.contextMenuBorderRadius,\n        opacity: self.style.contextMenuOpacity,\n        position: 'absolute',\n        zIndex: 9999,\n        overflow: 'hidden'\n      },\n      'canvas-datagrid-autocomplete-item': {\n        background: self.style.contextMenuBackground,\n        color: self.style.contextMenuColor\n      },\n      'canvas-datagrid-autocomplete-item:hover': {\n        background: self.style.contextMenuHoverBackground,\n        color: self.style.contextMenuHoverColor\n      },\n      'canvas-datagrid-canvas': {\n        position: 'absolute',\n        zIndex: '-1'\n      },\n      'canvas-datagrid': {\n        display: 'block'\n      },\n      'canvas-datagrid-control-input': {\n        position: 'fixed',\n        top: '-5px',\n        left: '-5px',\n        border: 'none',\n        opacity: '0',\n        cursor: 'pointer',\n        width: '1px',\n        height: '1px',\n        lineHeight: 'normal',\n        fontWeight: 'normal',\n        fontFamily: self.style.contextMenuFontFamily,\n        fontSize: self.style.contextMenuFontSize\n      },\n      'canvas-datagrid-edit-mobile-input': {\n        boxSizing: 'content-box',\n        outline: 'none',\n        margin: '0',\n        padding: '0 0 0 0',\n        lineHeight: 'normal',\n        fontWeight: 'normal',\n        fontFamily: self.style.mobileEditFontFamily,\n        fontSize: self.style.mobileEditFontSize,\n        border: self.style.editCellBorder,\n        color: self.style.editCellColor,\n        background: self.style.editCellBackgroundColor,\n        appearance: 'none',\n        webkitAppearance: 'none',\n        mozAppearance: 'none',\n        borderRadius: '0'\n      },\n      'canvas-datagrid-edit-input': {\n        boxSizing: 'content-box',\n        outline: 'none',\n        margin: '0',\n        padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n        lineHeight: 'normal',\n        fontWeight: 'normal',\n        fontFamily: self.style.editCellFontFamily,\n        fontSize: self.style.editCellFontSize,\n        boxShadow: self.style.editCellBoxShadow,\n        border: self.style.editCellBorder,\n        color: self.style.editCellColor,\n        background: self.style.editCellBackgroundColor,\n        appearance: 'none',\n        webkitAppearance: 'none',\n        mozAppearance: 'none',\n        borderRadius: '0'\n      },\n      'canvas-datagrid-context-menu-item-mobile': {\n        lineHeight: 'normal',\n        fontWeight: 'normal',\n        fontFamily: self.style.contextMenuFontFamily,\n        fontSize: self.style.contextMenuFontSize,\n        color: 'inherit',\n        background: 'inherit',\n        margin: self.style.contextMenuItemMargin,\n        borderRadius: self.style.contextMenuItemBorderRadius,\n        verticalAlign: 'middle'\n      },\n      'canvas-datagrid-context-menu-item': {\n        lineHeight: 'normal',\n        fontWeight: 'normal',\n        fontFamily: self.style.contextMenuFontFamily,\n        fontSize: self.style.contextMenuFontSize,\n        color: 'inherit',\n        background: 'inherit',\n        margin: self.style.contextMenuItemMargin,\n        borderRadius: self.style.contextMenuItemBorderRadius,\n        verticalAlign: 'middle'\n      },\n      'canvas-datagrid-context-menu-item:hover': {\n        background: self.style.contextMenuHoverBackground,\n        color: self.style.contextMenuHoverColor\n      },\n      'canvas-datagrid-context-menu-label': {\n        margin: self.style.contextMenuLabelMargin,\n        display: self.style.contextMenuLabelDisplay,\n        minWidth: self.style.contextMenuLabelMinWidth,\n        maxWidth: self.style.contextMenuLabelMaxWidth\n      },\n      'canvas-datagrid-context-menu-mobile': {\n        lineHeight: 'normal',\n        fontWeight: 'normal',\n        fontFamily: self.style.contextMenuFontFamily,\n        fontSize: self.style.contextMenuFontSize,\n        background: self.style.contextMenuBackground,\n        color: self.style.contextMenuColor,\n        border: self.style.contextMenuBorder,\n        padding: self.style.contextMenuPadding,\n        borderRadius: self.style.contextMenuBorderRadius,\n        opacity: self.style.contextMenuOpacity,\n        overflow: 'hidden',\n        whiteSpace: 'nowrap'\n      },\n      'canvas-datagrid-context-menu': {\n        lineHeight: 'normal',\n        fontWeight: 'normal',\n        fontFamily: self.style.contextMenuFontFamily,\n        fontSize: self.style.contextMenuFontSize,\n        background: self.style.contextMenuBackground,\n        color: self.style.contextMenuColor,\n        border: self.style.contextMenuBorder,\n        padding: self.style.contextMenuPadding,\n        borderRadius: self.style.contextMenuBorderRadius,\n        opacity: self.style.contextMenuOpacity,\n        overflow: 'hidden',\n        whiteSpace: 'nowrap',\n        cursor: self.style.contextMenuCursor\n      },\n      'canvas-datagrid-invalid-search-regExp': {\n        background: self.style.contextMenuFilterInvalidExpresion\n      }\n    };\n\n    if (css[className]) {\n      Object.keys(css[className]).map(function (prop) {\n        el.style[prop] = css[className][prop];\n      });\n    }\n\n    return;\n  };\n\n  self.appendTo = function (e) {\n    self.parentNode = e;\n    self.setDom();\n  };\n\n  self.setDom = function () {\n    if (self.isChildGrid) {\n      self.parentGrid = self.parentNode.parentGrid;\n      self.ctx = self.parentGrid.context;\n      self.canvas = self.parentGrid.canvas;\n      self.controlInput = self.parentGrid.controlInput;\n      self.eventParent = self.canvas;\n    } else {\n      self.controlInput = self.controlInput || document.createElement('input');\n      self.controlInput.onblur = self.intf.blur;\n      self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n      self.isChildGrid = false;\n      self.parentDOMNode = self.parentNode;\n      self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n\n      if (self.parentIsCanvas) {\n        self.canvas = self.parentDOMNode;\n      } else {\n        self.canvas = document.createElement('canvas');\n        self.parentDOMNode.appendChild(self.canvas);\n      }\n\n      document.body.appendChild(self.controlInput);\n      self.createInlineStyle(self.canvas, 'canvas-datagrid');\n      self.ctx = self.canvas.getContext('2d');\n      self.ctx.textBaseline = 'alphabetic';\n      self.eventParent = self.canvas;\n    }\n\n    self.parentNodeStyle = self.canvas.style;\n    self.controlInput.setAttribute('readonly', true);\n    self.controlInput.addEventListener('blur', function (e) {\n      if (e.target !== self.canvas) {\n        self.hasFocus = false;\n      }\n    });\n    self.eventParent.addEventListener('scroll', self.resize, false);\n    self.eventParent.addEventListener('touchstart', self.touchstart, false);\n    self.eventParent.addEventListener('mouseup', self.mouseup, false);\n    self.eventParent.addEventListener('mousedown', self.mousedown, false);\n    self.eventParent.addEventListener('dblclick', self.dblclick, false);\n    self.eventParent.addEventListener('click', self.click, false);\n    self.eventParent.addEventListener('mousemove', self.mousemove);\n    self[self.isChildGrid ? 'parentGrid' : 'eventParent'].addEventListener('wheel', self.scrollWheel, false);\n    self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n    self.controlInput.addEventListener('copy', self.copy);\n    self.controlInput.addEventListener('cut', self.cut);\n    self.controlInput.addEventListener('paste', self.paste);\n    self.controlInput.addEventListener('keypress', self.keypress, false);\n    self.controlInput.addEventListener('keyup', self.keyup, false);\n    self.controlInput.addEventListener('keydown', self.keydown, false);\n    window.addEventListener('resize', self.resize);\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/dom.js\n");

/***/ }),

/***/ "./lib/draw.js":
/*!*********************!*\
  !*** ./lib/draw.js ***!
  \*********************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/*jslint browser: true, unparam: true, todo: true*/\n\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(self) {\n  var perfCounters = [],\n      cachedImagesDrawn = false,\n      drawCount = 0,\n      perfWindowSize = 300,\n      entityCount = [],\n      hiddenFrozenColumnCount = 0,\n      scrollDebugCounters = [],\n      touchPPSCounters = [];\n  self.htmlImageCache = {}; // more heavyweight version than fillArray defined in intf.js\n\n  function fillArray(low, high, step, def) {\n    step = step || 1;\n    var i = [],\n        x;\n\n    for (x = low; x <= high; x += step) {\n      i[x] = def === undefined ? x : typeof def === 'function' ? def(x) : def;\n    }\n\n    return i;\n  }\n\n  function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n    var i = w / perfArr.length,\n        r = h / max;\n    x += self.canvasOffsetLeft;\n    y += self.canvasOffsetTop;\n    self.ctx.beginPath();\n    self.ctx.moveTo(x, y + h);\n    perfArr.forEach(function (n) {\n      var val = arrIndex === undefined ? n : n[arrIndex],\n          cx,\n          cy;\n\n      if (useAbs) {\n        val = Math.abs(val);\n      }\n\n      cx = x + i;\n      cy = y + h - val * r;\n      self.ctx.lineTo(cx, cy);\n      x += i;\n    });\n    self.ctx.moveTo(x + w, y + h);\n    self.ctx.strokeStyle = color;\n    self.ctx.stroke();\n  }\n\n  function drawOnAllImagesLoaded() {\n    var loaded = true;\n    Object.keys(self.htmlImageCache).forEach(function (html) {\n      if (!self.htmlImageCache[html].img.complete) {\n        loaded = false;\n      }\n    });\n\n    if (loaded && !cachedImagesDrawn) {\n      cachedImagesDrawn = true;\n      self.draw();\n    }\n  }\n\n  function drawHtml(cell) {\n    var img,\n        v = cell.innerHTML || cell.formattedValue,\n        cacheKey = v.toString() + cell.rowIndex.toString() + cell.columnIndex.toString(),\n        x = Math.round(cell.x + self.canvasOffsetLeft),\n        y = Math.round(cell.y + self.canvasOffsetTop);\n\n    if (self.htmlImageCache[cacheKey]) {\n      img = self.htmlImageCache[cacheKey].img;\n\n      if (self.htmlImageCache[cacheKey].height !== cell.height || self.htmlImageCache[cacheKey].width !== cell.width) {\n        // height and width of the cell has changed, invalidate cache\n        self.htmlImageCache[cacheKey] = undefined;\n      } else {\n        if (!img.complete) {\n          return;\n        }\n\n        return self.ctx.drawImage(img, x, y);\n      }\n    } else {\n      cachedImagesDrawn = false;\n    }\n\n    img = new Image(cell.width, cell.height);\n    self.htmlImageCache[cacheKey] = {\n      img: img,\n      width: cell.width,\n      height: cell.height\n    };\n\n    img.onload = function () {\n      self.ctx.drawImage(img, x, y);\n      drawOnAllImagesLoaded();\n    };\n\n    img.src = 'data:image/svg+xml;base64,' + btoa('<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' + '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' + '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' + v + '\\n' + '</body>' + '</foreignObject>\\n' + '</svg>\\n');\n  }\n\n  function drawOrderByArrow(x, y) {\n    var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n        ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n        mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n        aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n        ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n    x += self.canvasOffsetLeft;\n    y += self.canvasOffsetTop;\n    self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n    self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n    self.ctx.beginPath();\n    x = x + ml;\n    y = y + mt;\n\n    if (self.orderDirection === 'asc') {\n      self.ctx.moveTo(x, y);\n      self.ctx.lineTo(x + aw, y);\n      self.ctx.lineTo(x + aw * 0.5, y + ah);\n      self.ctx.moveTo(x, y);\n    } else {\n      self.ctx.lineTo(x, y + ah);\n      self.ctx.lineTo(x + aw, y + ah);\n      self.ctx.lineTo(x + aw * 0.5, y);\n      self.ctx.lineTo(x, y + ah);\n    }\n\n    self.ctx.stroke();\n    self.ctx.fill();\n    return ml + aw + mr;\n  }\n\n  function drawTreeArrow(cell, x, y) {\n    var mt = self.style.treeArrowMarginTop * self.scale,\n        mr = self.style.treeArrowMarginRight * self.scale,\n        ml = self.style.treeArrowMarginLeft * self.scale,\n        aw = self.style.treeArrowWidth * self.scale,\n        ah = self.style.treeArrowHeight * self.scale;\n    x += self.canvasOffsetLeft;\n    y += self.canvasOffsetTop;\n    self.ctx.fillStyle = self.style.treeArrowColor;\n    self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n    self.ctx.beginPath();\n    x = x + ml;\n    y = y + mt;\n\n    if (self.openChildren[cell.rowIndex]) {\n      self.ctx.moveTo(x, y);\n      self.ctx.lineTo(x + aw, y);\n      self.ctx.lineTo(x + aw * 0.5, y + ah);\n      self.ctx.moveTo(x, y);\n    } else {\n      self.ctx.lineTo(x, y);\n      self.ctx.lineTo(x + ah, y + aw * 0.5);\n      self.ctx.lineTo(x, y + aw);\n      self.ctx.lineTo(x, y);\n    }\n\n    self.ctx.stroke();\n    self.ctx.fill();\n    return ml + aw + mr;\n  }\n\n  function radiusRect(x, y, w, h, radius) {\n    x += self.canvasOffsetLeft;\n    y += self.canvasOffsetTop;\n    var r = x + w,\n        b = y + h;\n    self.ctx.beginPath();\n    self.ctx.moveTo(x + radius, y);\n    self.ctx.lineTo(r - radius, y);\n    self.ctx.quadraticCurveTo(r, y, r, y + radius);\n    self.ctx.lineTo(r, y + h - radius);\n    self.ctx.quadraticCurveTo(r, b, r - radius, b);\n    self.ctx.lineTo(x + radius, b);\n    self.ctx.quadraticCurveTo(x, b, x, b - radius);\n    self.ctx.lineTo(x, y + radius);\n    self.ctx.quadraticCurveTo(x, y, x + radius, y);\n  }\n\n  function fillRect(x, y, w, h) {\n    x += self.canvasOffsetLeft;\n    y += self.canvasOffsetTop;\n    self.ctx.fillRect(x, y, w, h);\n  }\n\n  function strokeRect(x, y, w, h) {\n    x += self.canvasOffsetLeft;\n    y += self.canvasOffsetTop;\n    self.ctx.strokeRect(x, y, w, h);\n  }\n\n  function fillText(text, x, y) {\n    x += self.canvasOffsetLeft;\n    y += self.canvasOffsetTop;\n    self.ctx.fillText(text, x, y);\n  }\n\n  function fillCircle(x, y, r) {\n    x += self.canvasOffsetLeft;\n    y += self.canvasOffsetTop;\n    self.ctx.beginPath();\n    self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n    self.ctx.fill();\n  }\n\n  function strokeCircle(x, y, r) {\n    x += self.canvasOffsetLeft;\n    y += self.canvasOffsetTop;\n    self.ctx.beginPath();\n    self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n    self.ctx.stroke();\n  }\n\n  function clipFrozenArea(mode) {\n    // 0 both, 1 rows, 2 cols\n    // self.lastFrozenColumnPixel;\n    // self.lastFrozenRowPixel;\n    self.ctx.beginPath();\n\n    if (mode === 0) {\n      self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n      self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n      self.ctx.lineTo(self.width, self.height);\n      self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n    }\n\n    if (mode === 1) {\n      self.ctx.moveTo(0, self.lastFrozenRowPixel);\n      self.ctx.lineTo(0, self.height);\n      self.ctx.lineTo(self.width, self.height);\n      self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n    }\n\n    if (mode === 2) {\n      self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n      self.ctx.lineTo(self.width, 0);\n      self.ctx.lineTo(self.width, self.height);\n      self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n    }\n\n    self.ctx.clip();\n  }\n\n  function fillHandle(x, y, r) {\n    if (self.style.selectionHandleType === 'circle') {\n      return fillCircle(x, y, r * 0.5);\n    }\n\n    fillRect(x - r * 0.5, y - r * 0.5, r, r);\n  }\n\n  function strokeHandle(x, y, r) {\n    if (self.style.selectionHandleType === 'circle') {\n      return strokeCircle(x, y, r * 0.5);\n    }\n\n    strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n  }\n\n  function addselectionHandle(c, pos) {\n    var hw = self.style.selectionHandleSize,\n        p = {\n      tr: function tr() {\n        fillHandle(c.x + c.width, c.y, hw);\n        strokeHandle(c.x + c.width, c.y, hw);\n      },\n      br: function br() {\n        fillHandle(c.x + c.width, c.y + c.height, hw);\n        strokeHandle(c.x + c.width, c.y + c.height, hw);\n      },\n      tl: function tl() {\n        fillHandle(c.x, c.y, hw);\n        strokeHandle(c.x, c.y, hw);\n      },\n      bl: function bl() {\n        fillHandle(c.x, c.y + c.height, hw);\n        strokeHandle(c.x, c.y + c.height, hw);\n      }\n    };\n    p[pos]();\n  }\n\n  function addBorderLine(c, pos) {\n    self.ctx.beginPath();\n    var p = {\n      t: function t() {\n        self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n        self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n      },\n      r: function r() {\n        self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n        self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n      },\n      b: function b() {\n        self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n        self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n      },\n      l: function l() {\n        self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n        self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n      }\n    };\n    p[pos]();\n    self.ctx.stroke();\n  }\n\n  function addEllipsis(text, width) {\n    var c,\n        w = 0;\n\n    if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n      return self.ellipsisCache[text][width];\n    } //TODO Add ellipsis back when there is a fast way to do it\n\n\n    w = self.ctx.measureText(text).width;\n    self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n    c = {\n      value: text,\n      width: w\n    };\n    self.ellipsisCache[text][width] = c;\n    return c;\n  }\n\n  function wrapText(cell, splitChar) {\n    if (!cell.formattedValue) {\n      return {\n        lines: [{\n          width: 0,\n          value: ''\n        }],\n        width: 0,\n        height: cell.calculatedLineHeight\n      };\n    }\n\n    var max = 0,\n        n = '\\n',\n        x,\n        word,\n        words = cell.formattedValue.split(splitChar),\n        textHeight = cell.calculatedLineHeight,\n        lines = [],\n        out = [],\n        wrap = self.style.cellWhiteSpace !== 'nowrap',\n        autoResize = self.attributes.autoResizeRows && wrap,\n        elWidth,\n        et = self.attributes.ellipsisText,\n        elClipLength,\n        plWidth,\n        clippedVal,\n        ogWordWidth,\n        previousLine,\n        line = {\n      width: 0,\n      value: ''\n    },\n        cHeight = wrap ? cell.paddedHeight : cell.calculatedLineHeight;\n    lines.push(line);\n    elWidth = self.ctx.measureText(' ' + et).width;\n\n    for (x = 0; x < words.length; x += 1) {\n      word = words[x];\n      var curSplitChar = word[word.length - 1] === '-' ? '' : splitChar;\n      var measure = self.ctx.measureText(word + curSplitChar);\n\n      if (line.width + measure.width + elWidth < cell.paddedWidth) {\n        line.value += word + curSplitChar;\n        line.width += measure.width;\n        continue;\n      } // if there is a hyphenated word that is too long\n      // split it and add the split set to the array\n      // then back up and re-read new split set\n      // this behavior seems right, it might not be\n\n\n      if (/\\w-\\w/.test(word) && cell.paddedWidth < measure.width) {\n        var arr = word.split('-');\n        arr = arr.map(function (item, index) {\n          return index === arr.length - 1 ? item : item + '-';\n        });\n        words.splice.apply(words, [x, 1].concat(_toConsumableArray(arr)));\n        x -= 1;\n        continue;\n      }\n\n      line = {\n        width: measure.width,\n        value: word + curSplitChar\n      };\n\n      if (x === 0) {\n        lines = [];\n        lines.push(line);\n      }\n\n      textHeight += cell.calculatedLineHeight;\n\n      if (textHeight > cHeight && !autoResize) {\n        if (lines.length === 0) {\n          break;\n        }\n\n        elClipLength = 1;\n        previousLine = lines[lines.length - 1];\n\n        if (previousLine.width < cell.paddedWidth && words.length === 1) {\n          break;\n        }\n\n        clippedVal = previousLine.value + word;\n        plWidth = self.ctx.measureText(clippedVal + et).width;\n        var originText = clippedVal;\n\n        if (plWidth > cell.paddedWidth) {\n          var stepLength = parseInt(clippedVal.length / 2);\n          var direction = -1;\n\n          while (stepLength > 0) {\n            clippedVal = originText.substr(0, stepLength * direction + clippedVal.length);\n            plWidth = self.ctx.measureText(clippedVal + et).width;\n            direction = plWidth > cell.paddedWidth ? -1 : 1;\n            stepLength = parseInt(stepLength / 2);\n          }\n        }\n\n        clippedVal = clippedVal + (originText.length != clippedVal.length ? et : '');\n        previousLine.value = clippedVal;\n        previousLine.width = plWidth;\n        break;\n      }\n\n      if (x > 0) {\n        lines.push(line);\n      }\n    }\n\n    return {\n      lines: lines,\n      width: max,\n      height: cell.calculatedLineHeight * lines.length\n    };\n  }\n\n  function drawText(cell) {\n    var ll = cell.text.lines.length,\n        h = cell.fontHeight * cell.lineHeight,\n        x,\n        line,\n        wrap = self.style.cellWhiteSpace !== 'nowrap',\n        textHeight = 0;\n\n    for (x = 0; x < cell.text.lines.length; x += 1) {\n      line = cell.text.lines[x];\n      var vPos = Math.max((cell.height - (wrap ? cell.text.height : cell.calculatedLineHeight)) * 0.5, 0) + h,\n          hPos = cell.paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n\n      if (cell.horizontalAlignment === 'right') {\n        hPos = cell.paddingLeft + cell.paddedWidth - line.width;\n      } else if (cell.horizontalAlignment === 'center') {\n        hPos = cell.paddingLeft + (cell.paddedWidth + cell.paddingRight) / 2 - line.width / 2;\n      }\n\n      if (cell.verticalAlignment === 'top') {\n        vPos = cell.calculatedLineHeight;\n      } else if (cell.verticalAlignment === 'bottom') {\n        vPos = cell.height - cell.paddingBottom - cell.text.height;\n      }\n\n      line.height = h + cell.lineSpacing;\n      line.offsetLeft = hPos;\n      line.offsetTop = vPos;\n      line.x = cell.x + hPos;\n      line.y = cell.y + textHeight + vPos;\n      textHeight += line.height;\n      fillText(line.value, line.x, line.y);\n    }\n\n    if (self.attributes.debug && cell.active) {\n      requestAnimationFrame(function () {\n        self.ctx.font = self.style.debugFont;\n        self.ctx.fillStyle = self.style.debugColor;\n        fillText(JSON.stringify({\n          x: cell.x,\n          y: cell.y,\n          h: cell.height,\n          w: cell.width,\n          pw: cell.paddedWidth,\n          idx: cell.columnIndex,\n          idx_ord: cell.sortColumnIndex\n        }, null, '\\t'), cell.x + 14, cell.y + 14);\n        fillText(JSON.stringify(cell.text.lines.map(function (l) {\n          return {\n            w: l.width,\n            v: l.value.length\n          };\n        }), null, '\\t'), cell.x + 14, cell.y + 30);\n      });\n    }\n  }\n\n  function getFrozenColumnsWidth() {\n    var w = 0,\n        s = self.getSchema(),\n        x = 0,\n        n = Math.min(self.frozenColumn, s.length),\n        column;\n    hiddenFrozenColumnCount = 0;\n\n    while (x < n) {\n      column = s[x];\n\n      if (column.hidden) {\n        hiddenFrozenColumnCount += 1;\n      } else {\n        w += self.getColumnWidth(x);\n      }\n\n      x += 1;\n    }\n\n    return w;\n  }\n  /**\n   * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n   * @memberof canvasDatagrid\n   * @name draw\n   * @method\n   */\n  // r = literal row index\n  // rd = row data array\n  // i = user order index\n  // o = literal data index\n  // y = y drawing cursor\n  // x = x drawing cursor\n  // s = visible schema array\n  // cx = current x drawing cursor sub calculation var\n  // cy = current y drawing cursor sub calculation var\n  // a = static cell (like corner cell)\n  // p = perf counter\n  // l = data length\n  // u = current cell\n  // h = current height\n  // w = current width\n\n\n  self.draw = function (internal) {\n    if (self.dispatchEvent('beforedraw', {})) {\n      return;\n    }\n\n    if (!self.isChildGrid && (!self.height || !self.width)) {\n      return;\n    }\n\n    if (self.isChildGrid && internal) {\n      requestAnimationFrame(self.parentGrid.draw);\n      return;\n    }\n\n    if (self.intf.visible === false) {\n      return;\n    } // initial values\n\n\n    var checkScrollHeight,\n        rowHeaderCell,\n        p,\n        cx,\n        cy,\n        treeGrid,\n        rowOpen,\n        rowHeight,\n        cornerCell,\n        y,\n        x,\n        c,\n        h,\n        w,\n        schema,\n        rowIndex,\n        rowData,\n        aCell,\n        viewData = self.viewData || [],\n        bc = self.style.gridBorderCollapse === 'collapse',\n        selectionBorders = [],\n        moveBorders = [],\n        selectionHandles = [],\n        rowHeaders = [],\n        l = viewData.length,\n        u = self.currentCell || {},\n        columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n        rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n        cellHeight = self.style.cellHeight;\n    drawCount += 1;\n    p = performance.now();\n    self.visibleRowHeights = []; // if data length has changed, there is no way to know\n\n    if (viewData.length > self.orders.rows.length) {\n      self.createRowOrders();\n    }\n\n    function drawScrollBars() {\n      var drawCorner,\n          en = self.scrollBox.entities,\n          m = self.style.scrollBarBoxMargin * 2;\n      self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n      self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n      en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin + (en.horizontalBar.width - self.scrollBox.scrollBoxWidth) * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth);\n      en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin + (en.verticalBar.height - self.scrollBox.scrollBoxHeight) * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight);\n\n      if (self.scrollBox.horizontalBarVisible) {\n        self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n        fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n        strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n        self.ctx.fillStyle = self.style.scrollBarBoxColor;\n\n        if (self.scrollBox.horizontalBoxVisible) {\n          if (/horizontal/.test(u.context)) {\n            self.ctx.fillStyle = self.style.scrollBarActiveColor;\n          }\n\n          radiusRect(en.horizontalBox.x, en.horizontalBox.y, en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n          self.ctx.stroke();\n          self.ctx.fill();\n        }\n\n        drawCorner = true;\n        self.visibleCells.unshift(en.horizontalBar);\n        self.visibleCells.unshift(en.horizontalBox);\n      }\n\n      if (self.scrollBox.verticalBarVisible) {\n        self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n        fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n        strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n\n        if (self.scrollBox.verticalBoxVisible) {\n          self.ctx.fillStyle = self.style.scrollBarBoxColor;\n\n          if (/vertical/.test(u.context)) {\n            self.ctx.fillStyle = self.style.scrollBarActiveColor;\n          }\n\n          radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width, en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n          self.ctx.stroke();\n          self.ctx.fill();\n        }\n\n        drawCorner = true;\n        self.visibleCells.unshift(en.verticalBar);\n        self.visibleCells.unshift(en.verticalBox);\n      }\n\n      if (drawCorner) {\n        //corner\n        self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n        self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n        radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n        self.ctx.stroke();\n        self.ctx.fill();\n        self.visibleCells.unshift(en.corner);\n      }\n    }\n\n    function createHandlesOverlayArray(cell) {\n      if (self.attributes.allowMovingSelection || self.mobile) {\n        if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n          selectionHandles.push([cell, 'tr']);\n          cell.selectionHandle = 'tr';\n        }\n\n        if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n          selectionHandles.push([cell, 'tl']);\n          cell.selectionHandle = 'tl';\n        }\n\n        if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n          selectionHandles.push([cell, 'bl']);\n          cell.selectionHandle = 'bl';\n        }\n\n        if (cell.selectionBorderBottom && cell.selectionBorderRight && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n          selectionHandles.push([cell, 'br']);\n          cell.selectionHandle = 'br';\n        }\n      }\n    }\n\n    function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n      offsetPoint = offsetPoint || {\n        x: 0,\n        y: 0\n      };\n      cell.selectionBorder = '';\n\n      if (!cell.isRowHeader && self.selections[cell.rowIndex + -offsetPoint.y] && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n        if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y] || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1 || cell.rowIndex === 0) && !cell.isHeader) {\n          drawArray.push([cell, 't']);\n          cell[propPrefix + 'BorderTop'] = true;\n          cell[propPrefix + 'Border'] += 't';\n        }\n\n        if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y] || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n          drawArray.push([cell, 'b']);\n          cell[propPrefix + 'BorderBottom'] = true;\n          cell[propPrefix + 'Border'] += 'b';\n        }\n\n        if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0 || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n          drawArray.push([cell, 'l']);\n          cell[propPrefix + 'BorderLeft'] = true;\n          cell[propPrefix + 'Border'] += 'l';\n        }\n\n        if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === schema.length || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n          drawArray.push([cell, 'r']);\n          cell[propPrefix + 'BorderRight'] = true;\n          cell[propPrefix + 'Border'] += 'r';\n        }\n      }\n    }\n\n    function drawCell(rowData, rowOrderIndex, rowIndex) {\n      return function drawEach(header, headerIndex, columnOrderIndex) {\n        if (header.hidden) {\n          return 0;\n        }\n\n        var cellStyle = header.style || 'cell',\n            cellGridAttributes,\n            cell,\n            isHeader = /HeaderCell/.test(cellStyle),\n            isCorner = /cornerCell/.test(cellStyle),\n            isRowHeader = 'rowHeaderCell' === cellStyle,\n            isColumnHeader = 'columnHeaderCell' === cellStyle,\n            wrap = self.style.cellWhiteSpace !== 'nowrap',\n            selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n            hovered = self.hovers.rowIndex === rowOrderIndex && (self.attributes.hoverMode === 'row' || self.hovers.columnIndex === columnOrderIndex),\n            active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n            isColumnHeaderCellCap = cellStyle === 'columnHeaderCellCap',\n            rawValue = rowData ? rowData[header.name] : undefined,\n            isGrid = header.type === 'canvas-datagrid',\n            activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex || self.orders.columns[self.activeCell.columnIndex] === headerIndex) && (columnOrderIndex === -1 || rowOrderIndex === -1) ? isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell' : false,\n            val,\n            f = self.formatters[header.type || 'string'],\n            orderByArrowSize = 0,\n            treeArrowSize = 0,\n            cellWidth = self.sizes.columns[headerIndex] || header.width,\n            ev = {\n          value: rawValue,\n          row: rowData,\n          header: header\n        };\n\n        if (isColumnHeaderCellCap) {\n          cellWidth = w - x;\n        } // if no data or schema are defined, a width is provided to the stub column\n\n\n        if (cellWidth === undefined) {\n          cellWidth = self.style.cellWidth;\n        }\n\n        cellWidth = cellWidth * self.scale;\n\n        if (x + cellWidth + self.style.cellBorderWidth < 0) {\n          x += cellWidth + self.style.cellBorderWidth;\n        }\n\n        if (active && cellStyle !== 'cornerCell') {\n          cellStyle = 'activeCell';\n        }\n\n        if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n          self.visibleRows.push(rowIndex);\n        }\n\n        val = self.dispatchEvent('formatcellvalue', ev);\n        cx = x;\n        cy = y;\n\n        if (cellStyle === 'cornerCell') {\n          cx = 0;\n          cy = 0;\n        } else if (isRowHeader) {\n          cx = 0;\n        } else if (isHeader) {\n          cy = 0;\n        }\n\n        cell = {\n          type: isGrid ? 'canvas-datagrid-cell' : header.type,\n          style: cellStyle,\n          nodeType: 'canvas-datagrid-cell',\n          x: cx,\n          y: cy,\n          fontHeight: (self.style[cellStyle + 'FontHeight'] || 0) * self.scale,\n          horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n          verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n          paddingLeft: (self.style[cellStyle + 'PaddingLeft'] || 0) * self.scale,\n          paddingTop: (self.style[cellStyle + 'PaddingTop'] || 0) * self.scale,\n          paddingRight: (self.style[cellStyle + 'PaddingRight'] || 0) * self.scale,\n          paddingBottom: (self.style[cellStyle + 'PaddingBottom'] || 0) * self.scale,\n          whiteSpace: self.style.cellWhiteSpace,\n          lineHeight: self.style.cellLineHeight,\n          lineSpacing: self.style.cellLineSpacing,\n          offsetTop: self.canvasOffsetTop + cy,\n          offsetLeft: self.canvasOffsetLeft + cx,\n          scrollTop: self.scrollBox.scrollTop,\n          scrollLeft: self.scrollBox.scrollLeft,\n          active: active || activeHeader,\n          hovered: hovered,\n          selected: selected,\n          width: cellWidth,\n          height: cellHeight,\n          offsetWidth: cellWidth,\n          offsetHeight: cellHeight,\n          parentNode: self.intf.parentNode,\n          offsetParent: self.intf.parentNode,\n          data: rowData,\n          isCorner: isCorner,\n          isHeader: isHeader,\n          isColumnHeader: isColumnHeader,\n          isColumnHeaderCellCap: isColumnHeaderCellCap,\n          isRowHeader: isRowHeader,\n          rowOpen: rowOpen,\n          header: header,\n          columnIndex: columnOrderIndex,\n          rowIndex: rowOrderIndex,\n          viewRowIndex: rowOrderIndex,\n          viewColumnIndex: columnOrderIndex,\n          boundRowIndex: self.getBoundRowIndexFromViewRowIndex(rowOrderIndex),\n          boundColumnIndex: columnOrderIndex,\n          sortColumnIndex: headerIndex,\n          sortRowIndex: rowIndex,\n          isGrid: isGrid,\n          isNormal: !isGrid && !isCorner && !isHeader,\n          gridId: (self.attributes.name || '') + rowIndex + ':' + headerIndex,\n          parentGrid: self.intf,\n          innerHTML: '',\n          activeHeader: activeHeader,\n          value: isHeader && !isRowHeader ? header.title || header.name : rawValue\n        };\n        cell.calculatedLineHeight = cell.fontHeight * cell.lineHeight + cell.lineSpacing;\n        cell.paddedWidth = cell.width - cell.paddingRight - cell.paddingLeft;\n        cell.paddedHeight = cell.height - cell.paddingTop - cell.paddingBottom;\n        ev.cell = cell;\n        cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n        cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[headerIndex];\n        self.visibleCells.unshift(cell);\n\n        if (self.dispatchEvent('beforerendercell', ev)) {\n          return;\n        }\n\n        self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n        self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n        self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n\n        if (hovered) {\n          self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n          self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n        }\n\n        if (selected) {\n          self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n          self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n        }\n\n        if (activeHeader) {\n          self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n        }\n\n        self.dispatchEvent('rendercell', ev);\n\n        if (cell.isGrid) {\n          if (cell.height !== rowHeight) {\n            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n            checkScrollHeight = true;\n          }\n\n          cell.width = self.sizes.columns[headerIndex] || self.style.cellWidthWithChildGrid;\n        }\n\n        if (rowOpen && !cell.isRowHeader) {\n          cell.height = self.sizes.rows[rowIndex] || self.style.cellHeight;\n        }\n\n        if (!cell.isGrid) {\n          fillRect(cx, cy, cell.width, cell.height);\n          strokeRect(cx, cy, cell.width, cell.height);\n        }\n\n        self.ctx.save();\n        radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n        self.ctx.clip();\n        self.dispatchEvent('afterrendercell', ev);\n\n        if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n          self.sizes.rows[isHeader ? -1 : rowIndex] = cell.height;\n          checkScrollHeight = true;\n        }\n\n        if (cell.width !== cellWidth) {\n          self.sizes.columns[headerIndex] = cell.width;\n          checkScrollHeight = true;\n        }\n\n        if (isRowHeader && self.attributes.tree) {\n          if (!self.dispatchEvent('rendertreearrow', ev)) {\n            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n          }\n        }\n\n        if (self.attributes.showRowNumbers && isRowHeader || !isRowHeader) {\n          if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n            if (!self.childGrids[cell.gridId]) {\n              // HACK: this only allows setting of the child grids styles if data is set _after_\n              // this is less than desirable.  An interface needs to be made to effect the\n              // style of all cell grids.  One for individual grids already exists.\n              cellGridAttributes = self.cellGridAttributes;\n              cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n              cellGridAttributes.component = false;\n              cellGridAttributes.parentNode = cell;\n              cellGridAttributes.data = rawValue;\n              ev.cellGridAttributes = cellGridAttributes;\n\n              if (self.dispatchEvent('beforecreatecellgrid', ev)) {\n                return;\n              }\n\n              self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n              self.sizes.rows[rowIndex] = self.sizes.rows[rowIndex] || self.style.cellGridHeight;\n              checkScrollHeight = true;\n            }\n\n            cell.grid = self.childGrids[cell.gridId];\n            cell.grid.parentNode = cell;\n            cell.grid.visible = true;\n            cell.grid.draw();\n            self.dispatchEvent('rendercellgrid', ev);\n          } else if (!cell.isGrid) {\n            if (self.childGrids[cell.gridId]) {\n              self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n            }\n\n            if (isHeader && self.orderBy === header.name) {\n              if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n              }\n            }\n\n            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n\n            if (hovered) {\n              self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n            }\n\n            if (selected) {\n              self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n            }\n\n            if (activeHeader) {\n              self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n            }\n\n            cell.treeArrowWidth = treeArrowSize;\n            cell.orderByArrowWidth = orderByArrowSize; // create text ref to see if height needs to expand\n\n            val = val !== undefined ? val : f ? f(ev) : '';\n\n            if (val === undefined && !f) {\n              val = '';\n              console.warn('canvas-datagrid: Unknown format ' + header.type + ' add a cellFormater');\n            }\n\n            cell.formattedValue = (val !== undefined && val !== null ? val : '').toString();\n\n            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n              cell.formattedValue = self.attributes.filterTextPrefix + val;\n            }\n\n            self.ctx.font = self.style[cellStyle + 'FontHeight'] * self.scale + 'px ' + self.style[cellStyle + 'FontName'];\n\n            if (!self.dispatchEvent('formattext', ev)) {\n              cell.text = wrapText(cell, ' ');\n            }\n\n            if (!self.dispatchEvent('rendertext', ev)) {\n              if (cell.innerHTML || header.type === 'html') {\n                drawHtml(cell);\n              } else {\n                drawText(cell);\n              }\n\n              if (wrap && cell.text && cell.text.height > rowHeight) {\n                self.sizes.rows[isHeader ? -1 : rowIndex] = cell.text.height;\n                checkScrollHeight = true;\n              }\n            }\n          }\n        }\n\n        if (active) {\n          aCell = cell;\n        }\n\n        createBorderOverlayArray(cell, selectionBorders, 'selection'); // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n\n        createHandlesOverlayArray(cell);\n\n        if (self.movingSelection) {\n          createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n        }\n\n        self.ctx.restore(); // Gaps may occur in row numbers between consecutively rendered rows\n        // when we are filtering. We draw attention to this by drawing a thick\n        // border overlapping the two consecutive row headers.\n\n        if (isRowHeader && self.attributes.showRowNumbers && self.attributes.showRowNumberGaps) {\n          var previousRowNumber = self.getBoundRowIndexFromViewRowIndex(rowOrderIndex - 1);\n          var hasRowGap = previousRowNumber !== undefined && cell.boundRowIndex > 0 && cell.boundRowIndex - previousRowNumber > 1;\n\n          if (hasRowGap) {\n            var barHeight = self.style.rowHeaderCellRowNumberGapHeight;\n            var barColor = self.style.rowHeaderCellRowNumberGapColor;\n            self.ctx.save();\n            self.ctx.fillStyle = barColor;\n            fillRect(cell.x, cell.y - barHeight / 2, cell.width, barHeight);\n            self.ctx.restore();\n          }\n        }\n\n        x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n        return cell.width;\n      };\n    }\n\n    function drawRowHeader(rowData, rowIndex, rowOrderIndex) {\n      if (self.attributes.showRowHeaders) {\n        x = 0; // When filtering we'd like to display the actual row numbers,\n        // as it is in the unfiltered data, instead of simply the viewed\n        // row index + 1. If rowIndex > viewData.length, it's a new row\n        // added to the end, and we want to render that new row's number\n\n        var filteredRowNumber = self.viewData && rowIndex < self.viewData.length ? self.getBoundRowIndexFromViewRowIndex(rowIndex) + 1 : self.originalData ? self.originalData.length + 1 : rowOrderIndex + 1;\n        var rowHeaderValue = self.hasActiveFilters() ? filteredRowNumber : rowIndex + 1;\n        var _rowHeaderCell = {\n          rowHeaderCell: rowHeaderValue\n        };\n        var headerDescription = {\n          name: 'rowHeaderCell',\n          width: self.sizes.columns[-1] || self.style.rowHeaderCellWidth,\n          style: 'rowHeaderCell',\n          type: 'string',\n          data: rowHeaderValue,\n          index: -1\n        };\n        rowOpen = self.openChildren[rowIndex];\n        drawCell(_rowHeaderCell, rowOrderIndex, rowIndex)(headerDescription, -1, -1);\n      }\n    }\n\n    function drawHeaders() {\n      var d,\n          g = schema.length,\n          i,\n          o,\n          columnHeaderCell,\n          header,\n          nonFrozenHeaderWidth;\n\n      function drawHeaderColumnRange(start, end) {\n        end = Math.min(end, g);\n\n        for (o = start; o < end; o += 1) {\n          i = self.orders.columns[o];\n          header = schema[i];\n\n          if (!header.hidden) {\n            d = {\n              title: header.title,\n              name: header.name,\n              width: header.width || self.style.cellWidth,\n              style: 'columnHeaderCell',\n              type: 'string',\n              index: o,\n              order: i\n            };\n            columnHeaderCell = {\n              columnHeaderCell: header.title || header.name\n            };\n            x += drawCell(columnHeaderCell, -1, -1)(d, i, o);\n\n            if (x > self.width + self.scrollBox.scrollLeft) {\n              break;\n            }\n          }\n        }\n      }\n\n      rowHeaders.forEach(function (rArgs, rhIndex) {\n        y = rArgs[3];\n        cellHeight = rArgs[4];\n\n        if (rhIndex === self.frozenRow) {\n          self.ctx.save();\n          radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n          self.ctx.clip();\n        }\n\n        drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n      });\n      self.ctx.restore();\n\n      if (self.attributes.showColumnHeaders) {\n        x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n\n        if (self.attributes.showRowHeaders) {\n          x += rowHeaderCellWidth;\n        }\n\n        y = 0; // cell height might have changed during drawing\n\n        cellHeight = self.getColumnHeaderCellHeight();\n        drawHeaderColumnRange(self.scrollIndexLeft, g);\n        nonFrozenHeaderWidth = x;\n        x = self.style.columnHeaderCellBorderWidth;\n\n        if (self.attributes.showRowHeaders) {\n          x += rowHeaderCellWidth;\n        }\n\n        drawHeaderColumnRange(0, self.frozenColumn); // fill in the space right of the headers\n\n        x = nonFrozenHeaderWidth;\n\n        if (x < w) {\n          c = {\n            name: '',\n            width: self.style.scrollBarWidth,\n            style: 'columnHeaderCellCap',\n            isColumnHeaderCell: true,\n            isColumnHeaderCellCap: true,\n            type: 'string',\n            index: schema.length\n          };\n          drawCell({\n            endCap: ''\n          }, -1, -1)(c, -1, -1);\n        } // fill in the space right of the headers\n\n\n        if (self.attributes.showRowHeaders) {\n          cornerCell = {\n            cornerCell: ''\n          };\n          x = 0;\n          c = {\n            name: 'cornerCell',\n            width: self.style.rowHeaderCellWidth,\n            style: 'cornerCell',\n            type: 'string',\n            index: -1\n          };\n          drawCell(cornerCell, -1, -1)(c, -1, -1);\n        }\n      }\n    }\n\n    function drawRow(rowOrderIndex, rowIndex) {\n      var headerIndex,\n          treeHeight,\n          rowSansTreeHeight,\n          columnOrderIndex,\n          g = schema.length;\n\n      if (y - cellHeight * 2 > h) {\n        return false;\n      }\n\n      rowData = viewData[rowOrderIndex];\n      rowOpen = self.openChildren[rowOrderIndex];\n      rowSansTreeHeight = (self.sizes.rows[rowOrderIndex] || self.style.cellHeight) * self.scale;\n      treeHeight = (rowOpen ? self.sizes.trees[rowOrderIndex] : 0) * self.scale;\n      rowHeight = rowSansTreeHeight + treeHeight;\n\n      if (y < -rowHeight) {\n        return false;\n      }\n\n      if (self.attributes.showRowHeaders) {\n        x += rowHeaderCellWidth;\n      }\n\n      cellHeight = rowHeight; //draw normal columns\n\n      for (columnOrderIndex = self.scrollIndexLeft; columnOrderIndex < g; columnOrderIndex += 1) {\n        headerIndex = self.orders.columns[columnOrderIndex];\n        x += drawCell(rowData, rowOrderIndex, rowIndex)(schema[headerIndex], headerIndex, columnOrderIndex);\n\n        if (x > self.width) {\n          self.scrollIndexRight = columnOrderIndex;\n          self.scrollPixelRight = x;\n          break;\n        }\n      } //draw frozen columns\n\n\n      x = 0;\n\n      if (self.attributes.showRowHeaders) {\n        x += rowHeaderCellWidth;\n      }\n\n      for (columnOrderIndex = 0; columnOrderIndex < self.frozenColumn; columnOrderIndex += 1) {\n        headerIndex = self.orders.columns[columnOrderIndex];\n        x += drawCell(rowData, rowOrderIndex, rowIndex)(schema[headerIndex], headerIndex, columnOrderIndex);\n\n        if (x > self.width) {\n          break;\n        }\n      }\n\n      self.lastFrozenColumnPixel = x; // cell height might have changed during drawing\n\n      cellHeight = rowHeight;\n      x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth; // don't draw a tree for the new row\n\n      treeGrid = self.childGrids[rowOrderIndex];\n\n      if (rowOrderIndex !== viewData.length && rowOpen) {\n        treeGrid.visible = true;\n        treeGrid.parentNode = {\n          offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n          offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n          offsetHeight: treeHeight,\n          offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n          offsetParent: self.intf.parentNode,\n          parentNode: self.intf.parentNode,\n          style: self.style,\n          nodeType: 'canvas-datagrid-tree',\n          scrollTop: self.scrollBox.scrollTop,\n          scrollLeft: self.scrollBox.scrollLeft,\n          rowIndex: rowOrderIndex\n        };\n        self.visibleCells.unshift({\n          rowIndex: rowOrderIndex,\n          columnIndex: 0,\n          y: treeGrid.parentNode.offsetTop,\n          x: treeGrid.parentNode.offsetLeft,\n          height: treeGrid.height,\n          width: treeGrid.width,\n          style: 'tree-grid',\n          type: treeGrid.parentNode.nodeType\n        });\n        treeGrid.draw();\n      } else if (treeGrid) {\n        treeGrid.parentNode.offsetHeight = 0;\n        delete self.sizes.trees[rowOrderIndex];\n      }\n\n      rowHeaders.push([rowData, rowOrderIndex, rowIndex, y, rowHeight]);\n      self.visibleRowHeights[rowOrderIndex] = rowHeight;\n      y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n      return true;\n    }\n\n    function initDraw() {\n      self.visibleRows = [];\n      schema = self.getSchema();\n      self.visibleCells = [];\n      self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0.5;\n      self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : -0.5;\n      h = self.height;\n      w = self.width;\n    }\n\n    function drawBackground() {\n      radiusRect(0, 0, w, h, 0);\n      self.ctx.clip();\n      self.ctx.fillStyle = self.style.gridBackgroundColor;\n      fillRect(0, 0, w, h);\n    }\n\n    function drawFrozenRows() {\n      var rowOrderIndex,\n          ln = Math.min(viewData.length, self.frozenRow);\n      x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n      y = columnHeaderCellHeight;\n\n      for (rowIndex = 0; rowIndex < ln; rowIndex += 1) {\n        rowOrderIndex = self.orders.rows[rowIndex];\n\n        if (!drawRow(rowOrderIndex, rowIndex)) {\n          break;\n        }\n      }\n\n      if (self.attributes.allowFreezingRows) {\n        // HACK great, another stupid magic number.\n        // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n        y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n      }\n\n      self.lastFrozenRowPixel = y;\n    }\n\n    function drawRows() {\n      self.ctx.save();\n\n      if (self.frozenRow > 0) {\n        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n        self.ctx.clip();\n      }\n\n      var columnOrderIndex,\n          rowOrderIndex,\n          headerIndex,\n          g = schema.length;\n      x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n\n      if (!self.attributes.snapToRow) {\n        y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n      }\n\n      for (rowIndex = self.frozenRow + self.scrollIndexTop; rowIndex < l; rowIndex += 1) {\n        rowOrderIndex = self.orders.rows[rowIndex];\n        self.scrollIndexBottom = rowIndex;\n        self.scrollPixelBottom = y;\n\n        if (!drawRow(rowOrderIndex, rowIndex)) {\n          break;\n        }\n      }\n\n      if (self.attributes.showNewRow) {\n        if (self.attributes.showRowHeaders) {\n          x += rowHeaderCellWidth;\n        }\n\n        rowHeight = cellHeight = self.style.cellHeight;\n        rowOpen = false;\n\n        for (columnOrderIndex = self.scrollIndexLeft; columnOrderIndex < g; columnOrderIndex += 1) {\n          headerIndex = self.orders.columns[columnOrderIndex];\n          x += drawCell(self.newRow, viewData.length, viewData.length)(schema[headerIndex], headerIndex, columnOrderIndex);\n\n          if (x > self.width + self.scrollBox.scrollLeft) {\n            break;\n          }\n        }\n\n        rowHeaders.push([self.newRow, viewData.length, viewData.length, y, rowHeight]);\n      }\n\n      self.ctx.restore();\n    }\n\n    function drawMoveMarkers() {\n      if (!self.movingSelection) {\n        return;\n      }\n\n      self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n      self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n      self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n      moveBorders.forEach(function (c) {\n        addBorderLine(c[0], c[1]);\n      });\n      self.ctx.setLineDash([]);\n    }\n\n    function drawReorderMarkers() {\n      if (!self.reorderObject) {\n        return;\n      }\n\n      var b = {\n        height: self.reorderObject.height,\n        width: self.reorderObject.width,\n        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n      },\n          m = {\n        width: w,\n        height: h,\n        x: 0,\n        y: 0\n      };\n      self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n      self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n      self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n\n      if (self.dragMode === 'row-reorder') {\n        b.width = w;\n        b.x = 0;\n        m.width = w;\n        m.height = self.currentCell.height;\n        m.y = self.currentCell.y;\n        fillRect(b.x, b.y, b.width, b.height);\n        strokeRect(b.x, b.y, b.width, b.height);\n        self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n        self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n\n        if (self.currentCell.rowIndex !== self.reorderObject.rowIndex && self.currentCell.rowIndex > -1 && self.currentCell.rowIndex < l) {\n          addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n        }\n      } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n        b.height = h;\n        b.y = 0;\n        m.height = h;\n        m.width = self.currentCell.width;\n        m.y = 0;\n        m.x = self.currentCell.x;\n        fillRect(b.x, b.y, b.width, b.height);\n        strokeRect(b.x, b.y, b.width, b.height);\n        self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n        self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n\n        if (self.currentCell.sortColumnIndex !== self.reorderObject.sortColumnIndex && self.currentCell.sortColumnIndex > -1 && self.currentCell.sortColumnIndex < schema.length) {\n          addBorderLine(m, self.reorderTarget.columnIndex > self.reorderObject.columnIndex ? 'r' : 'l');\n        }\n      }\n    }\n\n    function drawBorder() {\n      self.ctx.lineWidth = self.style.gridBorderWidth;\n      self.ctx.strokeStyle = self.style.gridBorderColor;\n      strokeRect(0, 0, self.width, self.height);\n    }\n\n    function drawSelectionBorders() {\n      self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n      self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n\n      function dsb(c) {\n        addBorderLine(c[0], c[1]);\n      }\n\n      selectionBorders.filter(function (c) {\n        return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n      }).forEach(dsb);\n      self.ctx.save();\n      clipFrozenArea(0);\n      selectionBorders.filter(function (c) {\n        return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n      }).forEach(dsb);\n      self.ctx.restore();\n      self.ctx.save();\n      clipFrozenArea(1);\n      selectionBorders.filter(function (c) {\n        return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n      }).forEach(dsb);\n      self.ctx.restore();\n      self.ctx.save();\n      clipFrozenArea(2);\n      selectionBorders.filter(function (c) {\n        return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n      }).forEach(dsb);\n      self.ctx.restore();\n    }\n\n    function drawSelectionHandles() {\n      if (self.mobile || self.attributes.allowMovingSelection) {\n        self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n        self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n        self.ctx.fillStyle = self.style.selectionHandleColor;\n        selectionHandles.forEach(function (c) {\n          addselectionHandle(c[0], c[1]);\n          var az = self.attributes.touchSelectHandleZone / 2,\n              ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n              ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n          self.visibleCells.unshift({\n            x: ax,\n            y: ay,\n            height: self.style.selectionHandleSize + az,\n            width: self.style.selectionHandleSize + az,\n            style: 'selection-handle-' + c[1]\n          });\n        });\n      }\n    }\n\n    function drawActiveCell() {\n      if (!aCell) {\n        return;\n      }\n\n      self.ctx.save();\n      var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n          acx = cl ? self.lastFrozenColumnPixel : 0,\n          acy = cl ? self.lastFrozenRowPixel : 0,\n          acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n          ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n      radiusRect(acx, acy, acw, ach, 0);\n      self.ctx.clip();\n\n      if (self.attributes.selectionMode === 'row') {\n        if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n          self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n          self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n          strokeRect(1, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n        }\n      } else {\n        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n        strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n      }\n\n      self.ctx.restore();\n    }\n\n    function drawFrozenMarkers() {\n      var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n          mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n          xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n          yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n      self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n\n      if (self.attributes.allowFreezingColumns) {\n        self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n        self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n        fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n        strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n        self.visibleCells.unshift({\n          x: mx,\n          y: 0,\n          height: self.height,\n          width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n          style: 'frozen-column-marker'\n        });\n      }\n\n      if (self.attributes.allowFreezingRows) {\n        self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n        self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n        fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n        strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n        self.visibleCells.unshift({\n          x: 0,\n          y: my,\n          height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n          width: self.width,\n          style: 'frozen-row-marker'\n        });\n      }\n\n      if (self.freezeMarkerPosition) {\n        self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n        self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n\n        if (self.dragMode === 'frozen-column-marker') {\n          fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n          strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n        } else {\n          fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n          strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n        }\n      }\n    }\n\n    function drawPerfLines() {\n      if (!self.attributes.showPerformance) {\n        return;\n      }\n\n      var pw = 250,\n          px = self.width - pw - self.style.scrollBarWidth - self.style.scrollBarBorderWidth * 2,\n          py = columnHeaderCellHeight,\n          ph = 100;\n\n      if (scrollDebugCounters.length === 0) {\n        scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () {\n          return [0, 0];\n        });\n      }\n\n      if (touchPPSCounters.length === 0) {\n        touchPPSCounters = fillArray(0, perfWindowSize, 1, function () {\n          return [0, 0];\n        });\n      }\n\n      if (entityCount.length === 0) {\n        entityCount = fillArray(0, perfWindowSize, 1, 0);\n      }\n\n      self.ctx.lineWidth = 0.5;\n\n      function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n        var v;\n        drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n        self.ctx.fillStyle = color;\n        fillRect(3 + px, py + 9 + rowIndex * 11, 8, 8);\n        self.ctx.fillStyle = self.style.debugPerfChartTextColor;\n        v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n        fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + rowIndex * 11);\n      }\n\n      self.ctx.textAlign = 'left';\n      self.ctx.font = self.style.debugFont;\n      self.ctx.fillStyle = self.style.debugPerfChartBackground;\n      fillRect(px, py, pw, ph);\n      [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, self.style.debugScrollHeightColor, false], ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, self.style.debugScrollWidthColor, false], ['Performance', perfCounters, undefined, 200, self.style.debugPerformanceColor, false], ['Entities', entityCount, undefined, 1500, self.style.debugEntitiesColor, false], ['TouchPPSX', touchPPSCounters, 0, 1000, self.style.debugTouchPPSXColor, true], ['TouchPPSY', touchPPSCounters, 1, 1000, self.style.debugTouchPPSYColor, true]].forEach(function (i, index) {\n        i.push(index);\n        dpl.apply(null, i);\n      });\n      self.ctx.fillStyle = self.style.debugPerfChartBackground;\n      entityCount.pop();\n      entityCount.unshift(self.visibleCells.length);\n      scrollDebugCounters.pop();\n      scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n      touchPPSCounters.pop();\n      touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n    }\n\n    function drawDebug() {\n      self.ctx.save();\n      var d;\n\n      if (self.attributes.showPerformance || self.attributes.debug) {\n        if (perfCounters.length === 0) {\n          perfCounters = fillArray(0, perfWindowSize, 1, 0);\n        }\n\n        perfCounters.pop();\n        perfCounters.unshift(performance.now() - p);\n      }\n\n      if (!self.attributes.debug) {\n        self.ctx.restore();\n        return;\n      }\n\n      self.ctx.font = self.style.debugFont;\n      d = {};\n      d.perf = (perfCounters.reduce(function (a, b) {\n        return a + b;\n      }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n      d.perfDelta = perfCounters[0].toFixed(1);\n      d.frozenColumnsWidth = getFrozenColumnsWidth();\n      d.htmlImages = Object.keys(self.htmlImageCache).length;\n      d.reorderObject = 'x: ' + (self.reorderObject || {\n        columnIndex: 0\n      }).columnIndex + ', y: ' + (self.reorderObject || {\n        rowIndex: 0\n      }).rowIndex;\n      d.reorderTarget = 'x: ' + (self.reorderTarget || {\n        columnIndex: 0\n      }).columnIndex + ', y: ' + (self.reorderTarget || {\n        rowIndex: 0\n      }).rowIndex;\n      d.scale = self.scale;\n      d.startScale = self.startScale;\n      d.scaleDelta = self.scaleDelta;\n      d.zoomDeltaStart = self.zoomDeltaStart;\n      d.touchLength = self.touchLength;\n      d.touches = 'y0: ' + (self.touchPosition || {\n        y: 0\n      }).y + ' y1: ' + (self.touchPosition1 || {\n        y: 0\n      }).y;\n      d.scrollBox = self.scrollBox.toString();\n      d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n      d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n      d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n      d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n      d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n      d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n      d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n      d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n      d.touchDuration = self.touchDuration;\n      d.pointerLockPosition = self.pointerLockPosition ? self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n      d.size = 'w: ' + self.width + ', h: ' + self.height;\n      d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n      d.touch = !self.touchStart ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n      d.entities = self.visibleCells.length;\n      d.hasFocus = self.hasFocus;\n      d.dragMode = self.dragMode;\n\n      if (self.currentCell) {\n        d.columnIndex = self.currentCell.columnIndex;\n        d.rowIndex = self.currentCell.rowIndex;\n        d.sortColumnIndex = self.currentCell.sortColumnIndex;\n        d.sortRowIndex = self.currentCell.sortRowIndex;\n        d.context = self.currentCell.context;\n        d.dragContext = self.currentCell.dragContext;\n        d.style = self.currentCell.style;\n        d.type = self.currentCell.type;\n      }\n\n      self.ctx.textAlign = 'right';\n      self.ctx.fillStyle = self.style.debugBackgroundColor;\n      fillRect(0, 0, self.width, self.height);\n      Object.keys(d).forEach(function (key, index) {\n        var m = key + ': ' + d[key],\n            lh = 14;\n        self.ctx.fillStyle = self.style.debugColor;\n        fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + index * lh);\n      });\n      self.ctx.restore();\n    }\n\n    self.ctx.save();\n    initDraw();\n    drawBackground();\n    drawFrozenRows();\n    drawRows();\n    drawActiveCell();\n    drawHeaders();\n    drawFrozenMarkers();\n    drawSelectionHandles();\n    drawReorderMarkers();\n    drawMoveMarkers();\n    drawBorder();\n    drawSelectionBorders();\n    drawScrollBars();\n\n    if (checkScrollHeight) {\n      self.resize(true);\n    }\n\n    drawDebug();\n    drawPerfLines();\n\n    if (self.dispatchEvent('afterdraw', {})) {\n      return;\n    }\n\n    self.ctx.restore();\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/draw.js\n");

/***/ }),

/***/ "./lib/events.js":
/*!***********************!*\
  !*** ./lib/events.js ***!
  \***********************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.n, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var is_printable_key_event__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! is-printable-key-event */ \"./node_modules/is-printable-key-event/dist/index.js\");\n/* harmony import */ var is_printable_key_event__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(is_printable_key_event__WEBPACK_IMPORTED_MODULE_0__);\n/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(self) {\n  var wheeling;\n\n  self.stopPropagation = function (e) {\n    e.stopPropagation();\n  };\n  /**\r\n   * Adds an event listener to the given event.\r\n   * @memberof canvasDatagrid\r\n   * @name addEventListener\r\n   * @method\r\n   * @param {string} ev The name of the event to subscribe to.\r\n   * @param {function} fn The event procedure to execute when the event is raised.\r\n   */\n\n\n  self.addEventListener = function (ev, fn) {\n    self.events[ev] = self.events[ev] || [];\n    self.events[ev].unshift(fn);\n  };\n  /**\r\n   * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\r\n   * @memberof canvasDatagrid\r\n   * @name removeEventListener\r\n   * @method\r\n   * @param {string} ev The name of the event to unsubscribe from.\r\n   * @param {function} fn The event procedure to execute when the event is raised.\r\n   */\n\n\n  self.removeEventListener = function (ev, fn) {\n    (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n      if (fn === sfn) {\n        self.events[ev].splice(idx, 1);\n      }\n    });\n  };\n  /**\r\n   * Removes all function from the given event.  Must be an actual reference to the function that was bound.\r\n   * @memberof canvasDatagrid\r\n   * @name removeEventListener\r\n   * @method\r\n   * @param {string} ev The name of the event to unsubscribe from.\r\n   * @param {function} fn The event procedure to execute when the event is raised.\r\n   */\n\n\n  self.clearEventListener = function (ev) {\n    (self.events[ev] || []).splice();\n  };\n  /**\r\n   * Fires the given event, passing an event object to the event subscribers.\r\n   * @memberof canvasDatagrid\r\n   * @name dispatchEvent\r\n   * @method\r\n   * @param {number} ev The name of the event to dispatch.\r\n   * @param {number} e The event object.\r\n   */\n\n\n  self.dispatchEvent = function (ev, e) {\n    e = ev.type ? ev : e || {};\n    ev = ev.type || ev;\n    var defaultPrevented;\n\n    function preventDefault() {\n      defaultPrevented = true;\n    }\n\n    if (!self.events[ev]) {\n      return;\n    }\n\n    self.events[ev].forEach(function dispatchEachEvent(fn) {\n      e.ctx = self.ctx;\n      e.preventDefault = preventDefault;\n      fn.apply(self.intf, [e]);\n    });\n    return defaultPrevented;\n  };\n\n  self.getRatio = function () {\n    return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) / (self.ctx.webkitBackingStorePixelRatio || self.ctx.mozBackingStorePixelRatio || self.ctx.msBackingStorePixelRatio || self.ctx.oBackingStorePixelRatio || self.ctx.backingStorePixelRatio || 1));\n  };\n\n  self.resize = function (drawAfterResize) {\n    if (!self.canvas) {\n      return;\n    }\n\n    var x,\n        v = {\n      x: 0,\n      y: 0,\n      height: 0,\n      width: 0,\n      style: 'vertical-scroll-bar'\n    },\n        n = {\n      x: 0,\n      y: 0,\n      height: 0,\n      width: 0,\n      style: 'horizontal-scroll-bar'\n    },\n        vb = {\n      x: 0,\n      y: 0,\n      height: 0,\n      width: 0,\n      style: 'vertical-scroll-box'\n    },\n        nb = {\n      x: 0,\n      y: 0,\n      height: 0,\n      width: 0,\n      style: 'horizontal-scroll-box'\n    },\n        co = {\n      x: 0,\n      y: 0,\n      height: 0,\n      width: 0,\n      isCorner: true,\n      isScrollBoxCorner: true,\n      style: 'scroll-box-corner'\n    },\n        m = self.style.scrollBarBoxMargin * 2,\n        b = self.style.scrollBarBorderWidth * 2,\n        d = self.style.scrollBarBoxMargin * 0.5,\n        sbw = self.style.scrollBarWidth + self.style.scrollBarBorderWidth * 2,\n        ratio = self.getRatio(),\n        bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n        cellBorder = self.style.cellBorderWidth * bm,\n        columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n        dataHeight = 0,\n        dataWidth = 0,\n        dims,\n        l = (self.viewData || []).length,\n        columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n        rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n        ch = self.style.cellHeight,\n        s = self.getSchema(); // sets actual DOM canvas element\n\n    function checkScrollBoxVisibility() {\n      self.scrollBox.horizontalBarVisible = self.style.width !== 'auto' && dataWidth > self.scrollBox.width && self.style.overflowX !== 'hidden' || self.style.overflowX === 'scroll';\n      self.scrollBox.horizontalBoxVisible = dataWidth > self.scrollBox.width;\n      self.scrollBox.verticalBarVisible = self.style.height !== 'auto' && dataHeight > self.scrollBox.height && self.style.overflowY !== 'hidden' || self.style.overflowY === 'scroll';\n      self.scrollBox.verticalBoxVisible = dataHeight > self.scrollBox.height;\n    }\n\n    function setScrollBoxSize() {\n      self.scrollBox.width = self.width - rowHeaderCellWidth;\n      self.scrollBox.height = self.height - columnHeaderCellHeight;\n    }\n\n    function setCanvasSize() {\n      if (self.isChildGrid) {\n        return;\n      }\n\n      dims = {\n        // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n        height: columnHeaderCellHeight + dataHeight + cellBorder + 1,\n        width: dataWidth + rowHeaderCellWidth + cellBorder\n      };\n      ['width', 'height'].forEach(function (dim) {\n        //TODO: support inherit\n        if (['auto', undefined].indexOf(self.style[dim]) !== -1 && ['auto', undefined].indexOf(self.appliedInlineStyles[dim]) !== -1) {\n          self.parentNodeStyle[dim] = dims[dim] + 'px';\n        } else if (['auto', undefined].indexOf(self.style[dim]) == -1 && ['auto', undefined].indexOf(self.appliedInlineStyles[dim]) == -1) {\n          self.parentNodeStyle[dim] = self.style[dim];\n\n          if (self.isComponent) {\n            self.canvas.style[dim] = self.style[dim];\n          }\n        }\n      });\n    }\n\n    self.scrollCache.x = [];\n    self.scrollCache.y = [];\n\n    for (x = 0; x < l; x += 1) {\n      self.scrollCache.y[x] = dataHeight;\n      dataHeight += ((self.sizes.rows[x] || ch) + (self.sizes.trees[x] || 0)) * self.scale + ( // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n      self.frozenRow > x ? self.sizes.trees[x] || 0 : 0);\n    }\n\n    if (l > 1) {\n      self.scrollCache.y[x] = dataHeight;\n    }\n\n    dataWidth = s.reduce(function reduceSchema(accumulator, column, columnIndex) {\n      // intentional redefintion of column.  This causes scrollCache to be in the correct order\n      column = s[self.orders.columns[columnIndex]];\n\n      if (column.hidden) {\n        self.scrollCache.x[columnIndex] = accumulator;\n        return accumulator;\n      }\n\n      var va = accumulator + self.getColumnWidth(self.orders.columns[columnIndex]);\n      self.scrollCache.x[columnIndex] = va;\n      return va;\n    }, 0) || 0;\n\n    if (self.attributes.showNewRow) {\n      dataHeight += ch;\n    }\n\n    if (self.attributes.snapToRow) {\n      dataHeight += self.style.cellHeight;\n    }\n\n    setCanvasSize();\n\n    if (self.isChildGrid) {\n      self.width = self.parentNode.offsetWidth;\n      self.height = self.parentNode.offsetHeight;\n    } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n      self.height = self.canvas.offsetHeight;\n      self.width = self.canvas.offsetWidth;\n      self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n      self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n    } /// calculate scroll bar dimensions\n    // non-controversial\n\n\n    self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n    self.scrollBox.left = rowHeaderCellWidth; // width and height of scroll box\n\n    setScrollBoxSize(); // is the data larger than the scroll box\n\n    checkScrollBoxVisibility(); // if the scroll box is visible, make room for it by expanding the size of the element\n    // if the other dimension is set to auto\n\n    if (self.scrollBox.horizontalBarVisible) {\n      if (self.style.height === 'auto' && !self.isChildGrid) {\n        self.height += sbw;\n      }\n\n      dataHeight += sbw;\n      setCanvasSize();\n      setScrollBoxSize();\n      checkScrollBoxVisibility();\n    }\n\n    if (self.scrollBox.verticalBarVisible) {\n      if (self.style.width === 'auto' && !self.isChildGrid) {\n        self.width += sbw;\n      }\n\n      dataWidth += sbw;\n      setCanvasSize();\n      setScrollBoxSize();\n      checkScrollBoxVisibility();\n    } // set again after bar visibility checks\n\n\n    setScrollBoxSize();\n    self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n    self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height;\n    self.scrollBox.widthBoxRatio = self.scrollBox.width / dataWidth;\n    self.scrollBox.scrollBoxWidth = self.scrollBox.width * self.scrollBox.widthBoxRatio - self.style.scrollBarWidth - b - d; // TODO: This heightBoxRatio number is terribly wrong.\n    // They should be a result of the size of the grid/canvas?\n    // it being off causes the scroll bar to \"slide\" under\n    // the dragged mouse.\n    // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n\n    self.scrollBox.heightBoxRatio = (self.scrollBox.height - columnHeaderCellHeight) / dataHeight;\n    self.scrollBox.scrollBoxHeight = self.scrollBox.height * self.scrollBox.heightBoxRatio - self.style.scrollBarWidth - b - d;\n    self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n    self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize); // horizontal\n\n    n.x += rowHeaderCellWidth;\n    n.y += self.height - self.style.scrollBarWidth - d;\n    n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n    n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d; // horizontal box\n\n    nb.y = n.y + self.style.scrollBarBoxMargin;\n    nb.width = self.scrollBox.scrollBoxWidth;\n    nb.height = self.style.scrollBarBoxWidth; // vertical\n\n    v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n    v.y += columnHeaderCellHeight;\n    v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n    v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m; // vertical box\n\n    vb.x = v.x + self.style.scrollBarBoxMargin;\n    vb.width = self.style.scrollBarBoxWidth;\n    vb.height = self.scrollBox.scrollBoxHeight; // corner\n\n    co.x = n.x + n.width + m;\n    co.y = v.y + v.height + m;\n    co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n    co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n    self.scrollBox.entities = {\n      horizontalBar: n,\n      horizontalBox: nb,\n      verticalBar: v,\n      verticalBox: vb,\n      corner: co\n    };\n    self.scrollBox.bar = {\n      v: v,\n      h: n\n    };\n    self.scrollBox.box = {\n      v: vb,\n      h: nb\n    }; /// calculate page and dom elements\n\n    self.page = Math.max(1, self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap); // set canvas drawing related items\n\n    if (!self.isChildGrid) {\n      self.canvas.width = self.width * ratio;\n      self.canvas.height = self.height * ratio;\n      self.ctx.scale(ratio, ratio);\n    } // resize any open dom elements (input/textarea)\n\n\n    self.resizeEditInput();\n    self.scroll(true);\n\n    if (drawAfterResize) {\n      self.draw(true);\n    }\n\n    self.dispatchEvent('resize', {});\n    return true;\n  };\n\n  self.scroll = function (dontDraw) {\n    var s = self.getSchema(),\n        l = (self.viewData || []).length,\n        ch = self.style.cellHeight; // go too far in leaps, then get focused\n\n    self.scrollIndexTop = Math.floor(l * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight) - 100);\n    self.scrollIndexTop = Math.max(self.scrollIndexTop, 0);\n    self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop]; // sometimes the grid is rendered but the height is zero\n\n    if (self.scrollBox.scrollHeight === 0) {\n      self.scrollIndexTop = 0;\n    }\n\n    self.scrollPixelTop = 0;\n    self.scrollIndexLeft = self.frozenColumn;\n    self.scrollPixelLeft = 0;\n\n    while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.viewData.length) {\n      // start on index +1 since index 0 was used in \"go too far\" section above\n      self.scrollIndexTop += 1;\n      self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n    }\n\n    while (self.scrollPixelLeft < self.scrollBox.scrollLeft + 1 && self.scrollIndexLeft < s.length) {\n      self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n      self.scrollIndexLeft += 1;\n    }\n\n    if (s.length > 0) {\n      self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n      self.scrollPixelLeft -= self.getColumnWidth(self.orders.columns[self.scrollIndexLeft]);\n    }\n\n    if ((self.viewData || []).length > 0) {\n      self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n      self.scrollPixelTop = Math.max(self.scrollPixelTop - (self.viewData[self.scrollIndexTop] ? (self.sizes.rows[self.scrollIndexTop] || ch) + (self.sizes.trees[self.scrollIndexTop] || 0) : ch) * self.scale, 0);\n    }\n\n    self.ellipsisCache = {};\n\n    if (!dontDraw) {\n      self.draw(true);\n    } //TODO: figure out why this has to be delayed for child grids\n    //BUG: wheeling event on 3rd level hierarchy fails to move input box\n\n\n    requestAnimationFrame(self.resizeEditInput);\n    self.dispatchEvent('scroll', {\n      top: self.scrollBox.scrollTop,\n      left: self.scrollBox.scrollLeft\n    });\n  };\n\n  self.mousemove = function (e, overridePos) {\n    if (self.contextMenu || self.input) {\n      return;\n    }\n\n    self.mouse = overridePos || self.getLayerPos(e);\n    var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode) && !self.attributes.singleSelectionMode,\n        i,\n        s = self.getSchema(),\n        dragBounds,\n        sBounds,\n        x = self.mouse.x,\n        y = self.mouse.y,\n        cell = self.getCellAt(x, y),\n        delta,\n        ev = {\n      NativeEvent: e,\n      cell: cell,\n      x: x,\n      y: y\n    },\n        previousCell = self.currentCell;\n    clearTimeout(self.scrollTimer);\n\n    if (!self.isInGrid({\n      x: x,\n      y: y\n    })) {\n      self.hasFocus = false;\n    }\n\n    if (self.dispatchEvent('mousemove', ev)) {\n      return;\n    }\n\n    if (cell && self.currentCell) {\n      self.rowBoundaryCrossed = self.currentCell.rowIndex !== cell.rowIndex;\n      self.columnBoundaryCrossed = self.currentCell.columnIndex !== cell.columnIndex;\n      self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n      ['row', 'column', 'cell'].forEach(function (prefix) {\n        if (self[prefix + 'BoundaryCrossed']) {\n          ev.cell = previousCell;\n          self.dispatchEvent(prefix + 'mouseout', ev);\n          ev.cell = cell;\n          self.dispatchEvent(prefix + 'mouseover', ev);\n        }\n      });\n    }\n\n    self.currentCell = cell;\n\n    if (!self.hasFocus) {\n      return;\n    }\n\n    self.hovers = {};\n\n    if (!self.draggingItem && cell && self.scrollModes.indexOf(cell.context) === -1) {\n      self.dragItem = cell;\n      self.dragMode = cell.dragContext;\n      self.cursor = cell.context;\n\n      if (cell.context === 'cell') {\n        self.cursor = 'default';\n        self.hovers = {\n          rowIndex: cell.rowIndex,\n          columnIndex: cell.columnIndex\n        };\n      }\n\n      if ((self.selecting || self.reorderObject) && cell.context === 'cell') {\n        delta = {\n          x: Math.abs(self.dragStart.x - x),\n          y: Math.abs(self.dragStart.y - y)\n        };\n\n        if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n          self.dragStartObject = {\n            rowIndex: self.activeCell.rowIndex,\n            columnIndex: self.activeCell.columnIndex\n          };\n        }\n\n        dragBounds = {\n          top: Math.min(self.dragStartObject.rowIndex, cell.rowIndex),\n          left: Math.min(self.dragStartObject.columnIndex, cell.columnIndex),\n          bottom: Math.max(self.dragStartObject.rowIndex, cell.rowIndex),\n          right: Math.max(self.dragStartObject.columnIndex, cell.columnIndex)\n        };\n\n        if (self.dragStartObject.columnIndex === -1) {\n          sBounds = self.getSelectionBounds();\n          dragBounds.left = -1;\n          dragBounds.right = s.length - 1;\n          dragBounds.top = Math.min(sBounds.top, cell.rowIndex);\n          dragBounds.bottom = Math.max(sBounds.bottom, cell.rowIndex);\n        }\n\n        if (self.dragStartObject.rowIndex !== cell.rowIndex || self.dragStartObject.columnIndex !== cell.columnIndex) {\n          self.ignoreNextClick = true;\n        }\n\n        if (self.cellBoundaryCrossed || delta.x === 0 && delta.y === 0 || self.attributes.selectionMode === 'row') {\n          if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1) && self.rowBoundaryCrossed) {\n            self.selectRow(cell.rowIndex, ctrl, null, true);\n          } else if (self.attributes.selectionMode !== 'row') {\n            if (!self.dragAddToSelection && cell.rowIndex !== undefined) {\n              if (self.selections[cell.rowIndex] && self.selections[cell.rowIndex].indexOf(cell.columnIndex) !== -1) {\n                self.selections[cell.rowIndex].splice(self.selections[cell.rowIndex].indexOf(cell.columnIndex), 1);\n              }\n            } else {\n              self.selections[cell.rowIndex] = self.selections[cell.rowIndex] || [];\n\n              if (self.selections[cell.rowIndex].indexOf(cell.columnIndex) === -1) {\n                self.selections[cell.rowIndex].push(cell.columnIndex);\n                var event = {\n                  selections: self.selections,\n                  selectedData: self.getSelectedData(),\n                  selectionBounds: self.getSelectionBounds()\n                };\n                self.dispatchEvent('selectionchanged', event);\n              }\n            }\n          }\n        }\n\n        if ((!self.selectionBounds || dragBounds.top !== self.selectionBounds.top || dragBounds.left !== self.selectionBounds.left || dragBounds.bottom !== self.selectionBounds.bottom || dragBounds.right !== self.selectionBounds.right) && !ctrl) {\n          self.selections = [];\n          sBounds = dragBounds;\n\n          if (self.attributes.selectionMode === 'row') {\n            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n              self.selectRow(i, true, null, true);\n            }\n          } else if (dragBounds.top !== -1) {\n            self.selectArea(sBounds, true);\n          }\n        }\n\n        self.autoScrollZone(e, x, y, ctrl);\n      }\n    }\n\n    self.cellBoundaryCrossed = false;\n    self.rowBoundaryCrossed = false;\n    self.columnBoundaryCrossed = false;\n    self.draw(true);\n  };\n\n  self.click = function (e, overridePos) {\n    var i,\n        startingBounds = JSON.stringify(self.getSelectionBounds()),\n        ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode) && !self.attributes.singleSelectionMode,\n        pos = overridePos || self.getLayerPos(e);\n    self.currentCell = self.getCellAt(pos.x, pos.y);\n\n    if (self.currentCell.grid !== undefined) {\n      return;\n    }\n\n    function checkSelectionChange() {\n      var ev,\n          sb = self.getSelectionBounds();\n\n      if (startingBounds === JSON.stringify(sb)) {\n        return;\n      }\n\n      ev = {\n        selections: self.selections,\n        selectionBounds: self.getSelectionBounds()\n      };\n      Object.defineProperty(ev, 'selectedData', {\n        get: function get() {\n          return self.getSelectedData();\n        }\n      });\n      self.dispatchEvent('selectionchanged', ev);\n    }\n\n    if (self.input) {\n      self.endEdit();\n    }\n\n    if (self.ignoreNextClick) {\n      self.ignoreNextClick = false;\n      return;\n    }\n\n    i = self.currentCell;\n\n    if (self.dispatchEvent('click', {\n      NativeEvent: e,\n      cell: self.currentCell\n    })) {\n      return;\n    }\n\n    if (!self.hasFocus) {\n      return;\n    }\n\n    if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n      self.setActiveCell(i.columnIndex, i.rowIndex);\n    }\n\n    if (self.currentCell.context === 'cell') {\n      if (self.currentCell.style === 'cornerCell') {\n        self.selectAll();\n        self.draw();\n        checkSelectionChange();\n        return;\n      }\n\n      if (self.currentCell.style === 'columnHeaderCell') {\n        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n          if (self.orderBy === i.header.name) {\n            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n          } else {\n            self.orderDirection = 'asc';\n          }\n\n          self.order(i.header.name, self.orderDirection);\n          checkSelectionChange();\n          return;\n        }\n\n        if (self.attributes.columnHeaderClickBehavior === 'select') {\n          self.selectColumn(i.header.index, ctrl, e.shiftKey);\n          self.draw();\n          return;\n        }\n      }\n\n      self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n\n      if (self.attributes.selectionMode === 'row' || self.currentCell.style === 'rowHeaderCell') {\n        if (self.currentCell.style === 'rowHeaderCell' && self.attributes.tree && pos.x > 0 && pos.x - self.currentCell.x < self.style.treeArrowWidth + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius && pos.y - self.currentCell.y < self.style.treeArrowHeight + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius && pos.y > 0) {\n          self.toggleTree(i.rowIndex);\n          return;\n        }\n      }\n\n      if (e.shiftKey && !ctrl) {\n        self.selectionBounds = self.getSelectionBounds();\n        self.selectArea(undefined, false);\n      }\n    }\n\n    checkSelectionChange();\n    self.draw(true);\n  };\n\n  self.dragResizeColumn = function (e) {\n    var pos, x, y;\n    pos = self.getLayerPos(e);\n    x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n    y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n\n    if (x < self.style.minColumnWidth) {\n      x = self.style.minColumnWidth;\n    }\n\n    if (y < self.style.minRowHeight) {\n      y = self.style.minRowHeight;\n    }\n\n    if (self.dispatchEvent('resizecolumn', {\n      x: x,\n      y: y,\n      draggingItem: self.draggingItem\n    })) {\n      return false;\n    }\n\n    if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone && self.dragMode === 'ew-resize') {\n      self.resize(true);\n      self.scrollBox.scrollLeft += x;\n    }\n\n    if (self.dragMode === 'ew-resize') {\n      self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell' ? 'cornerCell' : self.draggingItem.sortColumnIndex] = x;\n\n      if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n        self.resize(true);\n      }\n\n      self.resizeChildGrids();\n      return;\n    }\n\n    if (self.dragMode === 'ns-resize') {\n      if (self.draggingItem.rowOpen) {\n        self.sizes.trees[self.draggingItem.rowIndex] = y;\n      } else if (self.attributes.globalRowResize) {\n        self.style.cellHeight = y;\n      } else {\n        self.sizes.rows[self.draggingItem.rowIndex] = y;\n      }\n\n      self.dispatchEvent('resizerow', {\n        row: y\n      });\n      self.resizeChildGrids();\n      return;\n    }\n\n    self.ellipsisCache = {};\n  };\n\n  self.stopDragResize = function () {\n    self.resize();\n    document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n    document.body.removeEventListener('mouseup', self.stopDragResize, false);\n    self.setStorageData();\n    self.draw(true);\n    self.ignoreNextClick = true;\n  };\n\n  self.scrollGrid = function (e) {\n    var pos = self.getLayerPos(e);\n\n    if (self.attributes.scrollPointerLock && self.pointerLockPosition && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n      self.pointerLockPosition.x += e.movementX;\n      self.pointerLockPosition.y += e.movementY;\n      self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n      self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n      pos = self.pointerLockPosition;\n    }\n\n    self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n\n    if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n      self.scrollStartMode = 'horizontal-scroll-box';\n      self.dragStart = pos;\n      self.scrollStart.left = self.scrollBox.scrollLeft;\n      clearTimeout(self.scrollTimer);\n      return;\n    }\n\n    if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n      self.scrollStartMode = 'vertical-scroll-box';\n      self.dragStart = pos;\n      self.scrollStart.top = self.scrollBox.scrollTop;\n      clearTimeout(self.scrollTimer);\n      return;\n    }\n\n    if (self.scrollStartMode === 'vertical-scroll-box' && self.scrollMode !== 'vertical-scroll-box') {\n      self.scrollMode = 'vertical-scroll-box';\n    }\n\n    if (self.scrollStartMode === 'horizontal-scroll-box' && self.scrollMode !== 'horizontal-scroll-box') {\n      self.scrollMode = 'horizontal-scroll-box';\n    }\n\n    clearTimeout(self.scrollTimer);\n\n    if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n      return;\n    }\n\n    if (self.scrollMode === 'vertical-scroll-box') {\n      self.scrollBox.scrollTop = self.scrollStart.top + (pos.y - self.dragStart.y) / self.scrollBox.heightBoxRatio;\n    } else if (self.scrollMode === 'vertical-scroll-top') {\n      self.scrollBox.scrollTop -= self.page * self.style.cellHeight;\n      self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n    } else if (self.scrollMode === 'vertical-scroll-bottom') {\n      self.scrollBox.scrollTop += self.page * self.style.cellHeight;\n      self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n    }\n\n    if (self.scrollMode === 'horizontal-scroll-box') {\n      self.scrollBox.scrollLeft = self.scrollStart.left + (pos.x - self.dragStart.x) / self.scrollBox.widthBoxRatio;\n    } else if (self.scrollMode === 'horizontal-scroll-right') {\n      self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n      self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n    } else if (self.scrollMode === 'horizontal-scroll-left') {\n      self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n      self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n    }\n  };\n\n  self.stopScrollGrid = function () {\n    clearTimeout(self.scrollTimer);\n\n    if (document.exitPointerLock) {\n      document.exitPointerLock();\n    }\n\n    document.removeEventListener('mousemove', self.scrollGrid, false);\n  };\n\n  self.dragReorder = function (e) {\n    var pos,\n        x,\n        y,\n        columReorder = self.dragMode === 'column-reorder',\n        rowReorder = self.dragMode === 'row-reorder';\n    pos = self.getLayerPos(e);\n    x = pos.x - self.dragStart.x;\n    y = pos.y - self.dragStart.y;\n\n    if (!self.attributes.allowColumnReordering && columReorder) {\n      return;\n    }\n\n    if (!self.attributes.allowRowReordering && rowReorder) {\n      return;\n    }\n\n    if (self.dispatchEvent('reordering', {\n      NativeEvent: e,\n      source: self.dragStartObject,\n      target: self.currentCell,\n      dragMode: self.dragMode\n    })) {\n      return;\n    }\n\n    if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n      self.reorderObject = self.draggingItem;\n      self.reorderTarget = self.currentCell;\n      self.reorderObject.dragOffset = {\n        x: x,\n        y: y\n      };\n      self.autoScrollZone(e, columReorder ? pos.x : -1, rowReorder ? pos.y : -1, false);\n    }\n  };\n\n  self.stopDragReorder = function (e) {\n    var oIndex,\n        tIndex,\n        cr = {\n      'row-reorder': self.orders.rows,\n      'column-reorder': self.orders.columns\n    },\n        i = {\n      'row-reorder': 'rowIndex',\n      'column-reorder': 'sortColumnIndex'\n    }[self.dragMode];\n    document.body.removeEventListener('mousemove', self.dragReorder, false);\n    document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n\n    if (self.reorderObject && self.reorderTarget && (self.dragMode === 'column-reorder' && self.reorderTarget.sortColumnIndex > -1 && self.reorderTarget.sortColumnIndex < self.getSchema().length || self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1 && self.reorderTarget.rowIndex < self.viewData.length) && self.reorderObject[i] !== self.reorderTarget[i] && !self.dispatchEvent('reorder', {\n      NativeEvent: e,\n      source: self.reorderObject,\n      target: self.reorderTarget,\n      dragMode: self.dragMode\n    })) {\n      self.ignoreNextClick = true;\n      oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n      tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n      cr[self.dragMode].splice(oIndex, 1);\n      cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n\n      if (self.dragMode === 'column-reorder') {\n        self.orders.columns = cr[self.dragMode];\n      } else {\n        self.orders.rows = cr[self.dragMode];\n      }\n\n      self.resize();\n      self.setStorageData();\n    }\n\n    self.reorderObject = undefined;\n    self.reorderTarget = undefined;\n    self.draw(true);\n  };\n\n  self.dragMove = function (e) {\n    if (self.dispatchEvent('moving', {\n      NativeEvent: e,\n      cell: self.currentCell\n    })) {\n      return;\n    }\n\n    var pos = self.getLayerPos(e);\n    self.moveOffset = {\n      x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n      y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n    };\n\n    if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n      setTimeout(function () {\n        self.autoScrollZone(e, pos.x, pos.y, false);\n      }, 1);\n    }\n  };\n\n  self.stopDragMove = function (e) {\n    document.body.removeEventListener('mousemove', self.dragMove, false);\n    document.body.removeEventListener('mouseup', self.stopDragMove, false);\n    var b = self.getSelectionBounds();\n\n    if (self.dispatchEvent('endmove', {\n      NativeEvent: e,\n      cell: self.currentCell\n    })) {\n      self.movingSelection = undefined;\n      self.moveOffset = undefined;\n      self.draw(true);\n      return;\n    }\n\n    if (self.moveOffset) {\n      self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n      self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n    }\n\n    self.movingSelection = undefined;\n    self.moveOffset = undefined;\n    self.draw(true);\n  };\n\n  self.freezeMove = function (e) {\n    if (self.dispatchEvent('freezemoving', {\n      NativeEvent: e,\n      cell: self.currentCell\n    })) {\n      return;\n    }\n\n    var pos = self.getLayerPos(e);\n    self.ignoreNextClick = true;\n    self.freezeMarkerPosition = pos;\n\n    if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n      self.scrollBox.scrollTop = 0;\n      self.frozenRow = self.currentCell.rowIndex + 1;\n    }\n\n    if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n      self.scrollBox.scrollLeft = 0;\n      self.frozenColumn = self.currentCell.columnIndex + 1;\n    }\n\n    if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n      setTimeout(function () {\n        self.autoScrollZone(e, pos.x, pos.y, false);\n      }, 1);\n    }\n  };\n\n  self.stopFreezeMove = function (e) {\n    document.body.removeEventListener('mousemove', self.freezeMove, false);\n    document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n    self.freezeMarkerPosition = undefined;\n\n    if (self.dispatchEvent('endfreezemove', {\n      NativeEvent: e,\n      cell: self.currentCell\n    })) {\n      self.frozenRow = self.startFreezeMove.x;\n      self.frozenColumn = self.startFreezeMove.y;\n      self.draw(true);\n      return;\n    }\n\n    self.draw(true);\n  };\n\n  self.mousedown = function (e, overridePos) {\n    self.lastMouseDownTarget = e.target;\n\n    if (self.dispatchEvent('mousedown', {\n      NativeEvent: e,\n      cell: self.currentCell\n    })) {\n      return;\n    }\n\n    if (!self.hasFocus) {\n      return;\n    }\n\n    if (e.button === 2 || self.input) {\n      return;\n    }\n\n    var ctrl = e.ctrlKey || e.metaKey,\n        move = /-move/.test(self.dragMode),\n        freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n        resize = /-resize/.test(self.dragMode);\n    self.dragStart = overridePos || self.getLayerPos(e);\n    self.scrollStart = {\n      left: self.scrollBox.scrollLeft,\n      top: self.scrollBox.scrollTop\n    };\n    self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n    self.dragAddToSelection = !self.dragStartObject.selected;\n\n    if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/.test(self.dragStartObject.context) && self.currentCell && !self.currentCell.isColumnHeader && !move && !freeze && !resize) {\n      self.selections = [];\n    }\n\n    if (self.dragStartObject.isGrid) {\n      return;\n    }\n\n    if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n      self.scrollMode = self.dragStartObject.context;\n      self.scrollStartMode = self.dragStartObject.context;\n      self.scrollGrid(e);\n\n      if (self.attributes.scrollPointerLock && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n        self.pointerLockPosition = {\n          x: self.dragStart.x,\n          y: self.dragStart.y\n        };\n        self.canvas.requestPointerLock();\n      }\n\n      document.addEventListener('mousemove', self.scrollGrid, false);\n      document.addEventListener('mouseup', self.stopScrollGrid, false);\n      self.ignoreNextClick = true;\n      return;\n    }\n\n    if (self.dragMode === 'cell') {\n      self.selecting = true;\n\n      if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1) && self.dragStartObject.rowIndex > -1) {\n        self.selectRow(self.dragStartObject.rowIndex, ctrl, null);\n      } else if (self.attributes.selectionMode !== 'row') {\n        self.mousemove(e);\n      }\n\n      return;\n    }\n\n    if (move) {\n      self.draggingItem = self.dragItem;\n      self.movingSelection = self.selections.concat([]);\n      self.dragging = self.dragStartObject;\n\n      if (self.dispatchEvent('beginmove', {\n        NativeEvent: e,\n        cell: self.currentCell\n      })) {\n        return;\n      }\n\n      document.body.addEventListener('mousemove', self.dragMove, false);\n      document.body.addEventListener('mouseup', self.stopDragMove, false);\n      return self.mousemove(e);\n    }\n\n    if (freeze) {\n      self.draggingItem = self.dragItem;\n      self.startFreezeMove = {\n        x: self.frozenRow,\n        y: self.frozenColumn\n      };\n\n      if (self.dispatchEvent('beginfreezemove', {\n        NativeEvent: e\n      })) {\n        return;\n      }\n\n      document.body.addEventListener('mousemove', self.freezeMove, false);\n      document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n      return self.mousemove(e);\n    }\n\n    if (resize) {\n      self.draggingItem = self.dragItem;\n\n      if (self.draggingItem.rowOpen) {\n        self.resizingStartingHeight = self.sizes.trees[self.draggingItem.rowIndex];\n      } else {\n        self.resizingStartingHeight = self.sizes.rows[self.draggingItem.rowIndex] || self.style.cellHeight;\n      }\n\n      self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell' ? 'cornerCell' : self.draggingItem.sortColumnIndex] || self.draggingItem.width;\n      document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n      document.body.addEventListener('mouseup', self.stopDragResize, false);\n      return;\n    }\n\n    if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n      self.draggingItem = self.dragStartObject;\n      document.body.addEventListener('mousemove', self.dragReorder, false);\n      document.body.addEventListener('mouseup', self.stopDragReorder, false);\n      return;\n    }\n  };\n\n  self.mouseup = function (e) {\n    clearTimeout(self.scrollTimer);\n    self.cellBoundaryCrossed = true;\n    self.rowBoundaryCrossed = true;\n    self.columnBoundaryCrossed = true;\n    self.selecting = undefined;\n    self.draggingItem = undefined;\n    self.dragStartObject = undefined;\n\n    if (self.dispatchEvent('mouseup', {\n      NativeEvent: e,\n      cell: self.currentCell\n    })) {\n      return;\n    }\n\n    if (!self.hasFocus && e.target !== self.canvas) {\n      return;\n    }\n\n    if (self.currentCell && self.currentCell.grid !== undefined) {\n      return;\n    }\n\n    if (self.contextMenu || self.input) {\n      return;\n    }\n\n    if (self.dragStart && self.isInGrid(self.dragStart)) {\n      self.controlInput.focus();\n    }\n\n    e.preventDefault();\n  }; // gets the horizontal adjacent cells as well as first/last based on column visibility\n\n\n  self.getAdjacentCells = function () {\n    var x,\n        i,\n        s = self.getSchema(),\n        o = {};\n\n    for (x = 0; x < s.length; x += 1) {\n      i = self.orders.columns[x];\n\n      if (!s[i].hidden) {\n        if (o.first === undefined) {\n          o.first = x;\n          o.left = x;\n        }\n\n        o.last = x;\n\n        if (x > self.activeCell.columnIndex && o.right === undefined) {\n          o.right = x;\n        }\n\n        if (x < self.activeCell.columnIndex) {\n          o.left = x;\n        }\n      }\n    }\n\n    if (o.right === undefined) {\n      o.right = o.last;\n    }\n\n    return o;\n  };\n\n  self.keydown = function (e) {\n    var i,\n        ev,\n        adjacentCells = self.getAdjacentCells(),\n        x = self.activeCell.columnIndex,\n        y = self.activeCell.rowIndex,\n        ctrl = e.ctrlKey || e.metaKey,\n        last = self.viewData.length - 1,\n        s = self.getSchema(),\n        cols = s.length - 1;\n    var defaultPrevented = self.dispatchEvent('keydown', {\n      NativeEvent: e,\n      cell: self.currentCell,\n      obj: self\n    });\n\n    if (defaultPrevented) {\n      return;\n    }\n\n    if (!self.hasFocus) {\n      return;\n    } // If a user starts typing content, switch to \"Enter\" mode\n\n\n    if (is_printable_key_event__WEBPACK_IMPORTED_MODULE_0___default()(e) && !ctrl) {\n      return self.beginEditAt(x, y, e, true);\n    }\n\n    if (self.attributes.showNewRow) {\n      last += 1;\n    }\n\n    if (e.key === 'Tab') {\n      e.preventDefault();\n    }\n\n    if (e.key === 'Escape') {\n      self.selectNone();\n    } else if (ctrl && e.key === 'a') {\n      self.selectAll();\n    } else if (e.key === 'ArrowDown') {\n      y += 1;\n    } else if (e.key === 'ArrowUp') {\n      y -= 1;\n    } else if (e.key === 'ArrowLeft' && !ctrl || e.shiftKey && e.key === 'Tab') {\n      x = adjacentCells.left;\n    } else if (e.key === 'ArrowRight' && !ctrl || !e.shiftKey && e.key === 'Tab') {\n      x = adjacentCells.right;\n    } else if (e.key === 'PageUp') {\n      y -= self.page;\n      e.preventDefault();\n    } else if (e.key === 'PageDown') {\n      y += self.page;\n      e.preventDefault();\n    } else if (e.key === 'Home' || ctrl && e.key === 'ArrowUp') {\n      y = 0;\n    } else if (e.key === 'End' || ctrl && e.key === 'ArrowDown') {\n      y = self.viewData.length - 1;\n    } else if (ctrl && e.key === 'ArrowRight') {\n      x = adjacentCells.last;\n    } else if (ctrl && e.key === 'ArrowLeft') {\n      x = adjacentCells.first;\n    }\n\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      return self.beginEditAt(x, y, e);\n    }\n\n    if (x < 0 || Number.isNaN(x)) {\n      x = adjacentCells.first;\n    }\n\n    if (y > last) {\n      y = last;\n    }\n\n    if (y < 0 || Number.isNaN(y)) {\n      y = 0;\n    }\n\n    if (x > cols) {\n      x = adjacentCells.last;\n    } // TODO - most likely some column order related bugs in key based selection\n    // Arrows\n\n\n    var isArrowKey = ['ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown'].includes(e.key);\n\n    if (e.shiftKey && isArrowKey) {\n      self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n      self.selections[Math.max(y, 0)].push(x);\n      self.selectionBounds = self.getSelectionBounds();\n      self.selectArea(undefined, ctrl);\n      self.draw(true);\n    }\n\n    if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n      self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex && !Number.isNaN(y) ? y : undefined);\n      self.setActiveCell(x, y);\n\n      if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n        if (!ctrl) {\n          self.selections = [];\n        }\n\n        self.selections[y] = self.selections[y] || [];\n        self.selections[y].push(x);\n        ev = {\n          selectedData: self.getSelectedData(),\n          selections: self.selections,\n          selectionBounds: self.getSelectionBounds()\n        };\n        Object.defineProperty(ev, 'selectedData', {\n          get: function get() {\n            return self.getSelectedData();\n          }\n        });\n        self.dispatchEvent('selectionchanged', ev);\n      }\n\n      self.draw(true);\n    }\n  };\n\n  self.keyup = function (e) {\n    if (self.dispatchEvent('keyup', {\n      NativeEvent: e,\n      cell: self.currentCell\n    })) {\n      return;\n    }\n\n    if (!self.hasFocus) {\n      return;\n    }\n  };\n\n  self.keypress = function (e) {\n    if (!self.hasFocus) {\n      return;\n    }\n\n    if (self.dispatchEvent('keypress', {\n      NativeEvent: e,\n      cell: self.currentCell\n    })) {\n      return;\n    }\n  };\n\n  self.dblclick = function (e) {\n    if (self.dispatchEvent('dblclick', {\n      NativeEvent: e,\n      cell: self.currentCell\n    })) {\n      return;\n    }\n\n    if (!self.hasFocus) {\n      return;\n    }\n\n    if (self.currentCell.context === 'ew-resize' && self.currentCell.style === 'columnHeaderCell') {\n      self.fitColumnToValues(self.currentCell.header.name);\n    } else if (self.currentCell.context === 'ew-resize' && self.currentCell.style === 'cornerCell') {\n      self.autosize();\n    } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n      self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n    }\n  };\n\n  self.scrollWheel = function (e) {\n    var l,\n        t,\n        ev = e,\n        deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n        deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n        deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n    var e = e.NativeEvent || e;\n\n    if (wheeling) {\n      ev.preventDefault(e);\n      return;\n    }\n\n    if (self.dispatchEvent('wheel', {\n      NativeEvent: e\n    })) {\n      return;\n    }\n\n    self.touchHaltAnimation = true;\n    l = self.scrollBox.scrollLeft;\n    t = self.scrollBox.scrollTop;\n\n    if (self.hasFocus) {\n      //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n      //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n      if (deltaMode === 1) {\n        // line mode = 17 pixels per line\n        deltaY = deltaY * 17;\n      }\n\n      if (self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0 || self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0 || self.scrollBox.scrollTop > 0 && deltaY < 0 || self.scrollBox.scrollLeft > 0 && deltaX < 0) {\n        ev.preventDefault(e);\n      }\n\n      wheeling = setTimeout(function () {\n        wheeling = undefined;\n        self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n      }, 1);\n    }\n  };\n\n  self.pasteData = function (pasteValue, mimeType, startRowIndex, startColIndex) {\n    var schema = self.getVisibleSchema();\n\n    var isSupportedHtmlTable = function isSupportedHtmlTable(htmlString) {\n      return /(?:^(<meta[^>]+>)?<table>)|(?:<!--StartFragment-->\\s*<table>)/.test(htmlString);\n    }; // TODO: support pasting tables from Excel\n\n\n    if (mimeType === 'text/html' && isSupportedHtmlTable(pasteValue) === false) {\n      console.warn('Unrecognized HTML format. HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.');\n      console.warn('Data with the mime type text/html not in this format will not be imported as row data.');\n      return;\n    }\n\n    function parseData(data, mimeType) {\n      // TODO: use DOMParser\n      if (mimeType === 'text/html') {\n        // strip table beginning and ending off, then split at rows\n        var cleanedHtmlData = data.substring(data.indexOf('<table><tr>') + 11, data.indexOf('</tr></table>')).split('</tr><tr>').filter( // ditch any headers on the table\n        function (row) {\n          return !/^<th>|^<thead>/.test(row);\n        }).map( // split row into individual cells\n        function (row) {\n          return row.replace('<td></td>', '<td> </td>') //TODO: may be another way\n          .match(/<td>[^<]+/g).map(function (match) {\n            return match.replace(/^<td>/, '');\n          });\n        });\n        return cleanedHtmlData;\n      } // Default data format is string, so split on new line,\n      // and then enclose in an array (a row with one cell):\n\n\n      return data.split('\\n').map(function (value) {\n        return [value];\n      });\n    }\n\n    var rows = parseData(pasteValue, mimeType); // Special case: if rows.length = 1, we paste this value in each\n    // selected cell. This mimics Excel's paste functionality, and works\n    // as a poor-man's fill-down.\n\n    var editedCells = [];\n\n    if (rows.length === 1) {\n      var cellData = rows[0][0];\n      self.forEachSelectedCell(function (data, rowIndex, colName) {\n        if (data[rowIndex][colName] != null && _typeof(data[rowIndex][colName]) == 'object') {\n          if (self.dispatchEvent('beforebeginedit', {\n            cell: {\n              value: data[rowIndex][colName]\n            },\n            NativeEvent: {}\n          })) {//   return false;\n          } else {\n            data[rowIndex][colName].text = cellData;\n            editedCells.push(data[rowIndex][colName]);\n          }\n        }\n      });\n    } else {\n      var selections = [];\n\n      for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n        // Rows may have been moved by user, so get the actual row index\n        // (instead of the row index at which the row is rendered):\n        var realRowIndex = self.orders.rows[startRowIndex + rowIndex];\n        var cells = rows[rowIndex];\n        var existingRowData = self.viewData[realRowIndex];\n        var newRowData = Object.assign({}, existingRowData);\n        selections[realRowIndex] = [];\n\n        for (var colIndex = 0; colIndex < cells.length; colIndex++) {\n          var column = schema[startColIndex + colIndex];\n\n          if (!column) {\n            console.warn('Paste data exceeded grid bounds. Skipping.');\n            continue;\n          }\n\n          var columnName = column.name;\n          var cellData = cells[colIndex];\n\n          if (cellData === undefined || cellData === null) {\n            newRowData[columnName] = existingRowData[columnName]; //TODO: compare text\n\n            continue;\n          }\n\n          if (newRowData[columnName] != null && _typeof(newRowData[columnName]) == 'object') {\n            if (self.dispatchEvent('beforebeginedit', {\n              cell: {\n                value: newRowData[columnName]\n              },\n              NativeEvent: {}\n            })) {//   return false;\n            } else {\n              selections[realRowIndex].push(startColIndex + colIndex);\n              newRowData[columnName].text = cellData;\n              editedCells.push(newRowData[columnName]);\n            }\n          }\n        }\n\n        self.originalData[realRowIndex] = newRowData;\n      }\n\n      self.selections = selections;\n    } // selections is a sparse array, so we condense:\n\n\n    var affectedCells = [];\n    self.selections.forEach(function (row, rowIndex) {\n      if (rowIndex === undefined) return;\n      row.forEach(function (columnIndex) {\n        affectedCells.push([rowIndex, columnIndex]);\n      });\n    });\n    self.dispatchEvent('afterpaste', {\n      cells: affectedCells,\n      editedCells: editedCells,\n      itself: self\n    }); // Because originalData has been updated, we must refresh\n    // viewData to ensure the new cell values are rendered\n\n    self.refresh();\n    return rows.length;\n  };\n\n  self.getNextVisibleColumnIndex = function (visibleColumnIndex) {\n    var x,\n        s = self.getVisibleSchema();\n\n    for (x = 0; x < s.length; x += 1) {\n      if (s[x].columnIndex === visibleColumnIndex) {\n        return s[x + 1].columnIndex;\n      }\n    }\n\n    return -1;\n  };\n\n  self.getVisibleColumnIndexOf = function (columnIndex) {\n    var x,\n        s = self.getVisibleSchema();\n\n    for (x = 0; x < s.length; x += 1) {\n      if (s[x].columnIndex === columnIndex) {\n        return x;\n      }\n    }\n\n    return -1;\n  };\n\n  self.paste = function (event) {\n    if (!self.attributes.editable) {\n      return;\n    }\n\n    var defaultPrevented = self.dispatchEvent('beforepaste', {\n      NativeEvent: event\n    });\n\n    if (defaultPrevented) {\n      return;\n    }\n\n    var clipboardItems = new Map(Array.from(event.clipboardData.items).map(function (item) {\n      return [item.type, item];\n    })); // Supported MIME types, in order of preference:\n\n    var supportedMimeTypes = ['text/html', 'text/csv', 'text/plain']; // The clipboard will often contain the same data in multiple formats,\n    // which can be used depending on the context in which it's pasted. Here\n    // we'll prefere more structured (HTML/CSV) over less structured, when\n    // available, so we try to find those first:\n\n    var pasteableItems = supportedMimeTypes.map(function (mimeType) {\n      return clipboardItems.get(mimeType);\n    }).filter(function (item) {\n      return !!item;\n    }); // filter out not-found MIME types (= undefined)\n\n    if (pasteableItems.length === 0) {\n      console.warn('Cannot find supported clipboard data type. Supported types are:', supportedMimeTypes.join(', '));\n      return;\n    }\n\n    var itemToPaste = pasteableItems[0]; // itemToPaste is cleared once accessed (getData or getAsString),\n    // so we need to store the type here, before reading its value:\n\n    var pasteType = itemToPaste.type;\n    itemToPaste.getAsString(function (pasteValue) {\n      self.pasteData(pasteValue, pasteType, self.activeCell.rowIndex, self.getVisibleColumnIndexOf(self.activeCell.columnIndex));\n      self.draw();\n    });\n  };\n\n  self.cut = function (e) {\n    self.copy(e);\n    self.forEachSelectedCell(function (data, index, colName) {\n      data[index][colName] = '';\n    });\n  };\n\n  self.copy = function (e) {\n    if (self.dispatchEvent('copy', {\n      NativeEvent: e\n    })) {\n      return;\n    }\n\n    if (!self.hasFocus || !e.clipboardData) {\n      return;\n    }\n\n    var t,\n        d,\n        tableRows = [],\n        textRows = [],\n        outputHeaders = {},\n        outputHeaderKeys,\n        sData = self.getSelectedData(),\n        s = self.getSchema();\n\n    function htmlSafe(v) {\n      return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n    }\n\n    function fCopyCell(v) {\n      v = v === null || v === undefined ? '' : v;\n      return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n    }\n\n    function addHeaders(headers, useHtml) {\n      if (!s.length || headers.length < 2) {\n        return '';\n      }\n\n      var h = [];\n\n      if (useHtml) {\n        h.push('<tr>');\n      }\n\n      s.forEach(function (column, columnIndex) {\n        // intentional redefinition of column\n        column = s[self.orders.columns[columnIndex]];\n\n        if (!column.hidden && headers.indexOf(column.name) !== -1) {\n          var ev = {\n            NativeEvent: e,\n            column: column\n          };\n\n          if (self.dispatchEvent('copyonschema', ev)) {\n            column = ev.column;\n          }\n\n          var hVal = column.name || column.title || '';\n\n          if (useHtml) {\n            h.push('<th>' + htmlSafe(hVal) + '</th>');\n          } else {\n            h.push('\"' + hVal.replace(/\"/g, '\"\"') + '\"');\n          }\n        }\n      });\n      h.push(useHtml ? '</tr>' : '\\n');\n      return h.join(useHtml ? '' : ',');\n    }\n\n    function addCellValue(val, trRow, textRow, column) {\n      // escape strings\n      if (val) {\n        if (_typeof(val) == 'object') {\n          val = val.text;\n        }\n      }\n\n      if (val !== null && val !== false && val !== undefined && val.replace) {\n        trRow.push(fCopyCell(val));\n        textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n        return;\n      }\n\n      if (val !== undefined) {\n        textRow.push(val);\n        trRow.push(fCopyCell(val));\n        return;\n      } // issue #66\n\n\n      textRow.push('');\n      trRow.push('<td>&nbsp;</td>');\n    }\n\n    if (sData.length > 0) {\n      sData.forEach(function (row) {\n        var rowKeys = Object.keys(row); //!!!\n        //if ((typeof row[rowKeys])=='object'){\n        //}\n\n        if (row) {\n          var trRow = [],\n              textRow = [],\n              sSorted = []; // HACK: https://github.com/TonyGermaneri/canvas-datagrid/issues/181\n          // I can't use sort here or O(1), so hacks\n\n          s.forEach(function (column, columnIndex) {\n            sSorted.push(s[self.orders.columns[columnIndex]]);\n          });\n          sSorted.forEach(function (column, columnIndex) {\n            if (rowKeys.indexOf(column.name) !== -1) {\n              outputHeaders[column.name] = true; // escape strings\n\n              addCellValue(row[column.name], trRow, textRow, column);\n            }\n          });\n          tableRows.push(trRow.join(''));\n          textRows.push(textRow.join(','));\n        }\n      });\n      outputHeaderKeys = Object.keys(outputHeaders);\n      t = addHeaders(outputHeaderKeys) + textRows.join('\\n');\n      d = '<table>' + addHeaders(outputHeaderKeys, true) + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n\n      if (outputHeaderKeys.length === 1) {\n        // if there was only one cell selected, remove the quotes from the string\n        t = t.substring(1, t.length - 1);\n      }\n\n      e.clipboardData.setData('text/html', d);\n      e.clipboardData.setData('text/plain', t);\n      e.clipboardData.setData('text/csv', t);\n      e.clipboardData.setData('application/json', JSON.stringify(sData));\n      e.preventDefault();\n    }\n  };\n\n  return;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYW52YXNEYXRhZ3JpZC8uL2xpYi9ldmVudHMuanM/MDJmOSJdLCJuYW1lcyI6WyJzZWxmIiwid2hlZWxpbmciLCJzdG9wUHJvcGFnYXRpb24iLCJlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2IiwiZm4iLCJldmVudHMiLCJ1bnNoaWZ0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImZvckVhY2giLCJyZW1vdmVFYWNoTGlzdGVuZXIiLCJzZm4iLCJpZHgiLCJzcGxpY2UiLCJjbGVhckV2ZW50TGlzdGVuZXIiLCJkaXNwYXRjaEV2ZW50IiwidHlwZSIsImRlZmF1bHRQcmV2ZW50ZWQiLCJwcmV2ZW50RGVmYXVsdCIsImRpc3BhdGNoRWFjaEV2ZW50IiwiY3R4IiwiYXBwbHkiLCJpbnRmIiwiZ2V0UmF0aW8iLCJNYXRoIiwibWluIiwiYXR0cmlidXRlcyIsIm1heFBpeGVsUmF0aW8iLCJ3aW5kb3ciLCJkZXZpY2VQaXhlbFJhdGlvIiwid2Via2l0QmFja2luZ1N0b3JlUGl4ZWxSYXRpbyIsIm1vekJhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJtc0JhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJvQmFja2luZ1N0b3JlUGl4ZWxSYXRpbyIsImJhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJyZXNpemUiLCJkcmF3QWZ0ZXJSZXNpemUiLCJjYW52YXMiLCJ4IiwidiIsInkiLCJoZWlnaHQiLCJ3aWR0aCIsInN0eWxlIiwibiIsInZiIiwibmIiLCJjbyIsImlzQ29ybmVyIiwiaXNTY3JvbGxCb3hDb3JuZXIiLCJtIiwic2Nyb2xsQmFyQm94TWFyZ2luIiwiYiIsInNjcm9sbEJhckJvcmRlcldpZHRoIiwiZCIsInNidyIsInNjcm9sbEJhcldpZHRoIiwicmF0aW8iLCJibSIsImdyaWRCb3JkZXJDb2xsYXBzZSIsImNlbGxCb3JkZXIiLCJjZWxsQm9yZGVyV2lkdGgiLCJjb2x1bW5IZWFkZXJDZWxsQm9yZGVyIiwiY29sdW1uSGVhZGVyQ2VsbEJvcmRlcldpZHRoIiwiZGF0YUhlaWdodCIsImRhdGFXaWR0aCIsImRpbXMiLCJsIiwidmlld0RhdGEiLCJsZW5ndGgiLCJjb2x1bW5IZWFkZXJDZWxsSGVpZ2h0IiwiZ2V0Q29sdW1uSGVhZGVyQ2VsbEhlaWdodCIsInJvd0hlYWRlckNlbGxXaWR0aCIsImdldFJvd0hlYWRlckNlbGxXaWR0aCIsImNoIiwiY2VsbEhlaWdodCIsInMiLCJnZXRTY2hlbWEiLCJjaGVja1Njcm9sbEJveFZpc2liaWxpdHkiLCJzY3JvbGxCb3giLCJob3Jpem9udGFsQmFyVmlzaWJsZSIsIm92ZXJmbG93WCIsImhvcml6b250YWxCb3hWaXNpYmxlIiwidmVydGljYWxCYXJWaXNpYmxlIiwib3ZlcmZsb3dZIiwidmVydGljYWxCb3hWaXNpYmxlIiwic2V0U2Nyb2xsQm94U2l6ZSIsInNldENhbnZhc1NpemUiLCJpc0NoaWxkR3JpZCIsImRpbSIsInVuZGVmaW5lZCIsImluZGV4T2YiLCJhcHBsaWVkSW5saW5lU3R5bGVzIiwicGFyZW50Tm9kZVN0eWxlIiwiaXNDb21wb25lbnQiLCJzY3JvbGxDYWNoZSIsInNpemVzIiwicm93cyIsInRyZWVzIiwic2NhbGUiLCJmcm96ZW5Sb3ciLCJyZWR1Y2UiLCJyZWR1Y2VTY2hlbWEiLCJhY2N1bXVsYXRvciIsImNvbHVtbiIsImNvbHVtbkluZGV4Iiwib3JkZXJzIiwiY29sdW1ucyIsImhpZGRlbiIsInZhIiwiZ2V0Q29sdW1uV2lkdGgiLCJzaG93TmV3Um93Iiwic25hcFRvUm93IiwicGFyZW50Tm9kZSIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwiY2FudmFzT2Zmc2V0TGVmdCIsImFyZ3MiLCJjYW52YXNPZmZzZXRUb3AiLCJ0b3AiLCJsZWZ0Iiwic2Nyb2xsV2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJ3aWR0aEJveFJhdGlvIiwic2Nyb2xsQm94V2lkdGgiLCJoZWlnaHRCb3hSYXRpbyIsInNjcm9sbEJveEhlaWdodCIsIm1heCIsInNjcm9sbEJhckJveE1pblNpemUiLCJzY3JvbGxCYXJCb3hXaWR0aCIsImVudGl0aWVzIiwiaG9yaXpvbnRhbEJhciIsImhvcml6b250YWxCb3giLCJ2ZXJ0aWNhbEJhciIsInZlcnRpY2FsQm94IiwiY29ybmVyIiwiYmFyIiwiaCIsImJveCIsInBhZ2UiLCJ2aXNpYmxlUm93cyIsInBhZ2VVcERvd25PdmVybGFwIiwicmVzaXplRWRpdElucHV0Iiwic2Nyb2xsIiwiZHJhdyIsImRvbnREcmF3Iiwic2Nyb2xsSW5kZXhUb3AiLCJmbG9vciIsInNjcm9sbFRvcCIsInNjcm9sbFBpeGVsVG9wIiwic2Nyb2xsSW5kZXhMZWZ0IiwiZnJvemVuQ29sdW1uIiwic2Nyb2xsUGl4ZWxMZWZ0Iiwic2Nyb2xsTGVmdCIsImVsbGlwc2lzQ2FjaGUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb3VzZW1vdmUiLCJvdmVycmlkZVBvcyIsImNvbnRleHRNZW51IiwiaW5wdXQiLCJtb3VzZSIsImdldExheWVyUG9zIiwiY3RybCIsImN0cmxLZXkiLCJtZXRhS2V5IiwicGVyc2lzdGFudFNlbGVjdGlvbk1vZGUiLCJzaW5nbGVTZWxlY3Rpb25Nb2RlIiwiaSIsImRyYWdCb3VuZHMiLCJzQm91bmRzIiwiY2VsbCIsImdldENlbGxBdCIsImRlbHRhIiwiTmF0aXZlRXZlbnQiLCJwcmV2aW91c0NlbGwiLCJjdXJyZW50Q2VsbCIsImNsZWFyVGltZW91dCIsInNjcm9sbFRpbWVyIiwiaXNJbkdyaWQiLCJoYXNGb2N1cyIsInJvd0JvdW5kYXJ5Q3Jvc3NlZCIsInJvd0luZGV4IiwiY29sdW1uQm91bmRhcnlDcm9zc2VkIiwiY2VsbEJvdW5kYXJ5Q3Jvc3NlZCIsInByZWZpeCIsImhvdmVycyIsImRyYWdnaW5nSXRlbSIsInNjcm9sbE1vZGVzIiwiY29udGV4dCIsImRyYWdJdGVtIiwiZHJhZ01vZGUiLCJkcmFnQ29udGV4dCIsImN1cnNvciIsInNlbGVjdGluZyIsInJlb3JkZXJPYmplY3QiLCJhYnMiLCJkcmFnU3RhcnQiLCJkcmFnU3RhcnRPYmplY3QiLCJzaGlmdEtleSIsImFjdGl2ZUNlbGwiLCJib3R0b20iLCJyaWdodCIsImdldFNlbGVjdGlvbkJvdW5kcyIsImlnbm9yZU5leHRDbGljayIsInNlbGVjdGlvbk1vZGUiLCJzZWxlY3RSb3ciLCJkcmFnQWRkVG9TZWxlY3Rpb24iLCJzZWxlY3Rpb25zIiwicHVzaCIsImV2ZW50Iiwic2VsZWN0ZWREYXRhIiwiZ2V0U2VsZWN0ZWREYXRhIiwic2VsZWN0aW9uQm91bmRzIiwic2VsZWN0QXJlYSIsImF1dG9TY3JvbGxab25lIiwiY2xpY2siLCJzdGFydGluZ0JvdW5kcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJwb3MiLCJncmlkIiwiY2hlY2tTZWxlY3Rpb25DaGFuZ2UiLCJzYiIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwiZW5kRWRpdCIsInNldEFjdGl2ZUNlbGwiLCJzZWxlY3RBbGwiLCJjb2x1bW5IZWFkZXJDbGlja0JlaGF2aW9yIiwib3JkZXJCeSIsImhlYWRlciIsIm5hbWUiLCJvcmRlckRpcmVjdGlvbiIsIm9yZGVyIiwic2VsZWN0Q29sdW1uIiwiaW5kZXgiLCJ0cmVlIiwidHJlZUFycm93V2lkdGgiLCJ0cmVlQXJyb3dNYXJnaW5MZWZ0IiwidHJlZUFycm93TWFyZ2luUmlnaHQiLCJ0cmVlQXJyb3dDbGlja1JhZGl1cyIsInRyZWVBcnJvd0hlaWdodCIsInRyZWVBcnJvd01hcmdpblRvcCIsInRvZ2dsZVRyZWUiLCJkcmFnUmVzaXplQ29sdW1uIiwicmVzaXppbmdTdGFydGluZ1dpZHRoIiwicmVzaXppbmdTdGFydGluZ0hlaWdodCIsIm1pbkNvbHVtbldpZHRoIiwibWluUm93SGVpZ2h0IiwicmVzaXplU2Nyb2xsWm9uZSIsInNvcnRDb2x1bW5JbmRleCIsInJlc2l6ZUNoaWxkR3JpZHMiLCJyb3dPcGVuIiwiZ2xvYmFsUm93UmVzaXplIiwicm93Iiwic3RvcERyYWdSZXNpemUiLCJkb2N1bWVudCIsImJvZHkiLCJzZXRTdG9yYWdlRGF0YSIsInNjcm9sbEdyaWQiLCJzY3JvbGxQb2ludGVyTG9jayIsInBvaW50ZXJMb2NrUG9zaXRpb24iLCJzY3JvbGxTdGFydE1vZGUiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJzY3JvbGxNb2RlIiwic2Nyb2xsU3RhcnQiLCJzZXRUaW1lb3V0Iiwic2Nyb2xsUmVwZWF0UmF0ZSIsInNlbGVjdGlvblNjcm9sbEluY3JlbWVudCIsInN0b3BTY3JvbGxHcmlkIiwiZXhpdFBvaW50ZXJMb2NrIiwiZHJhZ1Jlb3JkZXIiLCJjb2x1bVJlb3JkZXIiLCJyb3dSZW9yZGVyIiwiYWxsb3dDb2x1bW5SZW9yZGVyaW5nIiwiYWxsb3dSb3dSZW9yZGVyaW5nIiwic291cmNlIiwidGFyZ2V0IiwicmVvcmRlckRlYWRab25lIiwicmVvcmRlclRhcmdldCIsImRyYWdPZmZzZXQiLCJzdG9wRHJhZ1Jlb3JkZXIiLCJvSW5kZXgiLCJ0SW5kZXgiLCJjciIsImRyYWdNb3ZlIiwibW92ZU9mZnNldCIsInN0b3BEcmFnTW92ZSIsIm1vdmluZ1NlbGVjdGlvbiIsIm1vdmVUbyIsIm1vdmVTZWxlY3Rpb24iLCJmcmVlemVNb3ZlIiwiZnJlZXplTWFya2VyUG9zaXRpb24iLCJzdG9wRnJlZXplTW92ZSIsInN0YXJ0RnJlZXplTW92ZSIsIm1vdXNlZG93biIsImxhc3RNb3VzZURvd25UYXJnZXQiLCJidXR0b24iLCJtb3ZlIiwidGVzdCIsImZyZWV6ZSIsInNlbGVjdGVkIiwiaXNDb2x1bW5IZWFkZXIiLCJpc0dyaWQiLCJyZXF1ZXN0UG9pbnRlckxvY2siLCJjb25jYXQiLCJkcmFnZ2luZyIsIm1vdXNldXAiLCJjb250cm9sSW5wdXQiLCJmb2N1cyIsImdldEFkamFjZW50Q2VsbHMiLCJvIiwiZmlyc3QiLCJsYXN0Iiwia2V5ZG93biIsImFkamFjZW50Q2VsbHMiLCJjb2xzIiwib2JqIiwiaXNQcmludGFibGVLZXlFdmVudCIsImJlZ2luRWRpdEF0Iiwia2V5Iiwic2VsZWN0Tm9uZSIsIk51bWJlciIsImlzTmFOIiwiaXNBcnJvd0tleSIsImluY2x1ZGVzIiwic2Nyb2xsSW50b1ZpZXciLCJzZWxlY3Rpb25Gb2xsb3dzQWN0aXZlQ2VsbCIsImtleXVwIiwia2V5cHJlc3MiLCJkYmxjbGljayIsImZpdENvbHVtblRvVmFsdWVzIiwiYXV0b3NpemUiLCJzY3JvbGxXaGVlbCIsInQiLCJkZWx0YVgiLCJkZWx0YVkiLCJkZWx0YU1vZGUiLCJ0b3VjaEhhbHRBbmltYXRpb24iLCJzY3JvbGxUbyIsInBhc3RlRGF0YSIsInBhc3RlVmFsdWUiLCJtaW1lVHlwZSIsInN0YXJ0Um93SW5kZXgiLCJzdGFydENvbEluZGV4Iiwic2NoZW1hIiwiZ2V0VmlzaWJsZVNjaGVtYSIsImlzU3VwcG9ydGVkSHRtbFRhYmxlIiwiaHRtbFN0cmluZyIsImNvbnNvbGUiLCJ3YXJuIiwicGFyc2VEYXRhIiwiZGF0YSIsImNsZWFuZWRIdG1sRGF0YSIsInN1YnN0cmluZyIsInNwbGl0IiwiZmlsdGVyIiwibWFwIiwicmVwbGFjZSIsIm1hdGNoIiwidmFsdWUiLCJlZGl0ZWRDZWxscyIsImNlbGxEYXRhIiwiZm9yRWFjaFNlbGVjdGVkQ2VsbCIsImNvbE5hbWUiLCJ0ZXh0IiwicmVhbFJvd0luZGV4IiwiY2VsbHMiLCJleGlzdGluZ1Jvd0RhdGEiLCJuZXdSb3dEYXRhIiwiYXNzaWduIiwiY29sSW5kZXgiLCJjb2x1bW5OYW1lIiwib3JpZ2luYWxEYXRhIiwiYWZmZWN0ZWRDZWxscyIsIml0c2VsZiIsInJlZnJlc2giLCJnZXROZXh0VmlzaWJsZUNvbHVtbkluZGV4IiwidmlzaWJsZUNvbHVtbkluZGV4IiwiZ2V0VmlzaWJsZUNvbHVtbkluZGV4T2YiLCJwYXN0ZSIsImVkaXRhYmxlIiwiY2xpcGJvYXJkSXRlbXMiLCJNYXAiLCJBcnJheSIsImZyb20iLCJjbGlwYm9hcmREYXRhIiwiaXRlbXMiLCJpdGVtIiwic3VwcG9ydGVkTWltZVR5cGVzIiwicGFzdGVhYmxlSXRlbXMiLCJqb2luIiwiaXRlbVRvUGFzdGUiLCJwYXN0ZVR5cGUiLCJnZXRBc1N0cmluZyIsImN1dCIsImNvcHkiLCJ0YWJsZVJvd3MiLCJ0ZXh0Um93cyIsIm91dHB1dEhlYWRlcnMiLCJvdXRwdXRIZWFkZXJLZXlzIiwic0RhdGEiLCJodG1sU2FmZSIsImZDb3B5Q2VsbCIsImFkZEhlYWRlcnMiLCJoZWFkZXJzIiwidXNlSHRtbCIsImhWYWwiLCJ0aXRsZSIsImFkZENlbGxWYWx1ZSIsInZhbCIsInRyUm93IiwidGV4dFJvdyIsInJvd0tleXMiLCJrZXlzIiwic1NvcnRlZCIsInNldERhdGEiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztBQUNBO0FBQ2E7Ozs7QUFFYjtBQUVBLDZCQUFlLG9DQUFVQSxJQUFWLEVBQWdCO0FBQzdCLE1BQUlDLFFBQUo7O0FBQ0FELE1BQUksQ0FBQ0UsZUFBTCxHQUF1QixVQUFVQyxDQUFWLEVBQWE7QUFDbENBLEtBQUMsQ0FBQ0QsZUFBRjtBQUNELEdBRkQ7QUFHQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDRUYsTUFBSSxDQUFDSSxnQkFBTCxHQUF3QixVQUFVQyxFQUFWLEVBQWNDLEVBQWQsRUFBa0I7QUFDeENOLFFBQUksQ0FBQ08sTUFBTCxDQUFZRixFQUFaLElBQWtCTCxJQUFJLENBQUNPLE1BQUwsQ0FBWUYsRUFBWixLQUFtQixFQUFyQztBQUNBTCxRQUFJLENBQUNPLE1BQUwsQ0FBWUYsRUFBWixFQUFnQkcsT0FBaEIsQ0FBd0JGLEVBQXhCO0FBQ0QsR0FIRDtBQUlBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNFTixNQUFJLENBQUNTLG1CQUFMLEdBQTJCLFVBQVVKLEVBQVYsRUFBY0MsRUFBZCxFQUFrQjtBQUMzQyxLQUFDTixJQUFJLENBQUNPLE1BQUwsQ0FBWUYsRUFBWixLQUFtQixFQUFwQixFQUF3QkssT0FBeEIsQ0FBZ0MsU0FBU0Msa0JBQVQsQ0FBNEJDLEdBQTVCLEVBQWlDQyxHQUFqQyxFQUFzQztBQUNwRSxVQUFJUCxFQUFFLEtBQUtNLEdBQVgsRUFBZ0I7QUFDZFosWUFBSSxDQUFDTyxNQUFMLENBQVlGLEVBQVosRUFBZ0JTLE1BQWhC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cEIsQ0FBQyxDQUFDM1EsTUFBRixHQUFXLENBQTFCLENBQUo7QUFDRDs7QUFDRG5FLE9BQUMsQ0FBQ2tZLGFBQUYsQ0FBZ0I4QixPQUFoQixDQUF3QixXQUF4QixFQUFxQzVXLENBQXJDO0FBQ0FwRCxPQUFDLENBQUNrWSxhQUFGLENBQWdCOEIsT0FBaEIsQ0FBd0IsWUFBeEIsRUFBc0NsRixDQUF0QztBQUNBOVUsT0FBQyxDQUFDa1ksYUFBRixDQUFnQjhCLE9BQWhCLENBQXdCLFVBQXhCLEVBQW9DbEYsQ0FBcEM7QUFDQTlVLE9BQUMsQ0FBQ2tZLGFBQUYsQ0FBZ0I4QixPQUFoQixDQUF3QixrQkFBeEIsRUFBNEN6TSxJQUFJLENBQUNDLFNBQUwsQ0FBZXlMLEtBQWYsQ0FBNUM7QUFDQWpaLE9BQUMsQ0FBQ2dCLGNBQUY7QUFDRDtBQUNGLEdBbEhEOztBQW1IQTtBQUNEIiwiZmlsZSI6Ii4vbGliL2V2ZW50cy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qanNsaW50IGJyb3dzZXI6IHRydWUsIHVucGFyYW06IHRydWUsIHRvZG86IHRydWUsIHBsdXNwbHVzOiB0cnVlKi9cclxuLypnbG9iYWxzIGRlZmluZTogdHJ1ZSwgTXV0YXRpb25PYnNlcnZlcjogZmFsc2UsIHJlcXVlc3RBbmltYXRpb25GcmFtZTogZmFsc2UsIHBlcmZvcm1hbmNlOiBmYWxzZSwgYnRvYTogZmFsc2UqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5pbXBvcnQgaXNQcmludGFibGVLZXlFdmVudCBmcm9tICdpcy1wcmludGFibGUta2V5LWV2ZW50JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChzZWxmKSB7XHJcbiAgdmFyIHdoZWVsaW5nO1xyXG4gIHNlbGYuc3RvcFByb3BhZ2F0aW9uID0gZnVuY3Rpb24gKGUpIHtcclxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgfTtcclxuICAvKipcclxuICAgKiBBZGRzIGFuIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBnaXZlbiBldmVudC5cclxuICAgKiBAbWVtYmVyb2YgY2FudmFzRGF0YWdyaWRcclxuICAgKiBAbmFtZSBhZGRFdmVudExpc3RlbmVyXHJcbiAgICogQG1ldGhvZFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldiBUaGUgbmFtZSBvZiB0aGUgZXZlbnQgdG8gc3Vic2NyaWJlIHRvLlxyXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIFRoZSBldmVudCBwcm9jZWR1cmUgdG8gZXhlY3V0ZSB3aGVuIHRoZSBldmVudCBpcyByYWlzZWQuXHJcbiAgICovXHJcbiAgc2VsZi5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKGV2LCBmbikge1xyXG4gICAgc2VsZi5ldmVudHNbZXZdID0gc2VsZi5ldmVudHNbZXZdIHx8IFtdO1xyXG4gICAgc2VsZi5ldmVudHNbZXZdLnVuc2hpZnQoZm4pO1xyXG4gIH07XHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlcyB0aGUgZ2l2ZW4gbGlzdGVuZXIgZnVuY3Rpb24gZnJvbSB0aGUgZ2l2ZW4gZXZlbnQuICBNdXN0IGJlIGFuIGFjdHVhbCByZWZlcmVuY2UgdG8gdGhlIGZ1bmN0aW9uIHRoYXQgd2FzIGJvdW5kLlxyXG4gICAqIEBtZW1iZXJvZiBjYW52YXNEYXRhZ3JpZFxyXG4gICAqIEBuYW1lIHJlbW92ZUV2ZW50TGlzdGVuZXJcclxuICAgKiBAbWV0aG9kXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2IFRoZSBuYW1lIG9mIHRoZSBldmVudCB0byB1bnN1YnNjcmliZSBmcm9tLlxyXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIFRoZSBldmVudCBwcm9jZWR1cmUgdG8gZXhlY3V0ZSB3aGVuIHRoZSBldmVudCBpcyByYWlzZWQuXHJcbiAgICovXHJcbiAgc2VsZi5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKGV2LCBmbikge1xyXG4gICAgKHNlbGYuZXZlbnRzW2V2XSB8fCBbXSkuZm9yRWFjaChmdW5jdGlvbiByZW1vdmVFYWNoTGlzdGVuZXIoc2ZuLCBpZHgpIHtcclxuICAgICAgaWYgKGZuID09PSBzZm4pIHtcclxuICAgICAgICBzZWxmLmV2ZW50c1tldl0uc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbW92ZXMgYWxsIGZ1bmN0aW9uIGZyb20gdGhlIGdpdmVuIGV2ZW50LiAgTXVzdCBiZSBhbiBhY3R1YWwgcmVmZXJlbmNlIHRvIHRoZSBmdW5jdGlvbiB0aGF0IHdhcyBib3VuZC5cclxuICAgKiBAbWVtYmVyb2YgY2FudmFzRGF0YWdyaWRcclxuICAgKiBAbmFtZSByZW1vdmVFdmVudExpc3RlbmVyXHJcbiAgICogQG1ldGhvZFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldiBUaGUgbmFtZSBvZiB0aGUgZXZlbnQgdG8gdW5zdWJzY3JpYmUgZnJvbS5cclxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiBUaGUgZXZlbnQgcHJvY2VkdXJlIHRvIGV4ZWN1dGUgd2hlbiB0aGUgZXZlbnQgaXMgcmFpc2VkLlxyXG4gICAqL1xyXG4gIHNlbGYuY2xlYXJFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKGV2KSB7XHJcbiAgICAoc2VsZi5ldmVudHNbZXZdIHx8IFtdKS5zcGxpY2UoKTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBGaXJlcyB0aGUgZ2l2ZW4gZXZlbnQsIHBhc3NpbmcgYW4gZXZlbnQgb2JqZWN0IHRvIHRoZSBldmVudCBzdWJzY3JpYmVycy5cclxuICAgKiBAbWVtYmVyb2YgY2FudmFzRGF0YWdyaWRcclxuICAgKiBAbmFtZSBkaXNwYXRjaEV2ZW50XHJcbiAgICogQG1ldGhvZFxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBldiBUaGUgbmFtZSBvZiB0aGUgZXZlbnQgdG8gZGlzcGF0Y2guXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGUgVGhlIGV2ZW50IG9iamVjdC5cclxuICAgKi9cclxuICBzZWxmLmRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbiAoZXYsIGUpIHtcclxuICAgIGUgPSBldi50eXBlID8gZXYgOiBlIHx8IHt9O1xyXG4gICAgZXYgPSBldi50eXBlIHx8IGV2O1xyXG4gICAgdmFyIGRlZmF1bHRQcmV2ZW50ZWQ7XHJcbiAgICBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdCgpIHtcclxuICAgICAgZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBpZiAoIXNlbGYuZXZlbnRzW2V2XSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBzZWxmLmV2ZW50c1tldl0uZm9yRWFjaChmdW5jdGlvbiBkaXNwYXRjaEVhY2hFdmVudChmbikge1xyXG4gICAgICBlLmN0eCA9IHNlbGYuY3R4O1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0ID0gcHJldmVudERlZmF1bHQ7XHJcbiAgICAgIGZuLmFwcGx5KHNlbGYuaW50ZiwgW2VdKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGRlZmF1bHRQcmV2ZW50ZWQ7XHJcbiAgfTtcclxuICBzZWxmLmdldFJhdGlvID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIE1hdGgubWluKFxyXG4gICAgICBzZWxmLmF0dHJpYnV0ZXMubWF4UGl4ZWxSYXRpbyxcclxuICAgICAgKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDEpIC9cclxuICAgICAgICAoc2VsZi5jdHgud2Via2l0QmFja2luZ1N0b3JlUGl4ZWxSYXRpbyB8fFxyXG4gICAgICAgICAgc2VsZi5jdHgubW96QmFja2luZ1N0b3JlUGl4ZWxSYXRpbyB8fFxyXG4gICAgICAgICAgc2VsZi5jdHgubXNCYWNraW5nU3RvcmVQaXhlbFJhdGlvIHx8XHJcbiAgICAgICAgICBzZWxmLmN0eC5vQmFja2luZ1N0b3JlUGl4ZWxSYXRpbyB8fFxyXG4gICAgICAgICAgc2VsZi5jdHguYmFja2luZ1N0b3JlUGl4ZWxSYXRpbyB8fFxyXG4gICAgICAgICAgMSksXHJcbiAgICApO1xyXG4gIH07XHJcbiAgc2VsZi5yZXNpemUgPSBmdW5jdGlvbiAoZHJhd0FmdGVyUmVzaXplKSB7XHJcbiAgICBpZiAoIXNlbGYuY2FudmFzKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHZhciB4LFxyXG4gICAgICB2ID0ge1xyXG4gICAgICAgIHg6IDAsXHJcbiAgICAgICAgeTogMCxcclxuICAgICAgICBoZWlnaHQ6IDAsXHJcbiAgICAgICAgd2lkdGg6IDAsXHJcbiAgICAgICAgc3R5bGU6ICd2ZXJ0aWNhbC1zY3JvbGwtYmFyJyxcclxuICAgICAgfSxcclxuICAgICAgbiA9IHtcclxuICAgICAgICB4OiAwLFxyXG4gICAgICAgIHk6IDAsXHJcbiAgICAgICAgaGVpZ2h0OiAwLFxyXG4gICAgICAgIHdpZHRoOiAwLFxyXG4gICAgICAgIHN0eWxlOiAnaG9yaXpvbnRhbC1zY3JvbGwtYmFyJyxcclxuICAgICAgfSxcclxuICAgICAgdmIgPSB7XHJcbiAgICAgICAgeDogMCxcclxuICAgICAgICB5OiAwLFxyXG4gICAgICAgIGhlaWdodDogMCxcclxuICAgICAgICB3aWR0aDogMCxcclxuICAgICAgICBzdHlsZTogJ3ZlcnRpY2FsLXNjcm9sbC1ib3gnLFxyXG4gICAgICB9LFxyXG4gICAgICBuYiA9IHtcclxuICAgICAgICB4OiAwLFxyXG4gICAgICAgIHk6IDAsXHJcbiAgICAgICAgaGVpZ2h0OiAwLFxyXG4gICAgICAgIHdpZHRoOiAwLFxyXG4gICAgICAgIHN0eWxlOiAnaG9yaXpvbnRhbC1zY3JvbGwtYm94JyxcclxuICAgICAgfSxcclxuICAgICAgY28gPSB7XHJcbiAgICAgICAgeDogMCxcclxuICAgICAgICB5OiAwLFxyXG4gICAgICAgIGhlaWdodDogMCxcclxuICAgICAgICB3aWR0aDogMCxcclxuICAgICAgICBpc0Nvcm5lcjogdHJ1ZSxcclxuICAgICAgICBpc1Njcm9sbEJveENvcm5lcjogdHJ1ZSxcclxuICAgICAgICBzdHlsZTogJ3Njcm9sbC1ib3gtY29ybmVyJyxcclxuICAgICAgfSxcclxuICAgICAgbSA9IHNlbGYuc3R5bGUuc2Nyb2xsQmFyQm94TWFyZ2luICogMixcclxuICAgICAgYiA9IHNlbGYuc3R5bGUuc2Nyb2xsQmFyQm9yZGVyV2lkdGggKiAyLFxyXG4gICAgICBkID0gc2VsZi5zdHlsZS5zY3JvbGxCYXJCb3hNYXJnaW4gKiAwLjUsXHJcbiAgICAgIHNidyA9IHNlbGYuc3R5bGUuc2Nyb2xsQmFyV2lkdGggKyBzZWxmLnN0eWxlLnNjcm9sbEJhckJvcmRlcldpZHRoICogMixcclxuICAgICAgcmF0aW8gPSBzZWxmLmdldFJhdGlvKCksXHJcbiAgICAgIGJtID0gc2VsZi5zdHlsZS5ncmlkQm9yZGVyQ29sbGFwc2UgPT09ICdjb2xsYXBzZScgPyAxIDogMixcclxuICAgICAgY2VsbEJvcmRlciA9IHNlbGYuc3R5bGUuY2VsbEJvcmRlcldpZHRoICogYm0sXHJcbiAgICAgIGNvbHVtbkhlYWRlckNlbGxCb3JkZXIgPSBzZWxmLnN0eWxlLmNvbHVtbkhlYWRlckNlbGxCb3JkZXJXaWR0aCAqIGJtLFxyXG4gICAgICBkYXRhSGVpZ2h0ID0gMCxcclxuICAgICAgZGF0YVdpZHRoID0gMCxcclxuICAgICAgZGltcyxcclxuICAgICAgbCA9IChzZWxmLnZpZXdEYXRhIHx8IFtdKS5sZW5ndGgsXHJcbiAgICAgIGNvbHVtbkhlYWRlckNlbGxIZWlnaHQgPSBzZWxmLmdldENvbHVtbkhlYWRlckNlbGxIZWlnaHQoKSxcclxuICAgICAgcm93SGVhZGVyQ2VsbFdpZHRoID0gc2VsZi5nZXRSb3dIZWFkZXJDZWxsV2lkdGgoKSxcclxuICAgICAgY2ggPSBzZWxmLnN0eWxlLmNlbGxIZWlnaHQsXHJcbiAgICAgIHMgPSBzZWxmLmdldFNjaGVtYSgpO1xyXG4gICAgLy8gc2V0cyBhY3R1YWwgRE9NIGNhbnZhcyBlbGVtZW50XHJcbiAgICBmdW5jdGlvbiBjaGVja1Njcm9sbEJveFZpc2liaWxpdHkoKSB7XHJcbiAgICAgIHNlbGYuc2Nyb2xsQm94Lmhvcml6b250YWxCYXJWaXNpYmxlID1cclxuICAgICAgICAoc2VsZi5zdHlsZS53aWR0aCAhPT0gJ2F1dG8nICYmXHJcbiAgICAgICAgICBkYXRhV2lkdGggPiBzZWxmLnNjcm9sbEJveC53aWR0aCAmJlxyXG4gICAgICAgICAgc2VsZi5zdHlsZS5vdmVyZmxvd1ggIT09ICdoaWRkZW4nKSB8fFxyXG4gICAgICAgIHNlbGYuc3R5bGUub3ZlcmZsb3dYID09PSAnc2Nyb2xsJztcclxuICAgICAgc2VsZi5zY3JvbGxCb3guaG9yaXpvbnRhbEJveFZpc2libGUgPSBkYXRhV2lkdGggPiBzZWxmLnNjcm9sbEJveC53aWR0aDtcclxuICAgICAgc2VsZi5zY3JvbGxCb3gudmVydGljYWxCYXJWaXNpYmxlID1cclxuICAgICAgICAoc2VsZi5zdHlsZS5oZWlnaHQgIT09ICdhdXRvJyAmJlxyXG4gICAgICAgICAgZGF0YUhlaWdodCA+IHNlbGYuc2Nyb2xsQm94LmhlaWdodCAmJlxyXG4gICAgICAgICAgc2VsZi5zdHlsZS5vdmVyZmxvd1kgIT09ICdoaWRkZW4nKSB8fFxyXG4gICAgICAgIHNlbGYuc3R5bGUub3ZlcmZsb3dZID09PSAnc2Nyb2xsJztcclxuICAgICAgc2VsZi5zY3JvbGxCb3gudmVydGljYWxCb3hWaXNpYmxlID0gZGF0YUhlaWdodCA+IHNlbGYuc2Nyb2xsQm94LmhlaWdodDtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHNldFNjcm9sbEJveFNpemUoKSB7XHJcbiAgICAgIHNlbGYuc2Nyb2xsQm94LndpZHRoID0gc2VsZi53aWR0aCAtIHJvd0hlYWRlckNlbGxXaWR0aDtcclxuICAgICAgc2VsZi5zY3JvbGxCb3guaGVpZ2h0ID0gc2VsZi5oZWlnaHQgLSBjb2x1bW5IZWFkZXJDZWxsSGVpZ2h0O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0Q2FudmFzU2l6ZSgpIHtcclxuICAgICAgaWYgKHNlbGYuaXNDaGlsZEdyaWQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgZGltcyA9IHtcclxuICAgICAgICAvLyBIQUNLICsxID8gbWF5YmUgaXQncyBhIG1hZ2ljIGNlbGwgYm9yZGVyPyAgUmVxdWlyZWQgdG8gbGluZSB1cCBwcm9wZXJseSBpbiBhdXRvIGhlaWdodCBtb2RlLlxyXG4gICAgICAgIGhlaWdodDogY29sdW1uSGVhZGVyQ2VsbEhlaWdodCArIGRhdGFIZWlnaHQgKyBjZWxsQm9yZGVyICsgMSxcclxuICAgICAgICB3aWR0aDogZGF0YVdpZHRoICsgcm93SGVhZGVyQ2VsbFdpZHRoICsgY2VsbEJvcmRlcixcclxuICAgICAgfTtcclxuICAgICAgWyd3aWR0aCcsICdoZWlnaHQnXS5mb3JFYWNoKGZ1bmN0aW9uIChkaW0pIHtcclxuICAgICAgICAvL1RPRE86IHN1cHBvcnQgaW5oZXJpdFxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIFsnYXV0bycsIHVuZGVmaW5lZF0uaW5kZXhPZihzZWxmLnN0eWxlW2RpbV0pICE9PSAtMSAmJlxyXG4gICAgICAgICAgWydhdXRvJywgdW5kZWZpbmVkXS5pbmRleE9mKHNlbGYuYXBwbGllZElubGluZVN0eWxlc1tkaW1dKSAhPT0gLTFcclxuICAgICAgICApIHtcclxuICAgICAgICAgIHNlbGYucGFyZW50Tm9kZVN0eWxlW2RpbV0gPSBkaW1zW2RpbV0gKyAncHgnO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgICBbJ2F1dG8nLCB1bmRlZmluZWRdLmluZGV4T2Yoc2VsZi5zdHlsZVtkaW1dKSA9PSAtMSAmJlxyXG4gICAgICAgICAgWydhdXRvJywgdW5kZWZpbmVkXS5pbmRleE9mKHNlbGYuYXBwbGllZElubGluZVN0eWxlc1tkaW1dKSA9PSAtMVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgc2VsZi5wYXJlbnROb2RlU3R5bGVbZGltXSA9IHNlbGYuc3R5bGVbZGltXTtcclxuICAgICAgICAgIGlmIChzZWxmLmlzQ29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIHNlbGYuY2FudmFzLnN0eWxlW2RpbV0gPSBzZWxmLnN0eWxlW2RpbV07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHNlbGYuc2Nyb2xsQ2FjaGUueCA9IFtdO1xyXG4gICAgc2VsZi5zY3JvbGxDYWNoZS55ID0gW107XHJcbiAgICBmb3IgKHggPSAwOyB4IDwgbDsgeCArPSAxKSB7XHJcbiAgICAgIHNlbGYuc2Nyb2xsQ2FjaGUueVt4XSA9IGRhdGFIZWlnaHQ7XHJcbiAgICAgIGRhdGFIZWlnaHQgKz1cclxuICAgICAgICAoKHNlbGYuc2l6ZXMucm93c1t4XSB8fCBjaCkgKyAoc2VsZi5zaXplcy50cmVlc1t4XSB8fCAwKSkgKiBzZWxmLnNjYWxlICtcclxuICAgICAgICAvLyBIQUNLPyBpZiBhbiBleHBhbmRlZCB0cmVlIHJvdyBpcyBmcm96ZW4gaXQgaXMgbmVjZXNzYXJ5IHRvIGFkZCB0aGUgdHJlZSByb3cncyBoZWlnaHQgYSBzZWNvbmQgdGltZS5cclxuICAgICAgICAoc2VsZi5mcm96ZW5Sb3cgPiB4ID8gc2VsZi5zaXplcy50cmVlc1t4XSB8fCAwIDogMCk7XHJcbiAgICB9XHJcbiAgICBpZiAobCA+IDEpIHtcclxuICAgICAgc2VsZi5zY3JvbGxDYWNoZS55W3hdID0gZGF0YUhlaWdodDtcclxuICAgIH1cclxuICAgIGRhdGFXaWR0aCA9XHJcbiAgICAgIHMucmVkdWNlKGZ1bmN0aW9uIHJlZHVjZVNjaGVtYShhY2N1bXVsYXRvciwgY29sdW1uLCBjb2x1bW5JbmRleCkge1xyXG4gICAgICAgIC8vIGludGVudGlvbmFsIHJlZGVmaW50aW9uIG9mIGNvbHVtbi4gIFRoaXMgY2F1c2VzIHNjcm9sbENhY2hlIHRvIGJlIGluIHRoZSBjb3JyZWN0IG9yZGVyXHJcbiAgICAgICAgY29sdW1uID0gc1tzZWxmLm9yZGVycy5jb2x1bW5zW2NvbHVtbkluZGV4XV07XHJcbiAgICAgICAgaWYgKGNvbHVtbi5oaWRkZW4pIHtcclxuICAgICAgICAgIHNlbGYuc2Nyb2xsQ2FjaGUueFtjb2x1bW5JbmRleF0gPSBhY2N1bXVsYXRvcjtcclxuICAgICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHZhID1cclxuICAgICAgICAgIGFjY3VtdWxhdG9yICsgc2VsZi5nZXRDb2x1bW5XaWR0aChzZWxmLm9yZGVycy5jb2x1bW5zW2NvbHVtbkluZGV4XSk7XHJcbiAgICAgICAgc2VsZi5zY3JvbGxDYWNoZS54W2NvbHVtbkluZGV4XSA9IHZhO1xyXG4gICAgICAgIHJldHVybiB2YTtcclxuICAgICAgfSwgMCkgfHwgMDtcclxuICAgIGlmIChzZWxmLmF0dHJpYnV0ZXMuc2hvd05ld1Jvdykge1xyXG4gICAgICBkYXRhSGVpZ2h0ICs9IGNoO1xyXG4gICAgfVxyXG4gICAgaWYgKHNlbGYuYXR0cmlidXRlcy5zbmFwVG9Sb3cpIHtcclxuICAgICAgZGF0YUhlaWdodCArPSBzZWxmLnN0eWxlLmNlbGxIZWlnaHQ7XHJcbiAgICB9XHJcbiAgICBzZXRDYW52YXNTaXplKCk7XHJcbiAgICBpZiAoc2VsZi5pc0NoaWxkR3JpZCkge1xyXG4gICAgICBzZWxmLndpZHRoID0gc2VsZi5wYXJlbnROb2RlLm9mZnNldFdpZHRoO1xyXG4gICAgICBzZWxmLmhlaWdodCA9IHNlbGYucGFyZW50Tm9kZS5vZmZzZXRIZWlnaHQ7XHJcbiAgICB9IGVsc2UgaWYgKFxyXG4gICAgICBzZWxmLmhlaWdodCAhPT0gc2VsZi5jYW52YXMub2Zmc2V0SGVpZ2h0IHx8XHJcbiAgICAgIHNlbGYud2lkdGggIT09IHNlbGYuY2FudmFzLm9mZnNldFdpZHRoXHJcbiAgICApIHtcclxuICAgICAgc2VsZi5oZWlnaHQgPSBzZWxmLmNhbnZhcy5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgIHNlbGYud2lkdGggPSBzZWxmLmNhbnZhcy5vZmZzZXRXaWR0aDtcclxuICAgICAgc2VsZi5jYW52YXNPZmZzZXRMZWZ0ID0gc2VsZi5hcmdzLmNhbnZhc09mZnNldExlZnQgfHwgMDtcclxuICAgICAgc2VsZi5jYW52YXNPZmZzZXRUb3AgPSBzZWxmLmFyZ3MuY2FudmFzT2Zmc2V0VG9wIHx8IDA7XHJcbiAgICB9XHJcbiAgICAvLy8gY2FsY3VsYXRlIHNjcm9sbCBiYXIgZGltZW5zaW9uc1xyXG4gICAgLy8gbm9uLWNvbnRyb3ZlcnNpYWxcclxuICAgIHNlbGYuc2Nyb2xsQm94LnRvcCA9IGNvbHVtbkhlYWRlckNlbGxIZWlnaHQgKyBjb2x1bW5IZWFkZXJDZWxsQm9yZGVyO1xyXG4gICAgc2VsZi5zY3JvbGxCb3gubGVmdCA9IHJvd0hlYWRlckNlbGxXaWR0aDtcclxuICAgIC8vIHdpZHRoIGFuZCBoZWlnaHQgb2Ygc2Nyb2xsIGJveFxyXG4gICAgc2V0U2Nyb2xsQm94U2l6ZSgpO1xyXG4gICAgLy8gaXMgdGhlIGRhdGEgbGFyZ2VyIHRoYW4gdGhlIHNjcm9sbCBib3hcclxuICAgIGNoZWNrU2Nyb2xsQm94VmlzaWJpbGl0eSgpO1xyXG4gICAgLy8gaWYgdGhlIHNjcm9sbCBib3ggaXMgdmlzaWJsZSwgbWFrZSByb29tIGZvciBpdCBieSBleHBhbmRpbmcgdGhlIHNpemUgb2YgdGhlIGVsZW1lbnRcclxuICAgIC8vIGlmIHRoZSBvdGhlciBkaW1lbnNpb24gaXMgc2V0IHRvIGF1dG9cclxuICAgIGlmIChzZWxmLnNjcm9sbEJveC5ob3Jpem9udGFsQmFyVmlzaWJsZSkge1xyXG4gICAgICBpZiAoc2VsZi5zdHlsZS5oZWlnaHQgPT09ICdhdXRvJyAmJiAhc2VsZi5pc0NoaWxkR3JpZCkge1xyXG4gICAgICAgIHNlbGYuaGVpZ2h0ICs9IHNidztcclxuICAgICAgfVxyXG4gICAgICBkYXRhSGVpZ2h0ICs9IHNidztcclxuICAgICAgc2V0Q2FudmFzU2l6ZSgpO1xyXG4gICAgICBzZXRTY3JvbGxCb3hTaXplKCk7XHJcbiAgICAgIGNoZWNrU2Nyb2xsQm94VmlzaWJpbGl0eSgpO1xyXG4gICAgfVxyXG4gICAgaWYgKHNlbGYuc2Nyb2xsQm94LnZlcnRpY2FsQmFyVmlzaWJsZSkge1xyXG4gICAgICBpZiAoc2VsZi5zdHlsZS53aWR0aCA9PT0gJ2F1dG8nICYmICFzZWxmLmlzQ2hpbGRHcmlkKSB7XHJcbiAgICAgICAgc2VsZi53aWR0aCArPSBzYnc7XHJcbiAgICAgIH1cclxuICAgICAgZGF0YVdpZHRoICs9IHNidztcclxuICAgICAgc2V0Q2FudmFzU2l6ZSgpO1xyXG4gICAgICBzZXRTY3JvbGxCb3hTaXplKCk7XHJcbiAgICAgIGNoZWNrU2Nyb2xsQm94VmlzaWJpbGl0eSgpO1xyXG4gICAgfVxyXG4gICAgLy8gc2V0IGFnYWluIGFmdGVyIGJhciB2aXNpYmlsaXR5IGNoZWNrc1xyXG4gICAgc2V0U2Nyb2xsQm94U2l6ZSgpO1xyXG4gICAgc2VsZi5zY3JvbGxCb3guc2Nyb2xsV2lkdGggPSBkYXRhV2lkdGggLSBzZWxmLnNjcm9sbEJveC53aWR0aDtcclxuICAgIHNlbGYuc2Nyb2xsQm94LnNjcm9sbEhlaWdodCA9IGRhdGFIZWlnaHQgLSBzZWxmLnNjcm9sbEJveC5oZWlnaHQ7XHJcbiAgICBzZWxmLnNjcm9sbEJveC53aWR0aEJveFJhdGlvID0gc2VsZi5zY3JvbGxCb3gud2lkdGggLyBkYXRhV2lkdGg7XHJcbiAgICBzZWxmLnNjcm9sbEJveC5zY3JvbGxCb3hXaWR0aCA9XHJcbiAgICAgIHNlbGYuc2Nyb2xsQm94LndpZHRoICogc2VsZi5zY3JvbGxCb3gud2lkdGhCb3hSYXRpbyAtXHJcbiAgICAgIHNlbGYuc3R5bGUuc2Nyb2xsQmFyV2lkdGggLVxyXG4gICAgICBiIC1cclxuICAgICAgZDtcclxuICAgIC8vIFRPRE86IFRoaXMgaGVpZ2h0Qm94UmF0aW8gbnVtYmVyIGlzIHRlcnJpYmx5IHdyb25nLlxyXG4gICAgLy8gVGhleSBzaG91bGQgYmUgYSByZXN1bHQgb2YgdGhlIHNpemUgb2YgdGhlIGdyaWQvY2FudmFzP1xyXG4gICAgLy8gaXQgYmVpbmcgb2ZmIGNhdXNlcyB0aGUgc2Nyb2xsIGJhciB0byBcInNsaWRlXCIgdW5kZXJcclxuICAgIC8vIHRoZSBkcmFnZ2VkIG1vdXNlLlxyXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1RvbnlHZXJtYW5lcmkvY2FudmFzLWRhdGFncmlkL2lzc3Vlcy85N1xyXG4gICAgc2VsZi5zY3JvbGxCb3guaGVpZ2h0Qm94UmF0aW8gPVxyXG4gICAgICAoc2VsZi5zY3JvbGxCb3guaGVpZ2h0IC0gY29sdW1uSGVhZGVyQ2VsbEhlaWdodCkgLyBkYXRhSGVpZ2h0O1xyXG4gICAgc2VsZi5zY3JvbGxCb3guc2Nyb2xsQm94SGVpZ2h0ID1cclxuICAgICAgc2VsZi5zY3JvbGxCb3guaGVpZ2h0ICogc2VsZi5zY3JvbGxCb3guaGVpZ2h0Qm94UmF0aW8gLVxyXG4gICAgICBzZWxmLnN0eWxlLnNjcm9sbEJhcldpZHRoIC1cclxuICAgICAgYiAtXHJcbiAgICAgIGQ7XHJcbiAgICBzZWxmLnNjcm9sbEJveC5zY3JvbGxCb3hXaWR0aCA9IE1hdGgubWF4KFxyXG4gICAgICBzZWxmLnNjcm9sbEJveC5zY3JvbGxCb3hXaWR0aCxcclxuICAgICAgc2VsZi5zdHlsZS5zY3JvbGxCYXJCb3hNaW5TaXplLFxyXG4gICAgKTtcclxuICAgIHNlbGYuc2Nyb2xsQm94LnNjcm9sbEJveEhlaWdodCA9IE1hdGgubWF4KFxyXG4gICAgICBzZWxmLnNjcm9sbEJveC5zY3JvbGxCb3hIZWlnaHQsXHJcbiAgICAgIHNlbGYuc3R5bGUuc2Nyb2xsQmFyQm94TWluU2l6ZSxcclxuICAgICk7XHJcbiAgICAvLyBob3Jpem9udGFsXHJcbiAgICBuLnggKz0gcm93SGVhZGVyQ2VsbFdpZHRoO1xyXG4gICAgbi55ICs9IHNlbGYuaGVpZ2h0IC0gc2VsZi5zdHlsZS5zY3JvbGxCYXJXaWR0aCAtIGQ7XHJcbiAgICBuLndpZHRoID1cclxuICAgICAgc2VsZi53aWR0aCAtIHNlbGYuc3R5bGUuc2Nyb2xsQmFyV2lkdGggLSByb3dIZWFkZXJDZWxsV2lkdGggLSBkIC0gbTtcclxuICAgIG4uaGVpZ2h0ID0gc2VsZi5zdHlsZS5zY3JvbGxCYXJXaWR0aCArIHNlbGYuc3R5bGUuc2Nyb2xsQmFyQm9yZGVyV2lkdGggKyBkO1xyXG4gICAgLy8gaG9yaXpvbnRhbCBib3hcclxuICAgIG5iLnkgPSBuLnkgKyBzZWxmLnN0eWxlLnNjcm9sbEJhckJveE1hcmdpbjtcclxuICAgIG5iLndpZHRoID0gc2VsZi5zY3JvbGxCb3guc2Nyb2xsQm94V2lkdGg7XHJcbiAgICBuYi5oZWlnaHQgPSBzZWxmLnN0eWxlLnNjcm9sbEJhckJveFdpZHRoO1xyXG4gICAgLy8gdmVydGljYWxcclxuICAgIHYueCArPVxyXG4gICAgICBzZWxmLndpZHRoIC1cclxuICAgICAgc2VsZi5zdHlsZS5zY3JvbGxCYXJXaWR0aCAtXHJcbiAgICAgIHNlbGYuc3R5bGUuc2Nyb2xsQmFyQm9yZGVyV2lkdGggLVxyXG4gICAgICBkO1xyXG4gICAgdi55ICs9IGNvbHVtbkhlYWRlckNlbGxIZWlnaHQ7XHJcbiAgICB2LndpZHRoID0gc2VsZi5zdHlsZS5zY3JvbGxCYXJXaWR0aCArIHNlbGYuc3R5bGUuc2Nyb2xsQmFyQm9yZGVyV2lkdGggKyBkO1xyXG4gICAgdi5oZWlnaHQgPVxyXG4gICAgICBzZWxmLmhlaWdodCAtIGNvbHVtbkhlYWRlckNlbGxIZWlnaHQgLSBzZWxmLnN0eWxlLnNjcm9sbEJhcldpZHRoIC0gZCAtIG07XHJcbiAgICAvLyB2ZXJ0aWNhbCBib3hcclxuICAgIHZiLnggPSB2LnggKyBzZWxmLnN0eWxlLnNjcm9sbEJhckJveE1hcmdpbjtcclxuICAgIHZiLndpZHRoID0gc2VsZi5zdHlsZS5zY3JvbGxCYXJCb3hXaWR0aDtcclxuICAgIHZiLmhlaWdodCA9IHNlbGYuc2Nyb2xsQm94LnNjcm9sbEJveEhlaWdodDtcclxuICAgIC8vIGNvcm5lclxyXG4gICAgY28ueCA9IG4ueCArIG4ud2lkdGggKyBtO1xyXG4gICAgY28ueSA9IHYueSArIHYuaGVpZ2h0ICsgbTtcclxuICAgIGNvLndpZHRoID0gc2VsZi5zdHlsZS5zY3JvbGxCYXJXaWR0aCArIHNlbGYuc3R5bGUuc2Nyb2xsQmFyQm9yZGVyV2lkdGg7XHJcbiAgICBjby5oZWlnaHQgPSBzZWxmLnN0eWxlLnNjcm9sbEJhcldpZHRoICsgc2VsZi5zdHlsZS5zY3JvbGxCYXJCb3JkZXJXaWR0aDtcclxuICAgIHNlbGYuc2Nyb2xsQm94LmVudGl0aWVzID0ge1xyXG4gICAgICBob3Jpem9udGFsQmFyOiBuLFxyXG4gICAgICBob3Jpem9udGFsQm94OiBuYixcclxuICAgICAgdmVydGljYWxCYXI6IHYsXHJcbiAgICAgIHZlcnRpY2FsQm94OiB2YixcclxuICAgICAgY29ybmVyOiBjbyxcclxuICAgIH07XHJcbiAgICBzZWxmLnNjcm9sbEJveC5iYXIgPSB7XHJcbiAgICAgIHY6IHYsXHJcbiAgICAgIGg6IG4sXHJcbiAgICB9O1xyXG4gICAgc2VsZi5zY3JvbGxCb3guYm94ID0ge1xyXG4gICAgICB2OiB2YixcclxuICAgICAgaDogbmIsXHJcbiAgICB9O1xyXG4gICAgLy8vIGNhbGN1bGF0ZSBwYWdlIGFuZCBkb20gZWxlbWVudHNcclxuICAgIHNlbGYucGFnZSA9IE1hdGgubWF4KFxyXG4gICAgICAxLFxyXG4gICAgICBzZWxmLnZpc2libGVSb3dzLmxlbmd0aCAtIDMgLSBzZWxmLmF0dHJpYnV0ZXMucGFnZVVwRG93bk92ZXJsYXAsXHJcbiAgICApO1xyXG4gICAgLy8gc2V0IGNhbnZhcyBkcmF3aW5nIHJlbGF0ZWQgaXRlbXNcclxuICAgIGlmICghc2VsZi5pc0NoaWxkR3JpZCkge1xyXG4gICAgICBzZWxmLmNhbnZhcy53aWR0aCA9IHNlbGYud2lkdGggKiByYXRpbztcclxuICAgICAgc2VsZi5jYW52YXMuaGVpZ2h0ID0gc2VsZi5oZWlnaHQgKiByYXRpbztcclxuICAgICAgc2VsZi5jdHguc2NhbGUocmF0aW8sIHJhdGlvKTtcclxuICAgIH1cclxuICAgIC8vIHJlc2l6ZSBhbnkgb3BlbiBkb20gZWxlbWVudHMgKGlucHV0L3RleHRhcmVhKVxyXG4gICAgc2VsZi5yZXNpemVFZGl0SW5wdXQoKTtcclxuICAgIHNlbGYuc2Nyb2xsKHRydWUpO1xyXG4gICAgaWYgKGRyYXdBZnRlclJlc2l6ZSkge1xyXG4gICAgICBzZWxmLmRyYXcodHJ1ZSk7XHJcbiAgICB9XHJcbiAgICBzZWxmLmRpc3BhdGNoRXZlbnQoJ3Jlc2l6ZScsIHt9KTtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH07XHJcbiAgc2VsZi5zY3JvbGwgPSBmdW5jdGlvbiAoZG9udERyYXcpIHtcclxuICAgIHZhciBzID0gc2VsZi5nZXRTY2hlbWEoKSxcclxuICAgICAgbCA9IChzZWxmLnZpZXdEYXRhIHx8IFtdKS5sZW5ndGgsXHJcbiAgICAgIGNoID0gc2VsZi5zdHlsZS5jZWxsSGVpZ2h0O1xyXG4gICAgLy8gZ28gdG9vIGZhciBpbiBsZWFwcywgdGhlbiBnZXQgZm9jdXNlZFxyXG4gICAgc2VsZi5zY3JvbGxJbmRleFRvcCA9IE1hdGguZmxvb3IoXHJcbiAgICAgIGwgKiAoc2VsZi5zY3JvbGxCb3guc2Nyb2xsVG9wIC8gc2VsZi5zY3JvbGxCb3guc2Nyb2xsSGVpZ2h0KSAtIDEwMCxcclxuICAgICk7XHJcbiAgICBzZWxmLnNjcm9sbEluZGV4VG9wID0gTWF0aC5tYXgoc2VsZi5zY3JvbGxJbmRleFRvcCwgMCk7XHJcbiAgICBzZWxmLnNjcm9sbFBpeGVsVG9wID0gc2VsZi5zY3JvbGxDYWNoZS55W3NlbGYuc2Nyb2xsSW5kZXhUb3BdO1xyXG4gICAgLy8gc29tZXRpbWVzIHRoZSBncmlkIGlzIHJlbmRlcmVkIGJ1dCB0aGUgaGVpZ2h0IGlzIHplcm9cclxuICAgIGlmIChzZWxmLnNjcm9sbEJveC5zY3JvbGxIZWlnaHQgPT09IDApIHtcclxuICAgICAgc2VsZi5zY3JvbGxJbmRleFRvcCA9IDA7XHJcbiAgICB9XHJcbiAgICBzZWxmLnNjcm9sbFBpeGVsVG9wID0gMDtcclxuICAgIHNlbGYuc2Nyb2xsSW5kZXhMZWZ0ID0gc2VsZi5mcm96ZW5Db2x1bW47XHJcbiAgICBzZWxmLnNjcm9sbFBpeGVsTGVmdCA9IDA7XHJcbiAgICB3aGlsZSAoXHJcbiAgICAgIHNlbGYuc2Nyb2xsUGl4ZWxUb3AgPCBzZWxmLnNjcm9sbEJveC5zY3JvbGxUb3AgJiZcclxuICAgICAgc2VsZi5zY3JvbGxJbmRleFRvcCA8IHNlbGYudmlld0RhdGEubGVuZ3RoXHJcbiAgICApIHtcclxuICAgICAgLy8gc3RhcnQgb24gaW5kZXggKzEgc2luY2UgaW5kZXggMCB3YXMgdXNlZCBpbiBcImdvIHRvbyBmYXJcIiBzZWN0aW9uIGFib3ZlXHJcbiAgICAgIHNlbGYuc2Nyb2xsSW5kZXhUb3AgKz0gMTtcclxuICAgICAgc2VsZi5zY3JvbGxQaXhlbFRvcCA9IHNlbGYuc2Nyb2xsQ2FjaGUueVtzZWxmLnNjcm9sbEluZGV4VG9wXTtcclxuICAgIH1cclxuICAgIHdoaWxlIChcclxuICAgICAgc2VsZi5zY3JvbGxQaXhlbExlZnQgPCBzZWxmLnNjcm9sbEJveC5zY3JvbGxMZWZ0ICsgMSAmJlxyXG4gICAgICBzZWxmLnNjcm9sbEluZGV4TGVmdCA8IHMubGVuZ3RoXHJcbiAgICApIHtcclxuICAgICAgc2VsZi5zY3JvbGxQaXhlbExlZnQgPSBzZWxmLnNjcm9sbENhY2hlLnhbc2VsZi5zY3JvbGxJbmRleExlZnRdO1xyXG4gICAgICBzZWxmLnNjcm9sbEluZGV4TGVmdCArPSAxO1xyXG4gICAgfVxyXG4gICAgaWYgKHMubGVuZ3RoID4gMCkge1xyXG4gICAgICBzZWxmLnNjcm9sbEluZGV4TGVmdCA9IE1hdGgubWF4KHNlbGYuc2Nyb2xsSW5kZXhMZWZ0IC0gMSwgMCk7XHJcbiAgICAgIHNlbGYuc2Nyb2xsUGl4ZWxMZWZ0IC09IHNlbGYuZ2V0Q29sdW1uV2lkdGgoXHJcbiAgICAgICAgc2VsZi5vcmRlcnMuY29sdW1uc1tzZWxmLnNjcm9sbEluZGV4TGVmdF0sXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICBpZiAoKHNlbGYudmlld0RhdGEgfHwgW10pLmxlbmd0aCA+IDApIHtcclxuICAgICAgc2VsZi5zY3JvbGxJbmRleFRvcCA9IE1hdGgubWF4KHNlbGYuc2Nyb2xsSW5kZXhUb3AgLSAxLCAwKTtcclxuICAgICAgc2VsZi5zY3JvbGxQaXhlbFRvcCA9IE1hdGgubWF4KFxyXG4gICAgICAgIHNlbGYuc2Nyb2xsUGl4ZWxUb3AgLVxyXG4gICAgICAgICAgKHNlbGYudmlld0RhdGFbc2VsZi5zY3JvbGxJbmRleFRvcF1cclxuICAgICAgICAgICAgPyAoc2VsZi5zaXplcy5yb3dzW3NlbGYuc2Nyb2xsSW5kZXhUb3BdIHx8IGNoKSArXHJcbiAgICAgICAgICAgICAgKHNlbGYuc2l6ZXMudHJlZXNbc2VsZi5zY3JvbGxJbmRleFRvcF0gfHwgMClcclxuICAgICAgICAgICAgOiBjaCkgKlxyXG4gICAgICAgICAgICBzZWxmLnNjYWxlLFxyXG4gICAgICAgIDAsXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICBzZWxmLmVsbGlwc2lzQ2FjaGUgPSB7fTtcclxuICAgIGlmICghZG9udERyYXcpIHtcclxuICAgICAgc2VsZi5kcmF3KHRydWUpO1xyXG4gICAgfVxyXG4gICAgLy9UT0RPOiBmaWd1cmUgb3V0IHdoeSB0aGlzIGhhcyB0byBiZSBkZWxheWVkIGZvciBjaGlsZCBncmlkc1xyXG4gICAgLy9CVUc6IHdoZWVsaW5nIGV2ZW50IG9uIDNyZCBsZXZlbCBoaWVyYXJjaHkgZmFpbHMgdG8gbW92ZSBpbnB1dCBib3hcclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShzZWxmLnJlc2l6ZUVkaXRJbnB1dCk7XHJcbiAgICBzZWxmLmRpc3BhdGNoRXZlbnQoJ3Njcm9sbCcsIHtcclxuICAgICAgdG9wOiBzZWxmLnNjcm9sbEJveC5zY3JvbGxUb3AsXHJcbiAgICAgIGxlZnQ6IHNlbGYuc2Nyb2xsQm94LnNjcm9sbExlZnQsXHJcbiAgICB9KTtcclxuICB9O1xyXG4gIHNlbGYubW91c2Vtb3ZlID0gZnVuY3Rpb24gKGUsIG92ZXJyaWRlUG9zKSB7XHJcbiAgICBpZiAoc2VsZi5jb250ZXh0TWVudSB8fCBzZWxmLmlucHV0KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHNlbGYubW91c2UgPSBvdmVycmlkZVBvcyB8fCBzZWxmLmdldExheWVyUG9zKGUpO1xyXG4gICAgdmFyIGN0cmwgPVxyXG4gICAgICAgIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5IHx8IHNlbGYuYXR0cmlidXRlcy5wZXJzaXN0YW50U2VsZWN0aW9uTW9kZSkgJiZcclxuICAgICAgICAhc2VsZi5hdHRyaWJ1dGVzLnNpbmdsZVNlbGVjdGlvbk1vZGUsXHJcbiAgICAgIGksXHJcbiAgICAgIHMgPSBzZWxmLmdldFNjaGVtYSgpLFxyXG4gICAgICBkcmFnQm91bmRzLFxyXG4gICAgICBzQm91bmRzLFxyXG4gICAgICB4ID0gc2VsZi5tb3VzZS54LFxyXG4gICAgICB5ID0gc2VsZi5tb3VzZS55LFxyXG4gICAgICBjZWxsID0gc2VsZi5nZXRDZWxsQXQoeCwgeSksXHJcbiAgICAgIGRlbHRhLFxyXG4gICAgICBldiA9IHsgTmF0aXZlRXZlbnQ6IGUsIGNlbGw6IGNlbGwsIHg6IHgsIHk6IHkgfSxcclxuICAgICAgcHJldmlvdXNDZWxsID0gc2VsZi5jdXJyZW50Q2VsbDtcclxuICAgIGNsZWFyVGltZW91dChzZWxmLnNjcm9sbFRpbWVyKTtcclxuICAgIGlmICghc2VsZi5pc0luR3JpZCh7IHg6IHgsIHk6IHkgfSkpIHtcclxuICAgICAgc2VsZi5oYXNGb2N1cyA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKHNlbGYuZGlzcGF0Y2hFdmVudCgnbW91c2Vtb3ZlJywgZXYpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChjZWxsICYmIHNlbGYuY3VycmVudENlbGwpIHtcclxuICAgICAgc2VsZi5yb3dCb3VuZGFyeUNyb3NzZWQgPSBzZWxmLmN1cnJlbnRDZWxsLnJvd0luZGV4ICE9PSBjZWxsLnJvd0luZGV4O1xyXG4gICAgICBzZWxmLmNvbHVtbkJvdW5kYXJ5Q3Jvc3NlZCA9XHJcbiAgICAgICAgc2VsZi5jdXJyZW50Q2VsbC5jb2x1bW5JbmRleCAhPT0gY2VsbC5jb2x1bW5JbmRleDtcclxuICAgICAgc2VsZi5jZWxsQm91bmRhcnlDcm9zc2VkID1cclxuICAgICAgICBzZWxmLnJvd0JvdW5kYXJ5Q3Jvc3NlZCB8fCBzZWxmLmNvbHVtbkJvdW5kYXJ5Q3Jvc3NlZDtcclxuICAgICAgWydyb3cnLCAnY29sdW1uJywgJ2NlbGwnXS5mb3JFYWNoKGZ1bmN0aW9uIChwcmVmaXgpIHtcclxuICAgICAgICBpZiAoc2VsZltwcmVmaXggKyAnQm91bmRhcnlDcm9zc2VkJ10pIHtcclxuICAgICAgICAgIGV2LmNlbGwgPSBwcmV2aW91c0NlbGw7XHJcbiAgICAgICAgICBzZWxmLmRpc3BhdGNoRXZlbnQocHJlZml4ICsgJ21vdXNlb3V0JywgZXYpO1xyXG4gICAgICAgICAgZXYuY2VsbCA9IGNlbGw7XHJcbiAgICAgICAgICBzZWxmLmRpc3BhdGNoRXZlbnQocHJlZml4ICsgJ21vdXNlb3ZlcicsIGV2KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgc2VsZi5jdXJyZW50Q2VsbCA9IGNlbGw7XHJcbiAgICBpZiAoIXNlbGYuaGFzRm9jdXMpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgc2VsZi5ob3ZlcnMgPSB7fTtcclxuICAgIGlmIChcclxuICAgICAgIXNlbGYuZHJhZ2dpbmdJdGVtICYmXHJcbiAgICAgIGNlbGwgJiZcclxuICAgICAgc2VsZi5zY3JvbGxNb2Rlcy5pbmRleE9mKGNlbGwuY29udGV4dCkgPT09IC0xXHJcbiAgICApIHtcclxuICAgICAgc2VsZi5kcmFnSXRlbSA9IGNlbGw7XHJcbiAgICAgIHNlbGYuZHJhZ01vZGUgPSBjZWxsLmRyYWdDb250ZXh0O1xyXG4gICAgICBzZWxmLmN1cnNvciA9IGNlbGwuY29udGV4dDtcclxuICAgICAgaWYgKGNlbGwuY29udGV4dCA9PT0gJ2NlbGwnKSB7XHJcbiAgICAgICAgc2VsZi5jdXJzb3IgPSAnZGVmYXVsdCc7XHJcbiAgICAgICAgc2VsZi5ob3ZlcnMgPSB7XHJcbiAgICAgICAgICByb3dJbmRleDogY2VsbC5yb3dJbmRleCxcclxuICAgICAgICAgIGNvbHVtbkluZGV4OiBjZWxsLmNvbHVtbkluZGV4LFxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgICAgaWYgKChzZWxmLnNlbGVjdGluZyB8fCBzZWxmLnJlb3JkZXJPYmplY3QpICYmIGNlbGwuY29udGV4dCA9PT0gJ2NlbGwnKSB7XHJcbiAgICAgICAgZGVsdGEgPSB7XHJcbiAgICAgICAgICB4OiBNYXRoLmFicyhzZWxmLmRyYWdTdGFydC54IC0geCksXHJcbiAgICAgICAgICB5OiBNYXRoLmFicyhzZWxmLmRyYWdTdGFydC55IC0geSksXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoc2VsZi5kcmFnU3RhcnRPYmplY3QuY29sdW1uSW5kZXggIT09IC0xICYmIGUuc2hpZnRLZXkpIHtcclxuICAgICAgICAgIHNlbGYuZHJhZ1N0YXJ0T2JqZWN0ID0ge1xyXG4gICAgICAgICAgICByb3dJbmRleDogc2VsZi5hY3RpdmVDZWxsLnJvd0luZGV4LFxyXG4gICAgICAgICAgICBjb2x1bW5JbmRleDogc2VsZi5hY3RpdmVDZWxsLmNvbHVtbkluZGV4LFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZHJhZ0JvdW5kcyA9IHtcclxuICAgICAgICAgIHRvcDogTWF0aC5taW4oc2VsZi5kcmFnU3RhcnRPYmplY3Qucm93SW5kZXgsIGNlbGwucm93SW5kZXgpLFxyXG4gICAgICAgICAgbGVmdDogTWF0aC5taW4oc2VsZi5kcmFnU3RhcnRPYmplY3QuY29sdW1uSW5kZXgsIGNlbGwuY29sdW1uSW5kZXgpLFxyXG4gICAgICAgICAgYm90dG9tOiBNYXRoLm1heChzZWxmLmRyYWdTdGFydE9iamVjdC5yb3dJbmRleCwgY2VsbC5yb3dJbmRleCksXHJcbiAgICAgICAgICByaWdodDogTWF0aC5tYXgoc2VsZi5kcmFnU3RhcnRPYmplY3QuY29sdW1uSW5kZXgsIGNlbGwuY29sdW1uSW5kZXgpLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKHNlbGYuZHJhZ1N0YXJ0T2JqZWN0LmNvbHVtbkluZGV4ID09PSAtMSkge1xyXG4gICAgICAgICAgc0JvdW5kcyA9IHNlbGYuZ2V0U2VsZWN0aW9uQm91bmRzKCk7XHJcbiAgICAgICAgICBkcmFnQm91bmRzLmxlZnQgPSAtMTtcclxuICAgICAgICAgIGRyYWdCb3VuZHMucmlnaHQgPSBzLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICBkcmFnQm91bmRzLnRvcCA9IE1hdGgubWluKHNCb3VuZHMudG9wLCBjZWxsLnJvd0luZGV4KTtcclxuICAgICAgICAgIGRyYWdCb3VuZHMuYm90dG9tID0gTWF0aC5tYXgoc0JvdW5kcy5ib3R0b20sIGNlbGwucm93SW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICBzZWxmLmRyYWdTdGFydE9iamVjdC5yb3dJbmRleCAhPT0gY2VsbC5yb3dJbmRleCB8fFxyXG4gICAgICAgICAgc2VsZi5kcmFnU3RhcnRPYmplY3QuY29sdW1uSW5kZXggIT09IGNlbGwuY29sdW1uSW5kZXhcclxuICAgICAgICApIHtcclxuICAgICAgICAgIHNlbGYuaWdub3JlTmV4dENsaWNrID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgc2VsZi5jZWxsQm91bmRhcnlDcm9zc2VkIHx8XHJcbiAgICAgICAgICAoZGVsdGEueCA9PT0gMCAmJiBkZWx0YS55ID09PSAwKSB8fFxyXG4gICAgICAgICAgc2VsZi5hdHRyaWJ1dGVzLnNlbGVjdGlvbk1vZGUgPT09ICdyb3cnXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIChzZWxmLmF0dHJpYnV0ZXMuc2VsZWN0aW9uTW9kZSA9PT0gJ3JvdycgfHxcclxuICAgICAgICAgICAgICBzZWxmLmRyYWdTdGFydE9iamVjdC5jb2x1bW5JbmRleCA9PT0gLTEpICYmXHJcbiAgICAgICAgICAgIHNlbGYucm93Qm91bmRhcnlDcm9zc2VkXHJcbiAgICAgICAgICApIHtcclxuICAgICAgICAgICAgc2VsZi5zZWxlY3RSb3coY2VsbC5yb3dJbmRleCwgY3RybCwgbnVsbCwgdHJ1ZSk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHNlbGYuYXR0cmlidXRlcy5zZWxlY3Rpb25Nb2RlICE9PSAncm93Jykge1xyXG4gICAgICAgICAgICBpZiAoIXNlbGYuZHJhZ0FkZFRvU2VsZWN0aW9uICYmIGNlbGwucm93SW5kZXggIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgIHNlbGYuc2VsZWN0aW9uc1tjZWxsLnJvd0luZGV4XSAmJlxyXG4gICAgICAgICAgICAgICAgc2VsZi5zZWxlY3Rpb25zW2NlbGwucm93SW5kZXhdLmluZGV4T2YoY2VsbC5jb2x1bW5JbmRleCkgIT09IC0xXHJcbiAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnNlbGVjdGlvbnNbY2VsbC5yb3dJbmRleF0uc3BsaWNlKFxyXG4gICAgICAgICAgICAgICAgICBzZWxmLnNlbGVjdGlvbnNbY2VsbC5yb3dJbmRleF0uaW5kZXhPZihjZWxsLmNvbHVtbkluZGV4KSxcclxuICAgICAgICAgICAgICAgICAgMSxcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHNlbGYuc2VsZWN0aW9uc1tjZWxsLnJvd0luZGV4XSA9XHJcbiAgICAgICAgICAgICAgICBzZWxmLnNlbGVjdGlvbnNbY2VsbC5yb3dJbmRleF0gfHwgW107XHJcbiAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgc2VsZi5zZWxlY3Rpb25zW2NlbGwucm93SW5kZXhdLmluZGV4T2YoY2VsbC5jb2x1bW5JbmRleCkgPT09IC0xXHJcbiAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnNlbGVjdGlvbnNbY2VsbC5yb3dJbmRleF0ucHVzaChjZWxsLmNvbHVtbkluZGV4KTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBldmVudCA9IHtcclxuICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uczogc2VsZi5zZWxlY3Rpb25zLFxyXG4gICAgICAgICAgICAgICAgICBzZWxlY3RlZERhdGE6IHNlbGYuZ2V0U2VsZWN0ZWREYXRhKCksXHJcbiAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbkJvdW5kczogc2VsZi5nZXRTZWxlY3Rpb25Cb3VuZHMoKSxcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZi5kaXNwYXRjaEV2ZW50KCdzZWxlY3Rpb25jaGFuZ2VkJywgZXZlbnQpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAoIXNlbGYuc2VsZWN0aW9uQm91bmRzIHx8XHJcbiAgICAgICAgICAgIGRyYWdCb3VuZHMudG9wICE9PSBzZWxmLnNlbGVjdGlvbkJvdW5kcy50b3AgfHxcclxuICAgICAgICAgICAgZHJhZ0JvdW5kcy5sZWZ0ICE9PSBzZWxmLnNlbGVjdGlvbkJvdW5kcy5sZWZ0IHx8XHJcbiAgICAgICAgICAgIGRyYWdCb3VuZHMuYm90dG9tICE9PSBzZWxmLnNlbGVjdGlvbkJvdW5kcy5ib3R0b20gfHxcclxuICAgICAgICAgICAgZHJhZ0JvdW5kcy5yaWdodCAhPT0gc2VsZi5zZWxlY3Rpb25Cb3VuZHMucmlnaHQpICYmXHJcbiAgICAgICAgICAhY3RybFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgc2VsZi5zZWxlY3Rpb25zID0gW107XHJcbiAgICAgICAgICBzQm91bmRzID0gZHJhZ0JvdW5kcztcclxuICAgICAgICAgIGlmIChzZWxmLmF0dHJpYnV0ZXMuc2VsZWN0aW9uTW9kZSA9PT0gJ3JvdycpIHtcclxuICAgICAgICAgICAgZm9yIChpID0gc0JvdW5kcy50b3A7IGkgPD0gc0JvdW5kcy5ib3R0b207IGkgKz0gMSkge1xyXG4gICAgICAgICAgICAgIHNlbGYuc2VsZWN0Um93KGksIHRydWUsIG51bGwsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGRyYWdCb3VuZHMudG9wICE9PSAtMSkge1xyXG4gICAgICAgICAgICBzZWxmLnNlbGVjdEFyZWEoc0JvdW5kcywgdHJ1ZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNlbGYuYXV0b1Njcm9sbFpvbmUoZSwgeCwgeSwgY3RybCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHNlbGYuY2VsbEJvdW5kYXJ5Q3Jvc3NlZCA9IGZhbHNlO1xyXG4gICAgc2VsZi5yb3dCb3VuZGFyeUNyb3NzZWQgPSBmYWxzZTtcclxuICAgIHNlbGYuY29sdW1uQm91bmRhcnlDcm9zc2VkID0gZmFsc2U7XHJcbiAgICBzZWxmLmRyYXcodHJ1ZSk7XHJcbiAgfTtcclxuICBzZWxmLmNsaWNrID0gZnVuY3Rpb24gKGUsIG92ZXJyaWRlUG9zKSB7XHJcbiAgICB2YXIgaSxcclxuICAgICAgc3RhcnRpbmdCb3VuZHMgPSBKU09OLnN0cmluZ2lmeShzZWxmLmdldFNlbGVjdGlvbkJvdW5kcygpKSxcclxuICAgICAgY3RybCA9XHJcbiAgICAgICAgKGUuY3RybEtleSB8fCBlLm1ldGFLZXkgfHwgc2VsZi5hdHRyaWJ1dGVzLnBlcnNpc3RhbnRTZWxlY3Rpb25Nb2RlKSAmJlxyXG4gICAgICAgICFzZWxmLmF0dHJpYnV0ZXMuc2luZ2xlU2VsZWN0aW9uTW9kZSxcclxuICAgICAgcG9zID0gb3ZlcnJpZGVQb3MgfHwgc2VsZi5nZXRMYXllclBvcyhlKTtcclxuICAgIHNlbGYuY3VycmVudENlbGwgPSBzZWxmLmdldENlbGxBdChwb3MueCwgcG9zLnkpO1xyXG4gICAgaWYgKHNlbGYuY3VycmVudENlbGwuZ3JpZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGNoZWNrU2VsZWN0aW9uQ2hhbmdlKCkge1xyXG4gICAgICB2YXIgZXYsXHJcbiAgICAgICAgc2IgPSBzZWxmLmdldFNlbGVjdGlvbkJvdW5kcygpO1xyXG4gICAgICBpZiAoc3RhcnRpbmdCb3VuZHMgPT09IEpTT04uc3RyaW5naWZ5KHNiKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBldiA9IHtcclxuICAgICAgICBzZWxlY3Rpb25zOiBzZWxmLnNlbGVjdGlvbnMsXHJcbiAgICAgICAgc2VsZWN0aW9uQm91bmRzOiBzZWxmLmdldFNlbGVjdGlvbkJvdW5kcygpLFxyXG4gICAgICB9O1xyXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXYsICdzZWxlY3RlZERhdGEnLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICByZXR1cm4gc2VsZi5nZXRTZWxlY3RlZERhdGEoKTtcclxuICAgICAgICB9LFxyXG4gICAgICB9KTtcclxuICAgICAgc2VsZi5kaXNwYXRjaEV2ZW50KCdzZWxlY3Rpb25jaGFuZ2VkJywgZXYpO1xyXG4gICAgfVxyXG4gICAgaWYgKHNlbGYuaW5wdXQpIHtcclxuICAgICAgc2VsZi5lbmRFZGl0KCk7XHJcbiAgICB9XHJcbiAgICBpZiAoc2VsZi5pZ25vcmVOZXh0Q2xpY2spIHtcclxuICAgICAgc2VsZi5pZ25vcmVOZXh0Q2xpY2sgPSBmYWxzZTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaSA9IHNlbGYuY3VycmVudENlbGw7XHJcbiAgICBpZiAoXHJcbiAgICAgIHNlbGYuZGlzcGF0Y2hFdmVudCgnY2xpY2snLCB7IE5hdGl2ZUV2ZW50OiBlLCBjZWxsOiBzZWxmLmN1cnJlbnRDZWxsIH0pXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKCFzZWxmLmhhc0ZvY3VzKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChcclxuICAgICAgWydyb3dIZWFkZXJDZWxsJywgJ2NvbHVtbkhlYWRlckNlbGwnXS5pbmRleE9mKHNlbGYuY3VycmVudENlbGwuc3R5bGUpID09PVxyXG4gICAgICAgIC0xICYmXHJcbiAgICAgICFjdHJsXHJcbiAgICApIHtcclxuICAgICAgc2VsZi5zZXRBY3RpdmVDZWxsKGkuY29sdW1uSW5kZXgsIGkucm93SW5kZXgpO1xyXG4gICAgfVxyXG4gICAgaWYgKHNlbGYuY3VycmVudENlbGwuY29udGV4dCA9PT0gJ2NlbGwnKSB7XHJcbiAgICAgIGlmIChzZWxmLmN1cnJlbnRDZWxsLnN0eWxlID09PSAnY29ybmVyQ2VsbCcpIHtcclxuICAgICAgICBzZWxmLnNlbGVjdEFsbCgpO1xyXG4gICAgICAgIHNlbGYuZHJhdygpO1xyXG4gICAgICAgIGNoZWNrU2VsZWN0aW9uQ2hhbmdlKCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChzZWxmLmN1cnJlbnRDZWxsLnN0eWxlID09PSAnY29sdW1uSGVhZGVyQ2VsbCcpIHtcclxuICAgICAgICBpZiAoc2VsZi5hdHRyaWJ1dGVzLmNvbHVtbkhlYWRlckNsaWNrQmVoYXZpb3IgPT09ICdzb3J0Jykge1xyXG4gICAgICAgICAgaWYgKHNlbGYub3JkZXJCeSA9PT0gaS5oZWFkZXIubmFtZSkge1xyXG4gICAgICAgICAgICBzZWxmLm9yZGVyRGlyZWN0aW9uID1cclxuICAgICAgICAgICAgICBzZWxmLm9yZGVyRGlyZWN0aW9uID09PSAnYXNjJyA/ICdkZXNjJyA6ICdhc2MnO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc2VsZi5vcmRlckRpcmVjdGlvbiA9ICdhc2MnO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgc2VsZi5vcmRlcihpLmhlYWRlci5uYW1lLCBzZWxmLm9yZGVyRGlyZWN0aW9uKTtcclxuICAgICAgICAgIGNoZWNrU2VsZWN0aW9uQ2hhbmdlKCk7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzZWxmLmF0dHJpYnV0ZXMuY29sdW1uSGVhZGVyQ2xpY2tCZWhhdmlvciA9PT0gJ3NlbGVjdCcpIHtcclxuICAgICAgICAgIHNlbGYuc2VsZWN0Q29sdW1uKGkuaGVhZGVyLmluZGV4LCBjdHJsLCBlLnNoaWZ0S2V5KTtcclxuICAgICAgICAgIHNlbGYuZHJhdygpO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBzZWxmLnNlbGVjdGlvbnNbaS5yb3dJbmRleF0gPSBzZWxmLnNlbGVjdGlvbnNbaS5yb3dJbmRleF0gfHwgW107XHJcbiAgICAgIGlmIChcclxuICAgICAgICBzZWxmLmF0dHJpYnV0ZXMuc2VsZWN0aW9uTW9kZSA9PT0gJ3JvdycgfHxcclxuICAgICAgICBzZWxmLmN1cnJlbnRDZWxsLnN0eWxlID09PSAncm93SGVhZGVyQ2VsbCdcclxuICAgICAgKSB7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgc2VsZi5jdXJyZW50Q2VsbC5zdHlsZSA9PT0gJ3Jvd0hlYWRlckNlbGwnICYmXHJcbiAgICAgICAgICBzZWxmLmF0dHJpYnV0ZXMudHJlZSAmJlxyXG4gICAgICAgICAgcG9zLnggPiAwICYmXHJcbiAgICAgICAgICBwb3MueCAtIHNlbGYuY3VycmVudENlbGwueCA8XHJcbiAgICAgICAgICAgIHNlbGYuc3R5bGUudHJlZUFycm93V2lkdGggK1xyXG4gICAgICAgICAgICAgIHNlbGYuc3R5bGUudHJlZUFycm93TWFyZ2luTGVmdCArXHJcbiAgICAgICAgICAgICAgc2VsZi5zdHlsZS50cmVlQXJyb3dNYXJnaW5SaWdodCArXHJcbiAgICAgICAgICAgICAgc2VsZi5zdHlsZS50cmVlQXJyb3dDbGlja1JhZGl1cyAmJlxyXG4gICAgICAgICAgcG9zLnkgLSBzZWxmLmN1cnJlbnRDZWxsLnkgPFxyXG4gICAgICAgICAgICBzZWxmLnN0eWxlLnRyZWVBcnJvd0hlaWdodCArXHJcbiAgICAgICAgICAgICAgc2VsZi5zdHlsZS50cmVlQXJyb3dNYXJnaW5Ub3AgK1xyXG4gICAgICAgICAgICAgIHNlbGYuc3R5bGUudHJlZUFycm93Q2xpY2tSYWRpdXMgJiZcclxuICAgICAgICAgIHBvcy55ID4gMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgc2VsZi50b2dnbGVUcmVlKGkucm93SW5kZXgpO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAoZS5zaGlmdEtleSAmJiAhY3RybCkge1xyXG4gICAgICAgIHNlbGYuc2VsZWN0aW9uQm91bmRzID0gc2VsZi5nZXRTZWxlY3Rpb25Cb3VuZHMoKTtcclxuICAgICAgICBzZWxmLnNlbGVjdEFyZWEodW5kZWZpbmVkLCBmYWxzZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGNoZWNrU2VsZWN0aW9uQ2hhbmdlKCk7XHJcbiAgICBzZWxmLmRyYXcodHJ1ZSk7XHJcbiAgfTtcclxuICBzZWxmLmRyYWdSZXNpemVDb2x1bW4gPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgdmFyIHBvcywgeCwgeTtcclxuICAgIHBvcyA9IHNlbGYuZ2V0TGF5ZXJQb3MoZSk7XHJcbiAgICB4ID0gc2VsZi5yZXNpemluZ1N0YXJ0aW5nV2lkdGggKyBwb3MueCAtIHNlbGYuZHJhZ1N0YXJ0Lng7XHJcbiAgICB5ID0gc2VsZi5yZXNpemluZ1N0YXJ0aW5nSGVpZ2h0ICsgcG9zLnkgLSBzZWxmLmRyYWdTdGFydC55O1xyXG4gICAgaWYgKHggPCBzZWxmLnN0eWxlLm1pbkNvbHVtbldpZHRoKSB7XHJcbiAgICAgIHggPSBzZWxmLnN0eWxlLm1pbkNvbHVtbldpZHRoO1xyXG4gICAgfVxyXG4gICAgaWYgKHkgPCBzZWxmLnN0eWxlLm1pblJvd0hlaWdodCkge1xyXG4gICAgICB5ID0gc2VsZi5zdHlsZS5taW5Sb3dIZWlnaHQ7XHJcbiAgICB9XHJcbiAgICBpZiAoXHJcbiAgICAgIHNlbGYuZGlzcGF0Y2hFdmVudCgncmVzaXplY29sdW1uJywge1xyXG4gICAgICAgIHg6IHgsXHJcbiAgICAgICAgeTogeSxcclxuICAgICAgICBkcmFnZ2luZ0l0ZW06IHNlbGYuZHJhZ2dpbmdJdGVtLFxyXG4gICAgICB9KVxyXG4gICAgKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmIChcclxuICAgICAgc2VsZi5zY3JvbGxCb3guc2Nyb2xsTGVmdCA+XHJcbiAgICAgICAgc2VsZi5zY3JvbGxCb3guc2Nyb2xsV2lkdGggLSBzZWxmLmF0dHJpYnV0ZXMucmVzaXplU2Nyb2xsWm9uZSAmJlxyXG4gICAgICBzZWxmLmRyYWdNb2RlID09PSAnZXctcmVzaXplJ1xyXG4gICAgKSB7XHJcbiAgICAgIHNlbGYucmVzaXplKHRydWUpO1xyXG4gICAgICBzZWxmLnNjcm9sbEJveC5zY3JvbGxMZWZ0ICs9IHg7XHJcbiAgICB9XHJcbiAgICBpZiAoc2VsZi5kcmFnTW9kZSA9PT0gJ2V3LXJlc2l6ZScpIHtcclxuICAgICAgc2VsZi5zaXplcy5jb2x1bW5zW1xyXG4gICAgICAgIHNlbGYuZHJhZ2dpbmdJdGVtLmhlYWRlci5zdHlsZSA9PT0gJ3Jvd0hlYWRlckNlbGwnXHJcbiAgICAgICAgICA/ICdjb3JuZXJDZWxsJ1xyXG4gICAgICAgICAgOiBzZWxmLmRyYWdnaW5nSXRlbS5zb3J0Q29sdW1uSW5kZXhcclxuICAgICAgXSA9IHg7XHJcbiAgICAgIGlmIChcclxuICAgICAgICBbJ3Jvd0hlYWRlckNlbGwnLCAnY29ybmVyQ2VsbCddLmluZGV4T2YoXHJcbiAgICAgICAgICBzZWxmLmRyYWdnaW5nSXRlbS5oZWFkZXIuc3R5bGUsXHJcbiAgICAgICAgKSAhPT0gLTFcclxuICAgICAgKSB7XHJcbiAgICAgICAgc2VsZi5yZXNpemUodHJ1ZSk7XHJcbiAgICAgIH1cclxuICAgICAgc2VsZi5yZXNpemVDaGlsZEdyaWRzKCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChzZWxmLmRyYWdNb2RlID09PSAnbnMtcmVzaXplJykge1xyXG4gICAgICBpZiAoc2VsZi5kcmFnZ2luZ0l0ZW0ucm93T3Blbikge1xyXG4gICAgICAgIHNlbGYuc2l6ZXMudHJlZXNbc2VsZi5kcmFnZ2luZ0l0ZW0ucm93SW5kZXhdID0geTtcclxuICAgICAgfSBlbHNlIGlmIChzZWxmLmF0dHJpYnV0ZXMuZ2xvYmFsUm93UmVzaXplKSB7XHJcbiAgICAgICAgc2VsZi5zdHlsZS5jZWxsSGVpZ2h0ID0geTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzZWxmLnNpemVzLnJvd3Nbc2VsZi5kcmFnZ2luZ0l0ZW0ucm93SW5kZXhdID0geTtcclxuICAgICAgfVxyXG4gICAgICBzZWxmLmRpc3BhdGNoRXZlbnQoJ3Jlc2l6ZXJvdycsIHsgcm93OiB5IH0pO1xyXG4gICAgICBzZWxmLnJlc2l6ZUNoaWxkR3JpZHMoKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgc2VsZi5lbGxpcHNpc0NhY2hlID0ge307XHJcbiAgfTtcclxuICBzZWxmLnN0b3BEcmFnUmVzaXplID0gZnVuY3Rpb24gKCkge1xyXG4gICAgc2VsZi5yZXNpemUoKTtcclxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcclxuICAgICAgJ21vdXNlbW92ZScsXHJcbiAgICAgIHNlbGYuZHJhZ1Jlc2l6ZUNvbHVtbixcclxuICAgICAgZmFsc2UsXHJcbiAgICApO1xyXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgc2VsZi5zdG9wRHJhZ1Jlc2l6ZSwgZmFsc2UpO1xyXG4gICAgc2VsZi5zZXRTdG9yYWdlRGF0YSgpO1xyXG4gICAgc2VsZi5kcmF3KHRydWUpO1xyXG4gICAgc2VsZi5pZ25vcmVOZXh0Q2xpY2sgPSB0cnVlO1xyXG4gIH07XHJcbiAgc2VsZi5zY3JvbGxHcmlkID0gZnVuY3Rpb24gKGUpIHtcclxuICAgIHZhciBwb3MgPSBzZWxmLmdldExheWVyUG9zKGUpO1xyXG4gICAgaWYgKFxyXG4gICAgICBzZWxmLmF0dHJpYnV0ZXMuc2Nyb2xsUG9pbnRlckxvY2sgJiZcclxuICAgICAgc2VsZi5wb2ludGVyTG9ja1Bvc2l0aW9uICYmXHJcbiAgICAgIFsnaG9yaXpvbnRhbC1zY3JvbGwtYm94JywgJ3ZlcnRpY2FsLXNjcm9sbC1ib3gnXS5pbmRleE9mKFxyXG4gICAgICAgIHNlbGYuc2Nyb2xsU3RhcnRNb2RlLFxyXG4gICAgICApICE9PSAtMVxyXG4gICAgKSB7XHJcbiAgICAgIHNlbGYucG9pbnRlckxvY2tQb3NpdGlvbi54ICs9IGUubW92ZW1lbnRYO1xyXG4gICAgICBzZWxmLnBvaW50ZXJMb2NrUG9zaXRpb24ueSArPSBlLm1vdmVtZW50WTtcclxuICAgICAgc2VsZi5wb2ludGVyTG9ja1Bvc2l0aW9uLnggPSBNYXRoLm1pbihcclxuICAgICAgICBzZWxmLndpZHRoIC0gc2VsZi5zdHlsZS5zY3JvbGxCYXJXaWR0aCxcclxuICAgICAgICBNYXRoLm1heCgwLCBzZWxmLnBvaW50ZXJMb2NrUG9zaXRpb24ueCksXHJcbiAgICAgICk7XHJcbiAgICAgIHNlbGYucG9pbnRlckxvY2tQb3NpdGlvbi55ID0gTWF0aC5taW4oXHJcbiAgICAgICAgc2VsZi5oZWlnaHQgLSBzZWxmLnN0eWxlLnNjcm9sbEJhcldpZHRoLFxyXG4gICAgICAgIE1hdGgubWF4KDAsIHNlbGYucG9pbnRlckxvY2tQb3NpdGlvbi55KSxcclxuICAgICAgKTtcclxuICAgICAgcG9zID0gc2VsZi5wb2ludGVyTG9ja1Bvc2l0aW9uO1xyXG4gICAgfVxyXG4gICAgc2VsZi5zY3JvbGxNb2RlID0gc2VsZi5nZXRDZWxsQXQocG9zLngsIHBvcy55KS5jb250ZXh0O1xyXG4gICAgaWYgKFxyXG4gICAgICBzZWxmLnNjcm9sbE1vZGUgPT09ICdob3Jpem9udGFsLXNjcm9sbC1ib3gnICYmXHJcbiAgICAgIHNlbGYuc2Nyb2xsU3RhcnRNb2RlICE9PSAnaG9yaXpvbnRhbC1zY3JvbGwtYm94J1xyXG4gICAgKSB7XHJcbiAgICAgIHNlbGYuc2Nyb2xsU3RhcnRNb2RlID0gJ2hvcml6b250YWwtc2Nyb2xsLWJveCc7XHJcbiAgICAgIHNlbGYuZHJhZ1N0YXJ0ID0gcG9zO1xyXG4gICAgICBzZWxmLnNjcm9sbFN0YXJ0LmxlZnQgPSBzZWxmLnNjcm9sbEJveC5zY3JvbGxMZWZ0O1xyXG4gICAgICBjbGVhclRpbWVvdXQoc2VsZi5zY3JvbGxUaW1lcik7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChcclxuICAgICAgc2VsZi5zY3JvbGxNb2RlID09PSAndmVydGljYWwtc2Nyb2xsLWJveCcgJiZcclxuICAgICAgc2VsZi5zY3JvbGxTdGFydE1vZGUgIT09ICd2ZXJ0aWNhbC1zY3JvbGwtYm94J1xyXG4gICAgKSB7XHJcbiAgICAgIHNlbGYuc2Nyb2xsU3RhcnRNb2RlID0gJ3ZlcnRpY2FsLXNjcm9sbC1ib3gnO1xyXG4gICAgICBzZWxmLmRyYWdTdGFydCA9IHBvcztcclxuICAgICAgc2VsZi5zY3JvbGxTdGFydC50b3AgPSBzZWxmLnNjcm9sbEJveC5zY3JvbGxUb3A7XHJcbiAgICAgIGNsZWFyVGltZW91dChzZWxmLnNjcm9sbFRpbWVyKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKFxyXG4gICAgICBzZWxmLnNjcm9sbFN0YXJ0TW9kZSA9PT0gJ3ZlcnRpY2FsLXNjcm9sbC1ib3gnICYmXHJcbiAgICAgIHNlbGYuc2Nyb2xsTW9kZSAhPT0gJ3ZlcnRpY2FsLXNjcm9sbC1ib3gnXHJcbiAgICApIHtcclxuICAgICAgc2VsZi5zY3JvbGxNb2RlID0gJ3ZlcnRpY2FsLXNjcm9sbC1ib3gnO1xyXG4gICAgfVxyXG4gICAgaWYgKFxyXG4gICAgICBzZWxmLnNjcm9sbFN0YXJ0TW9kZSA9PT0gJ2hvcml6b250YWwtc2Nyb2xsLWJveCcgJiZcclxuICAgICAgc2VsZi5zY3JvbGxNb2RlICE9PSAnaG9yaXpvbnRhbC1zY3JvbGwtYm94J1xyXG4gICAgKSB7XHJcbiAgICAgIHNlbGYuc2Nyb2xsTW9kZSA9ICdob3Jpem9udGFsLXNjcm9sbC1ib3gnO1xyXG4gICAgfVxyXG4gICAgY2xlYXJUaW1lb3V0KHNlbGYuc2Nyb2xsVGltZXIpO1xyXG4gICAgaWYgKHNlbGYuc2Nyb2xsTW9kZXMuaW5kZXhPZihzZWxmLnNjcm9sbE1vZGUpID09PSAtMSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoc2VsZi5zY3JvbGxNb2RlID09PSAndmVydGljYWwtc2Nyb2xsLWJveCcpIHtcclxuICAgICAgc2VsZi5zY3JvbGxCb3guc2Nyb2xsVG9wID1cclxuICAgICAgICBzZWxmLnNjcm9sbFN0YXJ0LnRvcCArXHJcbiAgICAgICAgKHBvcy55IC0gc2VsZi5kcmFnU3RhcnQueSkgLyBzZWxmLnNjcm9sbEJveC5oZWlnaHRCb3hSYXRpbztcclxuICAgIH0gZWxzZSBpZiAoc2VsZi5zY3JvbGxNb2RlID09PSAndmVydGljYWwtc2Nyb2xsLXRvcCcpIHtcclxuICAgICAgc2VsZi5zY3JvbGxCb3guc2Nyb2xsVG9wIC09IHNlbGYucGFnZSAqIHNlbGYuc3R5bGUuY2VsbEhlaWdodDtcclxuICAgICAgc2VsZi5zY3JvbGxUaW1lciA9IHNldFRpbWVvdXQoXHJcbiAgICAgICAgc2VsZi5zY3JvbGxHcmlkLFxyXG4gICAgICAgIHNlbGYuYXR0cmlidXRlcy5zY3JvbGxSZXBlYXRSYXRlLFxyXG4gICAgICAgIGUsXHJcbiAgICAgICk7XHJcbiAgICB9IGVsc2UgaWYgKHNlbGYuc2Nyb2xsTW9kZSA9PT0gJ3ZlcnRpY2FsLXNjcm9sbC1ib3R0b20nKSB7XHJcbiAgICAgIHNlbGYuc2Nyb2xsQm94LnNjcm9sbFRvcCArPSBzZWxmLnBhZ2UgKiBzZWxmLnN0eWxlLmNlbGxIZWlnaHQ7XHJcbiAgICAgIHNlbGYuc2Nyb2xsVGltZXIgPSBzZXRUaW1lb3V0KFxyXG4gICAgICAgIHNlbGYuc2Nyb2xsR3JpZCxcclxuICAgICAgICBzZWxmLmF0dHJpYnV0ZXMuc2Nyb2xsUmVwZWF0UmF0ZSxcclxuICAgICAgICBlLFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgaWYgKHNlbGYuc2Nyb2xsTW9kZSA9PT0gJ2hvcml6b250YWwtc2Nyb2xsLWJveCcpIHtcclxuICAgICAgc2VsZi5zY3JvbGxCb3guc2Nyb2xsTGVmdCA9XHJcbiAgICAgICAgc2VsZi5zY3JvbGxTdGFydC5sZWZ0ICtcclxuICAgICAgICAocG9zLnggLSBzZWxmLmRyYWdTdGFydC54KSAvIHNlbGYuc2Nyb2xsQm94LndpZHRoQm94UmF0aW87XHJcbiAgICB9IGVsc2UgaWYgKHNlbGYuc2Nyb2xsTW9kZSA9PT0gJ2hvcml6b250YWwtc2Nyb2xsLXJpZ2h0Jykge1xyXG4gICAgICBzZWxmLnNjcm9sbEJveC5zY3JvbGxMZWZ0ICs9IHNlbGYuYXR0cmlidXRlcy5zZWxlY3Rpb25TY3JvbGxJbmNyZW1lbnQ7XHJcbiAgICAgIHNlbGYuc2Nyb2xsVGltZXIgPSBzZXRUaW1lb3V0KFxyXG4gICAgICAgIHNlbGYuc2Nyb2xsR3JpZCxcclxuICAgICAgICBzZWxmLmF0dHJpYnV0ZXMuc2Nyb2xsUmVwZWF0UmF0ZSxcclxuICAgICAgICBlLFxyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIGlmIChzZWxmLnNjcm9sbE1vZGUgPT09ICdob3Jpem9udGFsLXNjcm9sbC1sZWZ0Jykge1xyXG4gICAgICBzZWxmLnNjcm9sbEJveC5zY3JvbGxMZWZ0IC09IHNlbGYuYXR0cmlidXRlcy5zZWxlY3Rpb25TY3JvbGxJbmNyZW1lbnQ7XHJcbiAgICAgIHNlbGYuc2Nyb2xsVGltZXIgPSBzZXRUaW1lb3V0KFxyXG4gICAgICAgIHNlbGYuc2Nyb2xsR3JpZCxcclxuICAgICAgICBzZWxmLmF0dHJpYnV0ZXMuc2Nyb2xsUmVwZWF0UmF0ZSxcclxuICAgICAgICBlLFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgc2VsZi5zdG9wU2Nyb2xsR3JpZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGNsZWFyVGltZW91dChzZWxmLnNjcm9sbFRpbWVyKTtcclxuICAgIGlmIChkb2N1bWVudC5leGl0UG9pbnRlckxvY2spIHtcclxuICAgICAgZG9jdW1lbnQuZXhpdFBvaW50ZXJMb2NrKCk7XHJcbiAgICB9XHJcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBzZWxmLnNjcm9sbEdyaWQsIGZhbHNlKTtcclxuICB9O1xyXG4gIHNlbGYuZHJhZ1Jlb3JkZXIgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgdmFyIHBvcyxcclxuICAgICAgeCxcclxuICAgICAgeSxcclxuICAgICAgY29sdW1SZW9yZGVyID0gc2VsZi5kcmFnTW9kZSA9PT0gJ2NvbHVtbi1yZW9yZGVyJyxcclxuICAgICAgcm93UmVvcmRlciA9IHNlbGYuZHJhZ01vZGUgPT09ICdyb3ctcmVvcmRlcic7XHJcbiAgICBwb3MgPSBzZWxmLmdldExheWVyUG9zKGUpO1xyXG4gICAgeCA9IHBvcy54IC0gc2VsZi5kcmFnU3RhcnQueDtcclxuICAgIHkgPSBwb3MueSAtIHNlbGYuZHJhZ1N0YXJ0Lnk7XHJcbiAgICBpZiAoIXNlbGYuYXR0cmlidXRlcy5hbGxvd0NvbHVtblJlb3JkZXJpbmcgJiYgY29sdW1SZW9yZGVyKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICghc2VsZi5hdHRyaWJ1dGVzLmFsbG93Um93UmVvcmRlcmluZyAmJiByb3dSZW9yZGVyKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChcclxuICAgICAgc2VsZi5kaXNwYXRjaEV2ZW50KCdyZW9yZGVyaW5nJywge1xyXG4gICAgICAgIE5hdGl2ZUV2ZW50OiBlLFxyXG4gICAgICAgIHNvdXJjZTogc2VsZi5kcmFnU3RhcnRPYmplY3QsXHJcbiAgICAgICAgdGFyZ2V0OiBzZWxmLmN1cnJlbnRDZWxsLFxyXG4gICAgICAgIGRyYWdNb2RlOiBzZWxmLmRyYWdNb2RlLFxyXG4gICAgICB9KVxyXG4gICAgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChcclxuICAgICAgTWF0aC5hYnMoeCkgPiBzZWxmLmF0dHJpYnV0ZXMucmVvcmRlckRlYWRab25lIHx8XHJcbiAgICAgIE1hdGguYWJzKHkpID4gc2VsZi5hdHRyaWJ1dGVzLnJlb3JkZXJEZWFkWm9uZVxyXG4gICAgKSB7XHJcbiAgICAgIHNlbGYucmVvcmRlck9iamVjdCA9IHNlbGYuZHJhZ2dpbmdJdGVtO1xyXG4gICAgICBzZWxmLnJlb3JkZXJUYXJnZXQgPSBzZWxmLmN1cnJlbnRDZWxsO1xyXG4gICAgICBzZWxmLnJlb3JkZXJPYmplY3QuZHJhZ09mZnNldCA9IHtcclxuICAgICAgICB4OiB4LFxyXG4gICAgICAgIHk6IHksXHJcbiAgICAgIH07XHJcbiAgICAgIHNlbGYuYXV0b1Njcm9sbFpvbmUoXHJcbiAgICAgICAgZSxcclxuICAgICAgICBjb2x1bVJlb3JkZXIgPyBwb3MueCA6IC0xLFxyXG4gICAgICAgIHJvd1Jlb3JkZXIgPyBwb3MueSA6IC0xLFxyXG4gICAgICAgIGZhbHNlLFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgc2VsZi5zdG9wRHJhZ1Jlb3JkZXIgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgdmFyIG9JbmRleCxcclxuICAgICAgdEluZGV4LFxyXG4gICAgICBjciA9IHtcclxuICAgICAgICAncm93LXJlb3JkZXInOiBzZWxmLm9yZGVycy5yb3dzLFxyXG4gICAgICAgICdjb2x1bW4tcmVvcmRlcic6IHNlbGYub3JkZXJzLmNvbHVtbnMsXHJcbiAgICAgIH0sXHJcbiAgICAgIGkgPSB7XHJcbiAgICAgICAgJ3Jvdy1yZW9yZGVyJzogJ3Jvd0luZGV4JyxcclxuICAgICAgICAnY29sdW1uLXJlb3JkZXInOiAnc29ydENvbHVtbkluZGV4JyxcclxuICAgICAgfVtzZWxmLmRyYWdNb2RlXTtcclxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgc2VsZi5kcmFnUmVvcmRlciwgZmFsc2UpO1xyXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgc2VsZi5zdG9wRHJhZ1Jlb3JkZXIsIGZhbHNlKTtcclxuICAgIGlmIChcclxuICAgICAgc2VsZi5yZW9yZGVyT2JqZWN0ICYmXHJcbiAgICAgIHNlbGYucmVvcmRlclRhcmdldCAmJlxyXG4gICAgICAoKHNlbGYuZHJhZ01vZGUgPT09ICdjb2x1bW4tcmVvcmRlcicgJiZcclxuICAgICAgICBzZWxmLnJlb3JkZXJUYXJnZXQuc29ydENvbHVtbkluZGV4ID4gLTEgJiZcclxuICAgICAgICBzZWxmLnJlb3JkZXJUYXJnZXQuc29ydENvbHVtbkluZGV4IDwgc2VsZi5nZXRTY2hlbWEoKS5sZW5ndGgpIHx8XHJcbiAgICAgICAgKHNlbGYuZHJhZ01vZGUgPT09ICdyb3ctcmVvcmRlcicgJiZcclxuICAgICAgICAgIHNlbGYucmVvcmRlclRhcmdldC5yb3dJbmRleCA+IC0xICYmXHJcbiAgICAgICAgICBzZWxmLnJlb3JkZXJUYXJnZXQucm93SW5kZXggPCBzZWxmLnZpZXdEYXRhLmxlbmd0aCkpICYmXHJcbiAgICAgIHNlbGYucmVvcmRlck9iamVjdFtpXSAhPT0gc2VsZi5yZW9yZGVyVGFyZ2V0W2ldICYmXHJcbiAgICAgICFzZWxmLmRpc3BhdGNoRXZlbnQoJ3Jlb3JkZXInLCB7XHJcbiAgICAgICAgTmF0aXZlRXZlbnQ6IGUsXHJcbiAgICAgICAgc291cmNlOiBzZWxmLnJlb3JkZXJPYmplY3QsXHJcbiAgICAgICAgdGFyZ2V0OiBzZWxmLnJlb3JkZXJUYXJnZXQsXHJcbiAgICAgICAgZHJhZ01vZGU6IHNlbGYuZHJhZ01vZGUsXHJcbiAgICAgIH0pXHJcbiAgICApIHtcclxuICAgICAgc2VsZi5pZ25vcmVOZXh0Q2xpY2sgPSB0cnVlO1xyXG4gICAgICBvSW5kZXggPSBjcltzZWxmLmRyYWdNb2RlXS5pbmRleE9mKHNlbGYucmVvcmRlck9iamVjdFtpXSk7XHJcbiAgICAgIHRJbmRleCA9IGNyW3NlbGYuZHJhZ01vZGVdLmluZGV4T2Yoc2VsZi5yZW9yZGVyVGFyZ2V0W2ldKTtcclxuICAgICAgY3Jbc2VsZi5kcmFnTW9kZV0uc3BsaWNlKG9JbmRleCwgMSk7XHJcbiAgICAgIGNyW3NlbGYuZHJhZ01vZGVdLnNwbGljZSh0SW5kZXgsIDAsIHNlbGYucmVvcmRlck9iamVjdFtpXSk7XHJcbiAgICAgIGlmIChzZWxmLmRyYWdNb2RlID09PSAnY29sdW1uLXJlb3JkZXInKSB7XHJcbiAgICAgICAgc2VsZi5vcmRlcnMuY29sdW1ucyA9IGNyW3NlbGYuZHJhZ01vZGVdO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNlbGYub3JkZXJzLnJvd3MgPSBjcltzZWxmLmRyYWdNb2RlXTtcclxuICAgICAgfVxyXG4gICAgICBzZWxmLnJlc2l6ZSgpO1xyXG4gICAgICBzZWxmLnNldFN0b3JhZ2VEYXRhKCk7XHJcbiAgICB9XHJcbiAgICBzZWxmLnJlb3JkZXJPYmplY3QgPSB1bmRlZmluZWQ7XHJcbiAgICBzZWxmLnJlb3JkZXJUYXJnZXQgPSB1bmRlZmluZWQ7XHJcbiAgICBzZWxmLmRyYXcodHJ1ZSk7XHJcbiAgfTtcclxuICBzZWxmLmRyYWdNb3ZlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgIGlmIChcclxuICAgICAgc2VsZi5kaXNwYXRjaEV2ZW50KCdtb3ZpbmcnLCB7IE5hdGl2ZUV2ZW50OiBlLCBjZWxsOiBzZWxmLmN1cnJlbnRDZWxsIH0pXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdmFyIHBvcyA9IHNlbGYuZ2V0TGF5ZXJQb3MoZSk7XHJcbiAgICBzZWxmLm1vdmVPZmZzZXQgPSB7XHJcbiAgICAgIHg6IHNlbGYuY3VycmVudENlbGwuY29sdW1uSW5kZXggLSBzZWxmLmRyYWdTdGFydE9iamVjdC5jb2x1bW5JbmRleCxcclxuICAgICAgeTogc2VsZi5jdXJyZW50Q2VsbC5yb3dJbmRleCAtIHNlbGYuZHJhZ1N0YXJ0T2JqZWN0LnJvd0luZGV4LFxyXG4gICAgfTtcclxuICAgIGlmIChcclxuICAgICAgTWF0aC5hYnMocG9zLngpID4gc2VsZi5hdHRyaWJ1dGVzLnJlb3JkZXJEZWFkWm9uZSB8fFxyXG4gICAgICBNYXRoLmFicyhwb3MueSkgPiBzZWxmLmF0dHJpYnV0ZXMucmVvcmRlckRlYWRab25lXHJcbiAgICApIHtcclxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgc2VsZi5hdXRvU2Nyb2xsWm9uZShlLCBwb3MueCwgcG9zLnksIGZhbHNlKTtcclxuICAgICAgfSwgMSk7XHJcbiAgICB9XHJcbiAgfTtcclxuICBzZWxmLnN0b3BEcmFnTW92ZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHNlbGYuZHJhZ01vdmUsIGZhbHNlKTtcclxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHNlbGYuc3RvcERyYWdNb3ZlLCBmYWxzZSk7XHJcbiAgICB2YXIgYiA9IHNlbGYuZ2V0U2VsZWN0aW9uQm91bmRzKCk7XHJcbiAgICBpZiAoXHJcbiAgICAgIHNlbGYuZGlzcGF0Y2hFdmVudCgnZW5kbW92ZScsIHsgTmF0aXZlRXZlbnQ6IGUsIGNlbGw6IHNlbGYuY3VycmVudENlbGwgfSlcclxuICAgICkge1xyXG4gICAgICBzZWxmLm1vdmluZ1NlbGVjdGlvbiA9IHVuZGVmaW5lZDtcclxuICAgICAgc2VsZi5tb3ZlT2Zmc2V0ID0gdW5kZWZpbmVkO1xyXG4gICAgICBzZWxmLmRyYXcodHJ1ZSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChzZWxmLm1vdmVPZmZzZXQpIHtcclxuICAgICAgc2VsZi5tb3ZlVG8oXHJcbiAgICAgICAgc2VsZi5tb3ZpbmdTZWxlY3Rpb24sXHJcbiAgICAgICAgYi5sZWZ0ICsgc2VsZi5tb3ZlT2Zmc2V0LngsXHJcbiAgICAgICAgYi50b3AgKyBzZWxmLm1vdmVPZmZzZXQueSxcclxuICAgICAgKTtcclxuICAgICAgc2VsZi5tb3ZlU2VsZWN0aW9uKHNlbGYubW92ZU9mZnNldC54LCBzZWxmLm1vdmVPZmZzZXQueSk7XHJcbiAgICB9XHJcbiAgICBzZWxmLm1vdmluZ1NlbGVjdGlvbiA9IHVuZGVmaW5lZDtcclxuICAgIHNlbGYubW92ZU9mZnNldCA9IHVuZGVmaW5lZDtcclxuICAgIHNlbGYuZHJhdyh0cnVlKTtcclxuICB9O1xyXG4gIHNlbGYuZnJlZXplTW92ZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICBpZiAoXHJcbiAgICAgIHNlbGYuZGlzcGF0Y2hFdmVudCgnZnJlZXplbW92aW5nJywge1xyXG4gICAgICAgIE5hdGl2ZUV2ZW50OiBlLFxyXG4gICAgICAgIGNlbGw6IHNlbGYuY3VycmVudENlbGwsXHJcbiAgICAgIH0pXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdmFyIHBvcyA9IHNlbGYuZ2V0TGF5ZXJQb3MoZSk7XHJcbiAgICBzZWxmLmlnbm9yZU5leHRDbGljayA9IHRydWU7XHJcbiAgICBzZWxmLmZyZWV6ZU1hcmtlclBvc2l0aW9uID0gcG9zO1xyXG4gICAgaWYgKFxyXG4gICAgICBzZWxmLmN1cnJlbnRDZWxsICYmXHJcbiAgICAgIHNlbGYuY3VycmVudENlbGwucm93SW5kZXggIT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICBzZWxmLmRyYWdNb2RlID09PSAnZnJvemVuLXJvdy1tYXJrZXInXHJcbiAgICApIHtcclxuICAgICAgc2VsZi5zY3JvbGxCb3guc2Nyb2xsVG9wID0gMDtcclxuICAgICAgc2VsZi5mcm96ZW5Sb3cgPSBzZWxmLmN1cnJlbnRDZWxsLnJvd0luZGV4ICsgMTtcclxuICAgIH1cclxuICAgIGlmIChcclxuICAgICAgc2VsZi5jdXJyZW50Q2VsbCAmJlxyXG4gICAgICBzZWxmLmN1cnJlbnRDZWxsLmNvbHVtbkluZGV4ICE9PSB1bmRlZmluZWQgJiZcclxuICAgICAgc2VsZi5kcmFnTW9kZSA9PT0gJ2Zyb3plbi1jb2x1bW4tbWFya2VyJ1xyXG4gICAgKSB7XHJcbiAgICAgIHNlbGYuc2Nyb2xsQm94LnNjcm9sbExlZnQgPSAwO1xyXG4gICAgICBzZWxmLmZyb3plbkNvbHVtbiA9IHNlbGYuY3VycmVudENlbGwuY29sdW1uSW5kZXggKyAxO1xyXG4gICAgfVxyXG4gICAgaWYgKFxyXG4gICAgICBNYXRoLmFicyhwb3MueCkgPiBzZWxmLmF0dHJpYnV0ZXMucmVvcmRlckRlYWRab25lIHx8XHJcbiAgICAgIE1hdGguYWJzKHBvcy55KSA+IHNlbGYuYXR0cmlidXRlcy5yZW9yZGVyRGVhZFpvbmVcclxuICAgICkge1xyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBzZWxmLmF1dG9TY3JvbGxab25lKGUsIHBvcy54LCBwb3MueSwgZmFsc2UpO1xyXG4gICAgICB9LCAxKTtcclxuICAgIH1cclxuICB9O1xyXG4gIHNlbGYuc3RvcEZyZWV6ZU1vdmUgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBzZWxmLmZyZWV6ZU1vdmUsIGZhbHNlKTtcclxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHNlbGYuc3RvcEZyZWV6ZU1vdmUsIGZhbHNlKTtcclxuICAgIHNlbGYuZnJlZXplTWFya2VyUG9zaXRpb24gPSB1bmRlZmluZWQ7XHJcbiAgICBpZiAoXHJcbiAgICAgIHNlbGYuZGlzcGF0Y2hFdmVudCgnZW5kZnJlZXplbW92ZScsIHtcclxuICAgICAgICBOYXRpdmVFdmVudDogZSxcclxuICAgICAgICBjZWxsOiBzZWxmLmN1cnJlbnRDZWxsLFxyXG4gICAgICB9KVxyXG4gICAgKSB7XHJcbiAgICAgIHNlbGYuZnJvemVuUm93ID0gc2VsZi5zdGFydEZyZWV6ZU1vdmUueDtcclxuICAgICAgc2VsZi5mcm96ZW5Db2x1bW4gPSBzZWxmLnN0YXJ0RnJlZXplTW92ZS55O1xyXG4gICAgICBzZWxmLmRyYXcodHJ1ZSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHNlbGYuZHJhdyh0cnVlKTtcclxuICB9O1xyXG4gIHNlbGYubW91c2Vkb3duID0gZnVuY3Rpb24gKGUsIG92ZXJyaWRlUG9zKSB7XHJcbiAgICBzZWxmLmxhc3RNb3VzZURvd25UYXJnZXQgPSBlLnRhcmdldDtcclxuICAgIGlmIChcclxuICAgICAgc2VsZi5kaXNwYXRjaEV2ZW50KCdtb3VzZWRvd24nLCB7XHJcbiAgICAgICAgTmF0aXZlRXZlbnQ6IGUsXHJcbiAgICAgICAgY2VsbDogc2VsZi5jdXJyZW50Q2VsbCxcclxuICAgICAgfSlcclxuICAgICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoIXNlbGYuaGFzRm9jdXMpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKGUuYnV0dG9uID09PSAyIHx8IHNlbGYuaW5wdXQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdmFyIGN0cmwgPSBlLmN0cmxLZXkgfHwgZS5tZXRhS2V5LFxyXG4gICAgICBtb3ZlID0gLy1tb3ZlLy50ZXN0KHNlbGYuZHJhZ01vZGUpLFxyXG4gICAgICBmcmVlemUgPSAvZnJvemVuLXJvdy1tYXJrZXJ8ZnJvemVuLWNvbHVtbi1tYXJrZXIvLnRlc3Qoc2VsZi5kcmFnTW9kZSksXHJcbiAgICAgIHJlc2l6ZSA9IC8tcmVzaXplLy50ZXN0KHNlbGYuZHJhZ01vZGUpO1xyXG4gICAgc2VsZi5kcmFnU3RhcnQgPSBvdmVycmlkZVBvcyB8fCBzZWxmLmdldExheWVyUG9zKGUpO1xyXG4gICAgc2VsZi5zY3JvbGxTdGFydCA9IHtcclxuICAgICAgbGVmdDogc2VsZi5zY3JvbGxCb3guc2Nyb2xsTGVmdCxcclxuICAgICAgdG9wOiBzZWxmLnNjcm9sbEJveC5zY3JvbGxUb3AsXHJcbiAgICB9O1xyXG4gICAgc2VsZi5kcmFnU3RhcnRPYmplY3QgPSBzZWxmLmdldENlbGxBdChzZWxmLmRyYWdTdGFydC54LCBzZWxmLmRyYWdTdGFydC55KTtcclxuICAgIHNlbGYuZHJhZ0FkZFRvU2VsZWN0aW9uID0gIXNlbGYuZHJhZ1N0YXJ0T2JqZWN0LnNlbGVjdGVkO1xyXG4gICAgaWYgKFxyXG4gICAgICAhY3RybCAmJlxyXG4gICAgICAhZS5zaGlmdEtleSAmJlxyXG4gICAgICAhLyh2ZXJ0aWNhbHxob3Jpem9udGFsKS1zY3JvbGwtKGJhcnxib3gpLy50ZXN0KFxyXG4gICAgICAgIHNlbGYuZHJhZ1N0YXJ0T2JqZWN0LmNvbnRleHQsXHJcbiAgICAgICkgJiZcclxuICAgICAgc2VsZi5jdXJyZW50Q2VsbCAmJlxyXG4gICAgICAhc2VsZi5jdXJyZW50Q2VsbC5pc0NvbHVtbkhlYWRlciAmJlxyXG4gICAgICAhbW92ZSAmJlxyXG4gICAgICAhZnJlZXplICYmXHJcbiAgICAgICFyZXNpemVcclxuICAgICkge1xyXG4gICAgICBzZWxmLnNlbGVjdGlvbnMgPSBbXTtcclxuICAgIH1cclxuICAgIGlmIChzZWxmLmRyYWdTdGFydE9iamVjdC5pc0dyaWQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHNlbGYuc2Nyb2xsTW9kZXMuaW5kZXhPZihzZWxmLmRyYWdTdGFydE9iamVjdC5jb250ZXh0KSAhPT0gLTEpIHtcclxuICAgICAgc2VsZi5zY3JvbGxNb2RlID0gc2VsZi5kcmFnU3RhcnRPYmplY3QuY29udGV4dDtcclxuICAgICAgc2VsZi5zY3JvbGxTdGFydE1vZGUgPSBzZWxmLmRyYWdTdGFydE9iamVjdC5jb250ZXh0O1xyXG4gICAgICBzZWxmLnNjcm9sbEdyaWQoZSk7XHJcbiAgICAgIGlmIChcclxuICAgICAgICBzZWxmLmF0dHJpYnV0ZXMuc2Nyb2xsUG9pbnRlckxvY2sgJiZcclxuICAgICAgICBbJ2hvcml6b250YWwtc2Nyb2xsLWJveCcsICd2ZXJ0aWNhbC1zY3JvbGwtYm94J10uaW5kZXhPZihcclxuICAgICAgICAgIHNlbGYuc2Nyb2xsU3RhcnRNb2RlLFxyXG4gICAgICAgICkgIT09IC0xXHJcbiAgICAgICkge1xyXG4gICAgICAgIHNlbGYucG9pbnRlckxvY2tQb3NpdGlvbiA9IHtcclxuICAgICAgICAgIHg6IHNlbGYuZHJhZ1N0YXJ0LngsXHJcbiAgICAgICAgICB5OiBzZWxmLmRyYWdTdGFydC55LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5jYW52YXMucmVxdWVzdFBvaW50ZXJMb2NrKCk7XHJcbiAgICAgIH1cclxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgc2VsZi5zY3JvbGxHcmlkLCBmYWxzZSk7XHJcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBzZWxmLnN0b3BTY3JvbGxHcmlkLCBmYWxzZSk7XHJcbiAgICAgIHNlbGYuaWdub3JlTmV4dENsaWNrID0gdHJ1ZTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHNlbGYuZHJhZ01vZGUgPT09ICdjZWxsJykge1xyXG4gICAgICBzZWxmLnNlbGVjdGluZyA9IHRydWU7XHJcbiAgICAgIGlmIChcclxuICAgICAgICAoc2VsZi5hdHRyaWJ1dGVzLnNlbGVjdGlvbk1vZGUgPT09ICdyb3cnIHx8XHJcbiAgICAgICAgICBzZWxmLmRyYWdTdGFydE9iamVjdC5jb2x1bW5JbmRleCA9PT0gLTEpICYmXHJcbiAgICAgICAgc2VsZi5kcmFnU3RhcnRPYmplY3Qucm93SW5kZXggPiAtMVxyXG4gICAgICApIHtcclxuICAgICAgICBzZWxmLnNlbGVjdFJvdyhzZWxmLmRyYWdTdGFydE9iamVjdC5yb3dJbmRleCwgY3RybCwgbnVsbCk7XHJcbiAgICAgIH0gZWxzZSBpZiAoc2VsZi5hdHRyaWJ1dGVzLnNlbGVjdGlvbk1vZGUgIT09ICdyb3cnKSB7XHJcbiAgICAgICAgc2VsZi5tb3VzZW1vdmUoZSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKG1vdmUpIHtcclxuICAgICAgc2VsZi5kcmFnZ2luZ0l0ZW0gPSBzZWxmLmRyYWdJdGVtO1xyXG4gICAgICBzZWxmLm1vdmluZ1NlbGVjdGlvbiA9IHNlbGYuc2VsZWN0aW9ucy5jb25jYXQoW10pO1xyXG4gICAgICBzZWxmLmRyYWdnaW5nID0gc2VsZi5kcmFnU3RhcnRPYmplY3Q7XHJcbiAgICAgIGlmIChcclxuICAgICAgICBzZWxmLmRpc3BhdGNoRXZlbnQoJ2JlZ2lubW92ZScsIHtcclxuICAgICAgICAgIE5hdGl2ZUV2ZW50OiBlLFxyXG4gICAgICAgICAgY2VsbDogc2VsZi5jdXJyZW50Q2VsbCxcclxuICAgICAgICB9KVxyXG4gICAgICApIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBzZWxmLmRyYWdNb3ZlLCBmYWxzZSk7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHNlbGYuc3RvcERyYWdNb3ZlLCBmYWxzZSk7XHJcbiAgICAgIHJldHVybiBzZWxmLm1vdXNlbW92ZShlKTtcclxuICAgIH1cclxuICAgIGlmIChmcmVlemUpIHtcclxuICAgICAgc2VsZi5kcmFnZ2luZ0l0ZW0gPSBzZWxmLmRyYWdJdGVtO1xyXG4gICAgICBzZWxmLnN0YXJ0RnJlZXplTW92ZSA9IHtcclxuICAgICAgICB4OiBzZWxmLmZyb3plblJvdyxcclxuICAgICAgICB5OiBzZWxmLmZyb3plbkNvbHVtbixcclxuICAgICAgfTtcclxuICAgICAgaWYgKHNlbGYuZGlzcGF0Y2hFdmVudCgnYmVnaW5mcmVlemVtb3ZlJywgeyBOYXRpdmVFdmVudDogZSB9KSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHNlbGYuZnJlZXplTW92ZSwgZmFsc2UpO1xyXG4gICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBzZWxmLnN0b3BGcmVlemVNb3ZlLCBmYWxzZSk7XHJcbiAgICAgIHJldHVybiBzZWxmLm1vdXNlbW92ZShlKTtcclxuICAgIH1cclxuICAgIGlmIChyZXNpemUpIHtcclxuICAgICAgc2VsZi5kcmFnZ2luZ0l0ZW0gPSBzZWxmLmRyYWdJdGVtO1xyXG4gICAgICBpZiAoc2VsZi5kcmFnZ2luZ0l0ZW0ucm93T3Blbikge1xyXG4gICAgICAgIHNlbGYucmVzaXppbmdTdGFydGluZ0hlaWdodCA9XHJcbiAgICAgICAgICBzZWxmLnNpemVzLnRyZWVzW3NlbGYuZHJhZ2dpbmdJdGVtLnJvd0luZGV4XTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzZWxmLnJlc2l6aW5nU3RhcnRpbmdIZWlnaHQgPVxyXG4gICAgICAgICAgc2VsZi5zaXplcy5yb3dzW3NlbGYuZHJhZ2dpbmdJdGVtLnJvd0luZGV4XSB8fCBzZWxmLnN0eWxlLmNlbGxIZWlnaHQ7XHJcbiAgICAgIH1cclxuICAgICAgc2VsZi5yZXNpemluZ1N0YXJ0aW5nV2lkdGggPVxyXG4gICAgICAgIHNlbGYuc2l6ZXMuY29sdW1uc1tcclxuICAgICAgICAgIHNlbGYuZHJhZ2dpbmdJdGVtLmhlYWRlci5zdHlsZSA9PT0gJ3Jvd0hlYWRlckNlbGwnXHJcbiAgICAgICAgICAgID8gJ2Nvcm5lckNlbGwnXHJcbiAgICAgICAgICAgIDogc2VsZi5kcmFnZ2luZ0l0ZW0uc29ydENvbHVtbkluZGV4XHJcbiAgICAgICAgXSB8fCBzZWxmLmRyYWdnaW5nSXRlbS53aWR0aDtcclxuICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBzZWxmLmRyYWdSZXNpemVDb2x1bW4sIGZhbHNlKTtcclxuICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgc2VsZi5zdG9wRHJhZ1Jlc2l6ZSwgZmFsc2UpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoWydyb3ctcmVvcmRlcicsICdjb2x1bW4tcmVvcmRlciddLmluZGV4T2Yoc2VsZi5kcmFnTW9kZSkgIT09IC0xKSB7XHJcbiAgICAgIHNlbGYuZHJhZ2dpbmdJdGVtID0gc2VsZi5kcmFnU3RhcnRPYmplY3Q7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgc2VsZi5kcmFnUmVvcmRlciwgZmFsc2UpO1xyXG4gICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBzZWxmLnN0b3BEcmFnUmVvcmRlciwgZmFsc2UpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgfTtcclxuICBzZWxmLm1vdXNldXAgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgY2xlYXJUaW1lb3V0KHNlbGYuc2Nyb2xsVGltZXIpO1xyXG4gICAgc2VsZi5jZWxsQm91bmRhcnlDcm9zc2VkID0gdHJ1ZTtcclxuICAgIHNlbGYucm93Qm91bmRhcnlDcm9zc2VkID0gdHJ1ZTtcclxuICAgIHNlbGYuY29sdW1uQm91bmRhcnlDcm9zc2VkID0gdHJ1ZTtcclxuICAgIHNlbGYuc2VsZWN0aW5nID0gdW5kZWZpbmVkO1xyXG4gICAgc2VsZi5kcmFnZ2luZ0l0ZW0gPSB1bmRlZmluZWQ7XHJcbiAgICBzZWxmLmRyYWdTdGFydE9iamVjdCA9IHVuZGVmaW5lZDtcclxuICAgIGlmIChcclxuICAgICAgc2VsZi5kaXNwYXRjaEV2ZW50KCdtb3VzZXVwJywgeyBOYXRpdmVFdmVudDogZSwgY2VsbDogc2VsZi5jdXJyZW50Q2VsbCB9KVxyXG4gICAgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICghc2VsZi5oYXNGb2N1cyAmJiBlLnRhcmdldCAhPT0gc2VsZi5jYW52YXMpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHNlbGYuY3VycmVudENlbGwgJiYgc2VsZi5jdXJyZW50Q2VsbC5ncmlkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHNlbGYuY29udGV4dE1lbnUgfHwgc2VsZi5pbnB1dCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoc2VsZi5kcmFnU3RhcnQgJiYgc2VsZi5pc0luR3JpZChzZWxmLmRyYWdTdGFydCkpIHtcclxuICAgICAgc2VsZi5jb250cm9sSW5wdXQuZm9jdXMoKTtcclxuICAgIH1cclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICB9O1xyXG4gIC8vIGdldHMgdGhlIGhvcml6b250YWwgYWRqYWNlbnQgY2VsbHMgYXMgd2VsbCBhcyBmaXJzdC9sYXN0IGJhc2VkIG9uIGNvbHVtbiB2aXNpYmlsaXR5XHJcbiAgc2VsZi5nZXRBZGphY2VudENlbGxzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHgsXHJcbiAgICAgIGksXHJcbiAgICAgIHMgPSBzZWxmLmdldFNjaGVtYSgpLFxyXG4gICAgICBvID0ge307XHJcbiAgICBmb3IgKHggPSAwOyB4IDwgcy5sZW5ndGg7IHggKz0gMSkge1xyXG4gICAgICBpID0gc2VsZi5vcmRlcnMuY29sdW1uc1t4XTtcclxuICAgICAgaWYgKCFzW2ldLmhpZGRlbikge1xyXG4gICAgICAgIGlmIChvLmZpcnN0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIG8uZmlyc3QgPSB4O1xyXG4gICAgICAgICAgby5sZWZ0ID0geDtcclxuICAgICAgICB9XHJcbiAgICAgICAgby5sYXN0ID0geDtcclxuICAgICAgICBpZiAoeCA+IHNlbGYuYWN0aXZlQ2VsbC5jb2x1bW5JbmRleCAmJiBvLnJpZ2h0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIG8ucmlnaHQgPSB4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoeCA8IHNlbGYuYWN0aXZlQ2VsbC5jb2x1bW5JbmRleCkge1xyXG4gICAgICAgICAgby5sZWZ0ID0geDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChvLnJpZ2h0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgby5yaWdodCA9IG8ubGFzdDtcclxuICAgIH1cclxuICAgIHJldHVybiBvO1xyXG4gIH07XHJcbiAgc2VsZi5rZXlkb3duID0gZnVuY3Rpb24gKGUpIHtcclxuICAgIHZhciBpLFxyXG4gICAgICBldixcclxuICAgICAgYWRqYWNlbnRDZWxscyA9IHNlbGYuZ2V0QWRqYWNlbnRDZWxscygpLFxyXG4gICAgICB4ID0gc2VsZi5hY3RpdmVDZWxsLmNvbHVtbkluZGV4LFxyXG4gICAgICB5ID0gc2VsZi5hY3RpdmVDZWxsLnJvd0luZGV4LFxyXG4gICAgICBjdHJsID0gZS5jdHJsS2V5IHx8IGUubWV0YUtleSxcclxuICAgICAgbGFzdCA9IHNlbGYudmlld0RhdGEubGVuZ3RoIC0gMSxcclxuICAgICAgcyA9IHNlbGYuZ2V0U2NoZW1hKCksXHJcbiAgICAgIGNvbHMgPSBzLmxlbmd0aCAtIDE7XHJcblxyXG4gICAgdmFyIGRlZmF1bHRQcmV2ZW50ZWQgPSBzZWxmLmRpc3BhdGNoRXZlbnQoJ2tleWRvd24nLCB7XHJcbiAgICAgIE5hdGl2ZUV2ZW50OiBlLFxyXG4gICAgICBjZWxsOiBzZWxmLmN1cnJlbnRDZWxsLFxyXG4gICAgICBvYmo6IHNlbGYsXHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoZGVmYXVsdFByZXZlbnRlZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFzZWxmLmhhc0ZvY3VzKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJZiBhIHVzZXIgc3RhcnRzIHR5cGluZyBjb250ZW50LCBzd2l0Y2ggdG8gXCJFbnRlclwiIG1vZGVcclxuICAgIGlmIChpc1ByaW50YWJsZUtleUV2ZW50KGUpICYmICFjdHJsKSB7XHJcbiAgICAgIHJldHVybiBzZWxmLmJlZ2luRWRpdEF0KHgsIHksIGUsIHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChzZWxmLmF0dHJpYnV0ZXMuc2hvd05ld1Jvdykge1xyXG4gICAgICBsYXN0ICs9IDE7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGUua2V5ID09PSAnVGFiJykge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGUua2V5ID09PSAnRXNjYXBlJykge1xyXG4gICAgICBzZWxmLnNlbGVjdE5vbmUoKTtcclxuICAgIH0gZWxzZSBpZiAoY3RybCAmJiBlLmtleSA9PT0gJ2EnKSB7XHJcbiAgICAgIHNlbGYuc2VsZWN0QWxsKCk7XHJcbiAgICB9IGVsc2UgaWYgKGUua2V5ID09PSAnQXJyb3dEb3duJykge1xyXG4gICAgICB5ICs9IDE7XHJcbiAgICB9IGVsc2UgaWYgKGUua2V5ID09PSAnQXJyb3dVcCcpIHtcclxuICAgICAgeSAtPSAxO1xyXG4gICAgfSBlbHNlIGlmIChcclxuICAgICAgKGUua2V5ID09PSAnQXJyb3dMZWZ0JyAmJiAhY3RybCkgfHxcclxuICAgICAgKGUuc2hpZnRLZXkgJiYgZS5rZXkgPT09ICdUYWInKVxyXG4gICAgKSB7XHJcbiAgICAgIHggPSBhZGphY2VudENlbGxzLmxlZnQ7XHJcbiAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAoZS5rZXkgPT09ICdBcnJvd1JpZ2h0JyAmJiAhY3RybCkgfHxcclxuICAgICAgKCFlLnNoaWZ0S2V5ICYmIGUua2V5ID09PSAnVGFiJylcclxuICAgICkge1xyXG4gICAgICB4ID0gYWRqYWNlbnRDZWxscy5yaWdodDtcclxuICAgIH0gZWxzZSBpZiAoZS5rZXkgPT09ICdQYWdlVXAnKSB7XHJcbiAgICAgIHkgLT0gc2VsZi5wYWdlO1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9IGVsc2UgaWYgKGUua2V5ID09PSAnUGFnZURvd24nKSB7XHJcbiAgICAgIHkgKz0gc2VsZi5wYWdlO1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9IGVsc2UgaWYgKGUua2V5ID09PSAnSG9tZScgfHwgKGN0cmwgJiYgZS5rZXkgPT09ICdBcnJvd1VwJykpIHtcclxuICAgICAgeSA9IDA7XHJcbiAgICB9IGVsc2UgaWYgKGUua2V5ID09PSAnRW5kJyB8fCAoY3RybCAmJiBlLmtleSA9PT0gJ0Fycm93RG93bicpKSB7XHJcbiAgICAgIHkgPSBzZWxmLnZpZXdEYXRhLmxlbmd0aCAtIDE7XHJcbiAgICB9IGVsc2UgaWYgKGN0cmwgJiYgZS5rZXkgPT09ICdBcnJvd1JpZ2h0Jykge1xyXG4gICAgICB4ID0gYWRqYWNlbnRDZWxscy5sYXN0O1xyXG4gICAgfSBlbHNlIGlmIChjdHJsICYmIGUua2V5ID09PSAnQXJyb3dMZWZ0Jykge1xyXG4gICAgICB4ID0gYWRqYWNlbnRDZWxscy5maXJzdDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicpIHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICByZXR1cm4gc2VsZi5iZWdpbkVkaXRBdCh4LCB5LCBlKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoeCA8IDAgfHwgTnVtYmVyLmlzTmFOKHgpKSB7XHJcbiAgICAgIHggPSBhZGphY2VudENlbGxzLmZpcnN0O1xyXG4gICAgfVxyXG4gICAgaWYgKHkgPiBsYXN0KSB7XHJcbiAgICAgIHkgPSBsYXN0O1xyXG4gICAgfVxyXG4gICAgaWYgKHkgPCAwIHx8IE51bWJlci5pc05hTih5KSkge1xyXG4gICAgICB5ID0gMDtcclxuICAgIH1cclxuICAgIGlmICh4ID4gY29scykge1xyXG4gICAgICB4ID0gYWRqYWNlbnRDZWxscy5sYXN0O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRPRE8gLSBtb3N0IGxpa2VseSBzb21lIGNvbHVtbiBvcmRlciByZWxhdGVkIGJ1Z3MgaW4ga2V5IGJhc2VkIHNlbGVjdGlvblxyXG4gICAgLy8gQXJyb3dzXHJcbiAgICB2YXIgaXNBcnJvd0tleSA9IFtcclxuICAgICAgJ0Fycm93TGVmdCcsXHJcbiAgICAgICdBcnJvd1VwJyxcclxuICAgICAgJ0Fycm93UmlnaHQnLFxyXG4gICAgICAnQXJyb3dEb3duJyxcclxuICAgIF0uaW5jbHVkZXMoZS5rZXkpO1xyXG5cclxuICAgIGlmIChlLnNoaWZ0S2V5ICYmIGlzQXJyb3dLZXkpIHtcclxuICAgICAgc2VsZi5zZWxlY3Rpb25zW01hdGgubWF4KHksIDApXSA9IHNlbGYuc2VsZWN0aW9uc1tNYXRoLm1heCh5LCAwKV0gfHwgW107XHJcbiAgICAgIHNlbGYuc2VsZWN0aW9uc1tNYXRoLm1heCh5LCAwKV0ucHVzaCh4KTtcclxuXHJcbiAgICAgIHNlbGYuc2VsZWN0aW9uQm91bmRzID0gc2VsZi5nZXRTZWxlY3Rpb25Cb3VuZHMoKTtcclxuICAgICAgc2VsZi5zZWxlY3RBcmVhKHVuZGVmaW5lZCwgY3RybCk7XHJcblxyXG4gICAgICBzZWxmLmRyYXcodHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHggIT09IHNlbGYuYWN0aXZlQ2VsbC5jb2x1bW5JbmRleCB8fCB5ICE9PSBzZWxmLmFjdGl2ZUNlbGwucm93SW5kZXgpIHtcclxuICAgICAgc2VsZi5zY3JvbGxJbnRvVmlldyhcclxuICAgICAgICB4ICE9PSBzZWxmLmFjdGl2ZUNlbGwuY29sdW1uSW5kZXggPyB4IDogdW5kZWZpbmVkLFxyXG4gICAgICAgIHkgIT09IHNlbGYuYWN0aXZlQ2VsbC5yb3dJbmRleCAmJiAhTnVtYmVyLmlzTmFOKHkpID8geSA6IHVuZGVmaW5lZCxcclxuICAgICAgKTtcclxuXHJcbiAgICAgIHNlbGYuc2V0QWN0aXZlQ2VsbCh4LCB5KTtcclxuICAgICAgaWYgKCFlLnNoaWZ0S2V5ICYmIHNlbGYuYXR0cmlidXRlcy5zZWxlY3Rpb25Gb2xsb3dzQWN0aXZlQ2VsbCkge1xyXG4gICAgICAgIGlmICghY3RybCkge1xyXG4gICAgICAgICAgc2VsZi5zZWxlY3Rpb25zID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNlbGYuc2VsZWN0aW9uc1t5XSA9IHNlbGYuc2VsZWN0aW9uc1t5XSB8fCBbXTtcclxuICAgICAgICBzZWxmLnNlbGVjdGlvbnNbeV0ucHVzaCh4KTtcclxuICAgICAgICBldiA9IHtcclxuICAgICAgICAgIHNlbGVjdGVkRGF0YTogc2VsZi5nZXRTZWxlY3RlZERhdGEoKSxcclxuICAgICAgICAgIHNlbGVjdGlvbnM6IHNlbGYuc2VsZWN0aW9ucyxcclxuICAgICAgICAgIHNlbGVjdGlvbkJvdW5kczogc2VsZi5nZXRTZWxlY3Rpb25Cb3VuZHMoKSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShldiwgJ3NlbGVjdGVkRGF0YScsIHtcclxuICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc2VsZi5nZXRTZWxlY3RlZERhdGEoKTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgc2VsZi5kaXNwYXRjaEV2ZW50KCdzZWxlY3Rpb25jaGFuZ2VkJywgZXYpO1xyXG4gICAgICB9XHJcbiAgICAgIHNlbGYuZHJhdyh0cnVlKTtcclxuICAgIH1cclxuICB9O1xyXG4gIHNlbGYua2V5dXAgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgaWYgKFxyXG4gICAgICBzZWxmLmRpc3BhdGNoRXZlbnQoJ2tleXVwJywgeyBOYXRpdmVFdmVudDogZSwgY2VsbDogc2VsZi5jdXJyZW50Q2VsbCB9KVxyXG4gICAgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICghc2VsZi5oYXNGb2N1cykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgfTtcclxuICBzZWxmLmtleXByZXNzID0gZnVuY3Rpb24gKGUpIHtcclxuICAgIGlmICghc2VsZi5oYXNGb2N1cykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoXHJcbiAgICAgIHNlbGYuZGlzcGF0Y2hFdmVudCgna2V5cHJlc3MnLCB7IE5hdGl2ZUV2ZW50OiBlLCBjZWxsOiBzZWxmLmN1cnJlbnRDZWxsIH0pXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgc2VsZi5kYmxjbGljayA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICBpZiAoXHJcbiAgICAgIHNlbGYuZGlzcGF0Y2hFdmVudCgnZGJsY2xpY2snLCB7IE5hdGl2ZUV2ZW50OiBlLCBjZWxsOiBzZWxmLmN1cnJlbnRDZWxsIH0pXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKCFzZWxmLmhhc0ZvY3VzKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChcclxuICAgICAgc2VsZi5jdXJyZW50Q2VsbC5jb250ZXh0ID09PSAnZXctcmVzaXplJyAmJlxyXG4gICAgICBzZWxmLmN1cnJlbnRDZWxsLnN0eWxlID09PSAnY29sdW1uSGVhZGVyQ2VsbCdcclxuICAgICkge1xyXG4gICAgICBzZWxmLmZpdENvbHVtblRvVmFsdWVzKHNlbGYuY3VycmVudENlbGwuaGVhZGVyLm5hbWUpO1xyXG4gICAgfSBlbHNlIGlmIChcclxuICAgICAgc2VsZi5jdXJyZW50Q2VsbC5jb250ZXh0ID09PSAnZXctcmVzaXplJyAmJlxyXG4gICAgICBzZWxmLmN1cnJlbnRDZWxsLnN0eWxlID09PSAnY29ybmVyQ2VsbCdcclxuICAgICkge1xyXG4gICAgICBzZWxmLmF1dG9zaXplKCk7XHJcbiAgICB9IGVsc2UgaWYgKFsnY2VsbCcsICdhY3RpdmVDZWxsJ10uaW5kZXhPZihzZWxmLmN1cnJlbnRDZWxsLnN0eWxlKSAhPT0gLTEpIHtcclxuICAgICAgc2VsZi5iZWdpbkVkaXRBdChzZWxmLmN1cnJlbnRDZWxsLmNvbHVtbkluZGV4LCBzZWxmLmN1cnJlbnRDZWxsLnJvd0luZGV4KTtcclxuICAgIH1cclxuICB9O1xyXG4gIHNlbGYuc2Nyb2xsV2hlZWwgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgdmFyIGwsXHJcbiAgICAgIHQsXHJcbiAgICAgIGV2ID0gZSxcclxuICAgICAgZGVsdGFYID0gZS5kZWx0YVggPT09IHVuZGVmaW5lZCA/IGUuTmF0aXZlRXZlbnQuZGVsdGFYIDogZS5kZWx0YVgsXHJcbiAgICAgIGRlbHRhWSA9IGUuZGVsdGFZID09PSB1bmRlZmluZWQgPyBlLk5hdGl2ZUV2ZW50LmRlbHRhWSA6IGUuZGVsdGFZLFxyXG4gICAgICBkZWx0YU1vZGUgPVxyXG4gICAgICAgIGUuZGVsdGFNb2RlID09PSB1bmRlZmluZWQgPyBlLk5hdGl2ZUV2ZW50LmRlbHRhTW9kZSA6IGUuZGVsdGFNb2RlO1xyXG4gICAgdmFyIGUgPSBlLk5hdGl2ZUV2ZW50IHx8IGU7XHJcbiAgICBpZiAod2hlZWxpbmcpIHtcclxuICAgICAgZXYucHJldmVudERlZmF1bHQoZSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChzZWxmLmRpc3BhdGNoRXZlbnQoJ3doZWVsJywgeyBOYXRpdmVFdmVudDogZSB9KSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBzZWxmLnRvdWNoSGFsdEFuaW1hdGlvbiA9IHRydWU7XHJcbiAgICBsID0gc2VsZi5zY3JvbGxCb3guc2Nyb2xsTGVmdDtcclxuICAgIHQgPSBzZWxmLnNjcm9sbEJveC5zY3JvbGxUb3A7XHJcbiAgICBpZiAoc2VsZi5oYXNGb2N1cykge1xyXG4gICAgICAvL0JVRyBJc3N1ZSA0MjogaHR0cHM6Ly9naXRodWIuY29tL1RvbnlHZXJtYW5lcmkvY2FudmFzLWRhdGFncmlkL2lzc3Vlcy80MlxyXG4gICAgICAvL2h0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzIwMTEwMjI0L3doYXQtaXMtdGhlLWhlaWdodC1vZi1hLWxpbmUtaW4tYS13aGVlbC1ldmVudC1kZWx0YW1vZGUtZG9tLWRlbHRhLWxpbmVcclxuICAgICAgaWYgKGRlbHRhTW9kZSA9PT0gMSkge1xyXG4gICAgICAgIC8vIGxpbmUgbW9kZSA9IDE3IHBpeGVscyBwZXIgbGluZVxyXG4gICAgICAgIGRlbHRhWSA9IGRlbHRhWSAqIDE3O1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChcclxuICAgICAgICAoc2VsZi5zY3JvbGxCb3guc2Nyb2xsVG9wIDwgc2VsZi5zY3JvbGxCb3guc2Nyb2xsSGVpZ2h0ICYmXHJcbiAgICAgICAgICBkZWx0YVkgPiAwKSB8fFxyXG4gICAgICAgIChzZWxmLnNjcm9sbEJveC5zY3JvbGxMZWZ0IDwgc2VsZi5zY3JvbGxCb3guc2Nyb2xsV2lkdGggJiZcclxuICAgICAgICAgIGRlbHRhWCA+IDApIHx8XHJcbiAgICAgICAgKHNlbGYuc2Nyb2xsQm94LnNjcm9sbFRvcCA+IDAgJiYgZGVsdGFZIDwgMCkgfHxcclxuICAgICAgICAoc2VsZi5zY3JvbGxCb3guc2Nyb2xsTGVmdCA+IDAgJiYgZGVsdGFYIDwgMClcclxuICAgICAgKSB7XHJcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoZSk7XHJcbiAgICAgIH1cclxuICAgICAgd2hlZWxpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB3aGVlbGluZyA9IHVuZGVmaW5lZDtcclxuICAgICAgICBzZWxmLnNjcm9sbEJveC5zY3JvbGxUbyhkZWx0YVggKyBsLCBkZWx0YVkgKyB0KTtcclxuICAgICAgfSwgMSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgc2VsZi5wYXN0ZURhdGEgPSBmdW5jdGlvbiAoXHJcbiAgICBwYXN0ZVZhbHVlLFxyXG4gICAgbWltZVR5cGUsXHJcbiAgICBzdGFydFJvd0luZGV4LFxyXG4gICAgc3RhcnRDb2xJbmRleCxcclxuICApIHtcclxuICAgIHZhciBzY2hlbWEgPSBzZWxmLmdldFZpc2libGVTY2hlbWEoKTtcclxuXHJcbiAgICBjb25zdCBpc1N1cHBvcnRlZEh0bWxUYWJsZSA9IChodG1sU3RyaW5nKSA9PlxyXG4gICAgICAvKD86Xig8bWV0YVtePl0rPik/PHRhYmxlPil8KD86PCEtLVN0YXJ0RnJhZ21lbnQtLT5cXHMqPHRhYmxlPikvLnRlc3QoXHJcbiAgICAgICAgaHRtbFN0cmluZyxcclxuICAgICAgKTtcclxuXHJcbiAgICAvLyBUT0RPOiBzdXBwb3J0IHBhc3RpbmcgdGFibGVzIGZyb20gRXhjZWxcclxuICAgIGlmIChcclxuICAgICAgbWltZVR5cGUgPT09ICd0ZXh0L2h0bWwnICYmXHJcbiAgICAgIGlzU3VwcG9ydGVkSHRtbFRhYmxlKHBhc3RlVmFsdWUpID09PSBmYWxzZVxyXG4gICAgKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICAnVW5yZWNvZ25pemVkIEhUTUwgZm9ybWF0LiBIVE1MIG11c3QgYmUgYSBzaW1wbGUgdGFibGUsIGUuZy46IDx0YWJsZT48dHI+PHRkPmRhdGE8L3RkPjwvdHI+PC90YWJsZT4uJyxcclxuICAgICAgKTtcclxuICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgICdEYXRhIHdpdGggdGhlIG1pbWUgdHlwZSB0ZXh0L2h0bWwgbm90IGluIHRoaXMgZm9ybWF0IHdpbGwgbm90IGJlIGltcG9ydGVkIGFzIHJvdyBkYXRhLicsXHJcbiAgICAgICk7XHJcblxyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcGFyc2VEYXRhKGRhdGEsIG1pbWVUeXBlKSB7XHJcbiAgICAgIC8vIFRPRE86IHVzZSBET01QYXJzZXJcclxuICAgICAgaWYgKG1pbWVUeXBlID09PSAndGV4dC9odG1sJykge1xyXG4gICAgICAgIC8vIHN0cmlwIHRhYmxlIGJlZ2lubmluZyBhbmQgZW5kaW5nIG9mZiwgdGhlbiBzcGxpdCBhdCByb3dzXHJcbiAgICAgICAgdmFyIGNsZWFuZWRIdG1sRGF0YSA9IGRhdGFcclxuICAgICAgICAgIC5zdWJzdHJpbmcoXHJcbiAgICAgICAgICAgIGRhdGEuaW5kZXhPZignPHRhYmxlPjx0cj4nKSArIDExLFxyXG4gICAgICAgICAgICBkYXRhLmluZGV4T2YoJzwvdHI+PC90YWJsZT4nKSxcclxuICAgICAgICAgIClcclxuICAgICAgICAgIC5zcGxpdCgnPC90cj48dHI+JylcclxuICAgICAgICAgIC5maWx0ZXIoXHJcbiAgICAgICAgICAgIC8vIGRpdGNoIGFueSBoZWFkZXJzIG9uIHRoZSB0YWJsZVxyXG4gICAgICAgICAgICAocm93KSA9PiAhL148dGg+fF48dGhlYWQ+Ly50ZXN0KHJvdyksXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgICAubWFwKFxyXG4gICAgICAgICAgICAvLyBzcGxpdCByb3cgaW50byBpbmRpdmlkdWFsIGNlbGxzXHJcbiAgICAgICAgICAgIChyb3cpID0+XHJcbiAgICAgICAgICAgICAgcm93XHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgnPHRkPjwvdGQ+JywgJzx0ZD4gPC90ZD4nKSAvL1RPRE86IG1heSBiZSBhbm90aGVyIHdheVxyXG4gICAgICAgICAgICAgICAgLm1hdGNoKC88dGQ+W148XSsvZylcclxuICAgICAgICAgICAgICAgIC5tYXAoKG1hdGNoKSA9PiBtYXRjaC5yZXBsYWNlKC9ePHRkPi8sICcnKSksXHJcbiAgICAgICAgICApO1xyXG5cclxuICAgICAgICByZXR1cm4gY2xlYW5lZEh0bWxEYXRhO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBEZWZhdWx0IGRhdGEgZm9ybWF0IGlzIHN0cmluZywgc28gc3BsaXQgb24gbmV3IGxpbmUsXHJcbiAgICAgIC8vIGFuZCB0aGVuIGVuY2xvc2UgaW4gYW4gYXJyYXkgKGEgcm93IHdpdGggb25lIGNlbGwpOlxyXG4gICAgICByZXR1cm4gZGF0YS5zcGxpdCgnXFxuJykubWFwKCh2YWx1ZSkgPT4gW3ZhbHVlXSk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHJvd3MgPSBwYXJzZURhdGEocGFzdGVWYWx1ZSwgbWltZVR5cGUpO1xyXG5cclxuICAgIC8vIFNwZWNpYWwgY2FzZTogaWYgcm93cy5sZW5ndGggPSAxLCB3ZSBwYXN0ZSB0aGlzIHZhbHVlIGluIGVhY2hcclxuICAgIC8vIHNlbGVjdGVkIGNlbGwuIFRoaXMgbWltaWNzIEV4Y2VsJ3MgcGFzdGUgZnVuY3Rpb25hbGl0eSwgYW5kIHdvcmtzXHJcbiAgICAvLyBhcyBhIHBvb3ItbWFuJ3MgZmlsbC1kb3duLlxyXG4gICAgdmFyIGVkaXRlZENlbGxzID0gW107XHJcbiAgICBpZiAocm93cy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgdmFyIGNlbGxEYXRhID0gcm93c1swXVswXTtcclxuXHJcbiAgICAgIHNlbGYuZm9yRWFjaFNlbGVjdGVkQ2VsbChmdW5jdGlvbiAoZGF0YSwgcm93SW5kZXgsIGNvbE5hbWUpIHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICBkYXRhW3Jvd0luZGV4XVtjb2xOYW1lXSAhPSBudWxsICYmXHJcbiAgICAgICAgICB0eXBlb2YgZGF0YVtyb3dJbmRleF1bY29sTmFtZV0gPT0gJ29iamVjdCdcclxuICAgICAgICApIHtcclxuICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgc2VsZi5kaXNwYXRjaEV2ZW50KCdiZWZvcmViZWdpbmVkaXQnLCB7XHJcbiAgICAgICAgICAgICAgY2VsbDogeyB2YWx1ZTogZGF0YVtyb3dJbmRleF1bY29sTmFtZV0gfSxcclxuICAgICAgICAgICAgICBOYXRpdmVFdmVudDoge30sXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICApIHtcclxuICAgICAgICAgICAgLy8gICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkYXRhW3Jvd0luZGV4XVtjb2xOYW1lXS50ZXh0ID0gY2VsbERhdGE7XHJcbiAgICAgICAgICAgIGVkaXRlZENlbGxzLnB1c2goZGF0YVtyb3dJbmRleF1bY29sTmFtZV0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2YXIgc2VsZWN0aW9ucyA9IFtdO1xyXG4gICAgICBmb3IgKHZhciByb3dJbmRleCA9IDA7IHJvd0luZGV4IDwgcm93cy5sZW5ndGg7IHJvd0luZGV4KyspIHtcclxuICAgICAgICAvLyBSb3dzIG1heSBoYXZlIGJlZW4gbW92ZWQgYnkgdXNlciwgc28gZ2V0IHRoZSBhY3R1YWwgcm93IGluZGV4XHJcbiAgICAgICAgLy8gKGluc3RlYWQgb2YgdGhlIHJvdyBpbmRleCBhdCB3aGljaCB0aGUgcm93IGlzIHJlbmRlcmVkKTpcclxuICAgICAgICB2YXIgcmVhbFJvd0luZGV4ID0gc2VsZi5vcmRlcnMucm93c1tzdGFydFJvd0luZGV4ICsgcm93SW5kZXhdO1xyXG4gICAgICAgIHZhciBjZWxscyA9IHJvd3Nbcm93SW5kZXhdO1xyXG5cclxuICAgICAgICB2YXIgZXhpc3RpbmdSb3dEYXRhID0gc2VsZi52aWV3RGF0YVtyZWFsUm93SW5kZXhdO1xyXG4gICAgICAgIHZhciBuZXdSb3dEYXRhID0gT2JqZWN0LmFzc2lnbih7fSwgZXhpc3RpbmdSb3dEYXRhKTtcclxuXHJcbiAgICAgICAgc2VsZWN0aW9uc1tyZWFsUm93SW5kZXhdID0gW107XHJcblxyXG4gICAgICAgIGZvciAodmFyIGNvbEluZGV4ID0gMDsgY29sSW5kZXggPCBjZWxscy5sZW5ndGg7IGNvbEluZGV4KyspIHtcclxuICAgICAgICAgIHZhciBjb2x1bW4gPSBzY2hlbWFbc3RhcnRDb2xJbmRleCArIGNvbEluZGV4XTtcclxuXHJcbiAgICAgICAgICBpZiAoIWNvbHVtbikge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1Bhc3RlIGRhdGEgZXhjZWVkZWQgZ3JpZCBib3VuZHMuIFNraXBwaW5nLicpO1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB2YXIgY29sdW1uTmFtZSA9IGNvbHVtbi5uYW1lO1xyXG4gICAgICAgICAgdmFyIGNlbGxEYXRhID0gY2VsbHNbY29sSW5kZXhdO1xyXG5cclxuICAgICAgICAgIGlmIChjZWxsRGF0YSA9PT0gdW5kZWZpbmVkIHx8IGNlbGxEYXRhID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIG5ld1Jvd0RhdGFbY29sdW1uTmFtZV0gPSBleGlzdGluZ1Jvd0RhdGFbY29sdW1uTmFtZV07IC8vVE9ETzogY29tcGFyZSB0ZXh0XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgbmV3Um93RGF0YVtjb2x1bW5OYW1lXSAhPSBudWxsICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiBuZXdSb3dEYXRhW2NvbHVtbk5hbWVdID09ICdvYmplY3QnXHJcbiAgICAgICAgICApIHtcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgIHNlbGYuZGlzcGF0Y2hFdmVudCgnYmVmb3JlYmVnaW5lZGl0Jywge1xyXG4gICAgICAgICAgICAgICAgY2VsbDogeyB2YWx1ZTogbmV3Um93RGF0YVtjb2x1bW5OYW1lXSB9LFxyXG4gICAgICAgICAgICAgICAgTmF0aXZlRXZlbnQ6IHt9LFxyXG4gICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgIC8vICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHNlbGVjdGlvbnNbcmVhbFJvd0luZGV4XS5wdXNoKHN0YXJ0Q29sSW5kZXggKyBjb2xJbmRleCk7XHJcblxyXG4gICAgICAgICAgICAgIG5ld1Jvd0RhdGFbY29sdW1uTmFtZV0udGV4dCA9IGNlbGxEYXRhO1xyXG4gICAgICAgICAgICAgIGVkaXRlZENlbGxzLnB1c2gobmV3Um93RGF0YVtjb2x1bW5OYW1lXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlbGYub3JpZ2luYWxEYXRhW3JlYWxSb3dJbmRleF0gPSBuZXdSb3dEYXRhO1xyXG4gICAgICB9XHJcbiAgICAgIHNlbGYuc2VsZWN0aW9ucyA9IHNlbGVjdGlvbnM7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gc2VsZWN0aW9ucyBpcyBhIHNwYXJzZSBhcnJheSwgc28gd2UgY29uZGVuc2U6XHJcbiAgICB2YXIgYWZmZWN0ZWRDZWxscyA9IFtdO1xyXG5cclxuICAgIHNlbGYuc2VsZWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChyb3csIHJvd0luZGV4KSB7XHJcbiAgICAgIGlmIChyb3dJbmRleCA9PT0gdW5kZWZpbmVkKSByZXR1cm47XHJcblxyXG4gICAgICByb3cuZm9yRWFjaChmdW5jdGlvbiAoY29sdW1uSW5kZXgpIHtcclxuICAgICAgICBhZmZlY3RlZENlbGxzLnB1c2goW3Jvd0luZGV4LCBjb2x1bW5JbmRleF0pO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHNlbGYuZGlzcGF0Y2hFdmVudCgnYWZ0ZXJwYXN0ZScsIHtcclxuICAgICAgY2VsbHM6IGFmZmVjdGVkQ2VsbHMsXHJcbiAgICAgIGVkaXRlZENlbGxzOiBlZGl0ZWRDZWxscyxcclxuICAgICAgaXRzZWxmOiBzZWxmLFxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQmVjYXVzZSBvcmlnaW5hbERhdGEgaGFzIGJlZW4gdXBkYXRlZCwgd2UgbXVzdCByZWZyZXNoXHJcbiAgICAvLyB2aWV3RGF0YSB0byBlbnN1cmUgdGhlIG5ldyBjZWxsIHZhbHVlcyBhcmUgcmVuZGVyZWRcclxuICAgIHNlbGYucmVmcmVzaCgpO1xyXG5cclxuICAgIHJldHVybiByb3dzLmxlbmd0aDtcclxuICB9O1xyXG4gIHNlbGYuZ2V0TmV4dFZpc2libGVDb2x1bW5JbmRleCA9IGZ1bmN0aW9uICh2aXNpYmxlQ29sdW1uSW5kZXgpIHtcclxuICAgIHZhciB4LFxyXG4gICAgICBzID0gc2VsZi5nZXRWaXNpYmxlU2NoZW1hKCk7XHJcbiAgICBmb3IgKHggPSAwOyB4IDwgcy5sZW5ndGg7IHggKz0gMSkge1xyXG4gICAgICBpZiAoc1t4XS5jb2x1bW5JbmRleCA9PT0gdmlzaWJsZUNvbHVtbkluZGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIHNbeCArIDFdLmNvbHVtbkluZGV4O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gLTE7XHJcbiAgfTtcclxuICBzZWxmLmdldFZpc2libGVDb2x1bW5JbmRleE9mID0gZnVuY3Rpb24gKGNvbHVtbkluZGV4KSB7XHJcbiAgICB2YXIgeCxcclxuICAgICAgcyA9IHNlbGYuZ2V0VmlzaWJsZVNjaGVtYSgpO1xyXG4gICAgZm9yICh4ID0gMDsgeCA8IHMubGVuZ3RoOyB4ICs9IDEpIHtcclxuICAgICAgaWYgKHNbeF0uY29sdW1uSW5kZXggPT09IGNvbHVtbkluZGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIHg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiAtMTtcclxuICB9O1xyXG4gIHNlbGYucGFzdGUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgIGlmICghc2VsZi5hdHRyaWJ1dGVzLmVkaXRhYmxlKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgZGVmYXVsdFByZXZlbnRlZCA9IHNlbGYuZGlzcGF0Y2hFdmVudCgnYmVmb3JlcGFzdGUnLCB7XHJcbiAgICAgIE5hdGl2ZUV2ZW50OiBldmVudCxcclxuICAgIH0pO1xyXG5cclxuICAgIGlmIChkZWZhdWx0UHJldmVudGVkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgY2xpcGJvYXJkSXRlbXMgPSBuZXcgTWFwKFxyXG4gICAgICBBcnJheS5mcm9tKGV2ZW50LmNsaXBib2FyZERhdGEuaXRlbXMpLm1hcCgoaXRlbSkgPT4gW2l0ZW0udHlwZSwgaXRlbV0pLFxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBTdXBwb3J0ZWQgTUlNRSB0eXBlcywgaW4gb3JkZXIgb2YgcHJlZmVyZW5jZTpcclxuICAgIHZhciBzdXBwb3J0ZWRNaW1lVHlwZXMgPSBbJ3RleHQvaHRtbCcsICd0ZXh0L2NzdicsICd0ZXh0L3BsYWluJ107XHJcblxyXG4gICAgLy8gVGhlIGNsaXBib2FyZCB3aWxsIG9mdGVuIGNvbnRhaW4gdGhlIHNhbWUgZGF0YSBpbiBtdWx0aXBsZSBmb3JtYXRzLFxyXG4gICAgLy8gd2hpY2ggY2FuIGJlIHVzZWQgZGVwZW5kaW5nIG9uIHRoZSBjb250ZXh0IGluIHdoaWNoIGl0J3MgcGFzdGVkLiBIZXJlXHJcbiAgICAvLyB3ZSdsbCBwcmVmZXJlIG1vcmUgc3RydWN0dXJlZCAoSFRNTC9DU1YpIG92ZXIgbGVzcyBzdHJ1Y3R1cmVkLCB3aGVuXHJcbiAgICAvLyBhdmFpbGFibGUsIHNvIHdlIHRyeSB0byBmaW5kIHRob3NlIGZpcnN0OlxyXG4gICAgdmFyIHBhc3RlYWJsZUl0ZW1zID0gc3VwcG9ydGVkTWltZVR5cGVzXHJcbiAgICAgIC5tYXAoKG1pbWVUeXBlKSA9PiBjbGlwYm9hcmRJdGVtcy5nZXQobWltZVR5cGUpKVxyXG4gICAgICAuZmlsdGVyKChpdGVtKSA9PiAhIWl0ZW0pOyAvLyBmaWx0ZXIgb3V0IG5vdC1mb3VuZCBNSU1FIHR5cGVzICg9IHVuZGVmaW5lZClcclxuXHJcbiAgICBpZiAocGFzdGVhYmxlSXRlbXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICAnQ2Fubm90IGZpbmQgc3VwcG9ydGVkIGNsaXBib2FyZCBkYXRhIHR5cGUuIFN1cHBvcnRlZCB0eXBlcyBhcmU6JyxcclxuICAgICAgICBzdXBwb3J0ZWRNaW1lVHlwZXMuam9pbignLCAnKSxcclxuICAgICAgKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBpdGVtVG9QYXN0ZSA9IHBhc3RlYWJsZUl0ZW1zWzBdO1xyXG5cclxuICAgIC8vIGl0ZW1Ub1Bhc3RlIGlzIGNsZWFyZWQgb25jZSBhY2Nlc3NlZCAoZ2V0RGF0YSBvciBnZXRBc1N0cmluZyksXHJcbiAgICAvLyBzbyB3ZSBuZWVkIHRvIHN0b3JlIHRoZSB0eXBlIGhlcmUsIGJlZm9yZSByZWFkaW5nIGl0cyB2YWx1ZTpcclxuICAgIHZhciBwYXN0ZVR5cGUgPSBpdGVtVG9QYXN0ZS50eXBlO1xyXG5cclxuICAgIGl0ZW1Ub1Bhc3RlLmdldEFzU3RyaW5nKGZ1bmN0aW9uIChwYXN0ZVZhbHVlKSB7XHJcbiAgICAgIHNlbGYucGFzdGVEYXRhKFxyXG4gICAgICAgIHBhc3RlVmFsdWUsXHJcbiAgICAgICAgcGFzdGVUeXBlLFxyXG4gICAgICAgIHNlbGYuYWN0aXZlQ2VsbC5yb3dJbmRleCxcclxuICAgICAgICBzZWxmLmdldFZpc2libGVDb2x1bW5JbmRleE9mKHNlbGYuYWN0aXZlQ2VsbC5jb2x1bW5JbmRleCksXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBzZWxmLmRyYXcoKTtcclxuICAgIH0pO1xyXG4gIH07XHJcbiAgc2VsZi5jdXQgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgc2VsZi5jb3B5KGUpO1xyXG4gICAgc2VsZi5mb3JFYWNoU2VsZWN0ZWRDZWxsKGZ1bmN0aW9uIChkYXRhLCBpbmRleCwgY29sTmFtZSkge1xyXG4gICAgICBkYXRhW2luZGV4XVtjb2xOYW1lXSA9ICcnO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuICBzZWxmLmNvcHkgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgaWYgKHNlbGYuZGlzcGF0Y2hFdmVudCgnY29weScsIHsgTmF0aXZlRXZlbnQ6IGUgfSkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKCFzZWxmLmhhc0ZvY3VzIHx8ICFlLmNsaXBib2FyZERhdGEpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdmFyIHQsXHJcbiAgICAgIGQsXHJcbiAgICAgIHRhYmxlUm93cyA9IFtdLFxyXG4gICAgICB0ZXh0Um93cyA9IFtdLFxyXG4gICAgICBvdXRwdXRIZWFkZXJzID0ge30sXHJcbiAgICAgIG91dHB1dEhlYWRlcktleXMsXHJcbiAgICAgIHNEYXRhID0gc2VsZi5nZXRTZWxlY3RlZERhdGEoKSxcclxuICAgICAgcyA9IHNlbGYuZ2V0U2NoZW1hKCk7XHJcbiAgICBmdW5jdGlvbiBodG1sU2FmZSh2KSB7XHJcbiAgICAgIHJldHVybiB2LnJlcGxhY2UoLzwvZywgJyZsdDsnKS5yZXBsYWNlKC8+L2csICcmZ3Q7Jyk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBmQ29weUNlbGwodikge1xyXG4gICAgICB2ID0gdiA9PT0gbnVsbCB8fCB2ID09PSB1bmRlZmluZWQgPyAnJyA6IHY7XHJcbiAgICAgIHJldHVybiAnPHRkPicgKyAodHlwZW9mIHYgPT09ICdzdHJpbmcnID8gaHRtbFNhZmUodikgOiB2KSArICc8L3RkPic7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhZGRIZWFkZXJzKGhlYWRlcnMsIHVzZUh0bWwpIHtcclxuICAgICAgaWYgKCFzLmxlbmd0aCB8fCBoZWFkZXJzLmxlbmd0aCA8IDIpIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgIH1cclxuICAgICAgdmFyIGggPSBbXTtcclxuICAgICAgaWYgKHVzZUh0bWwpIHtcclxuICAgICAgICBoLnB1c2goJzx0cj4nKTtcclxuICAgICAgfVxyXG4gICAgICBzLmZvckVhY2goZnVuY3Rpb24gKGNvbHVtbiwgY29sdW1uSW5kZXgpIHtcclxuICAgICAgICAvLyBpbnRlbnRpb25hbCByZWRlZmluaXRpb24gb2YgY29sdW1uXHJcbiAgICAgICAgY29sdW1uID0gc1tzZWxmLm9yZGVycy5jb2x1bW5zW2NvbHVtbkluZGV4XV07XHJcbiAgICAgICAgaWYgKCFjb2x1bW4uaGlkZGVuICYmIGhlYWRlcnMuaW5kZXhPZihjb2x1bW4ubmFtZSkgIT09IC0xKSB7XHJcbiAgICAgICAgICB2YXIgZXYgPSB7IE5hdGl2ZUV2ZW50OiBlLCBjb2x1bW46IGNvbHVtbiB9O1xyXG4gICAgICAgICAgaWYgKHNlbGYuZGlzcGF0Y2hFdmVudCgnY29weW9uc2NoZW1hJywgZXYpKSB7XHJcbiAgICAgICAgICAgIGNvbHVtbiA9IGV2LmNvbHVtbjtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB2YXIgaFZhbCA9IGNvbHVtbi5uYW1lIHx8IGNvbHVtbi50aXRsZSB8fCAnJztcclxuICAgICAgICAgIGlmICh1c2VIdG1sKSB7XHJcbiAgICAgICAgICAgIGgucHVzaCgnPHRoPicgKyBodG1sU2FmZShoVmFsKSArICc8L3RoPicpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaC5wdXNoKCdcIicgKyBoVmFsLnJlcGxhY2UoL1wiL2csICdcIlwiJykgKyAnXCInKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBoLnB1c2godXNlSHRtbCA/ICc8L3RyPicgOiAnXFxuJyk7XHJcbiAgICAgIHJldHVybiBoLmpvaW4odXNlSHRtbCA/ICcnIDogJywnKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFkZENlbGxWYWx1ZSh2YWwsIHRyUm93LCB0ZXh0Um93LCBjb2x1bW4pIHtcclxuICAgICAgLy8gZXNjYXBlIHN0cmluZ3NcclxuICAgICAgaWYgKHZhbCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsID09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICB2YWwgPSB2YWwudGV4dDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHZhbCAhPT0gbnVsbCAmJiB2YWwgIT09IGZhbHNlICYmIHZhbCAhPT0gdW5kZWZpbmVkICYmIHZhbC5yZXBsYWNlKSB7XHJcbiAgICAgICAgdHJSb3cucHVzaChmQ29weUNlbGwodmFsKSk7XHJcbiAgICAgICAgdGV4dFJvdy5wdXNoKCdcIicgKyB2YWwucmVwbGFjZSgvXCIvZywgJ1wiXCInKSArICdcIicpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBpZiAodmFsICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB0ZXh0Um93LnB1c2godmFsKTtcclxuICAgICAgICB0clJvdy5wdXNoKGZDb3B5Q2VsbCh2YWwpKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgLy8gaXNzdWUgIzY2XHJcbiAgICAgIHRleHRSb3cucHVzaCgnJyk7XHJcbiAgICAgIHRyUm93LnB1c2goJzx0ZD4mbmJzcDs8L3RkPicpO1xyXG4gICAgfVxyXG4gICAgaWYgKHNEYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgc0RhdGEuZm9yRWFjaChmdW5jdGlvbiAocm93KSB7XHJcbiAgICAgICAgdmFyIHJvd0tleXMgPSBPYmplY3Qua2V5cyhyb3cpOyAvLyEhIVxyXG4gICAgICAgIC8vaWYgKCh0eXBlb2Ygcm93W3Jvd0tleXNdKT09J29iamVjdCcpe1xyXG4gICAgICAgIC8vfVxyXG4gICAgICAgIGlmIChyb3cpIHtcclxuICAgICAgICAgIHZhciB0clJvdyA9IFtdLFxyXG4gICAgICAgICAgICB0ZXh0Um93ID0gW10sXHJcbiAgICAgICAgICAgIHNTb3J0ZWQgPSBbXTtcclxuICAgICAgICAgIC8vIEhBQ0s6IGh0dHBzOi8vZ2l0aHViLmNvbS9Ub255R2VybWFuZXJpL2NhbnZhcy1kYXRhZ3JpZC9pc3N1ZXMvMTgxXHJcbiAgICAgICAgICAvLyBJIGNhbid0IHVzZSBzb3J0IGhlcmUgb3IgTygxKSwgc28gaGFja3NcclxuICAgICAgICAgIHMuZm9yRWFjaChmdW5jdGlvbiAoY29sdW1uLCBjb2x1bW5JbmRleCkge1xyXG4gICAgICAgICAgICBzU29ydGVkLnB1c2goc1tzZWxmLm9yZGVycy5jb2x1bW5zW2NvbHVtbkluZGV4XV0pO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBzU29ydGVkLmZvckVhY2goZnVuY3Rpb24gKGNvbHVtbiwgY29sdW1uSW5kZXgpIHtcclxuICAgICAgICAgICAgaWYgKHJvd0tleXMuaW5kZXhPZihjb2x1bW4ubmFtZSkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgb3V0cHV0SGVhZGVyc1tjb2x1bW4ubmFtZV0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgIC8vIGVzY2FwZSBzdHJpbmdzXHJcbiAgICAgICAgICAgICAgYWRkQ2VsbFZhbHVlKHJvd1tjb2x1bW4ubmFtZV0sIHRyUm93LCB0ZXh0Um93LCBjb2x1bW4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHRhYmxlUm93cy5wdXNoKHRyUm93LmpvaW4oJycpKTtcclxuICAgICAgICAgIHRleHRSb3dzLnB1c2godGV4dFJvdy5qb2luKCcsJykpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIG91dHB1dEhlYWRlcktleXMgPSBPYmplY3Qua2V5cyhvdXRwdXRIZWFkZXJzKTtcclxuICAgICAgdCA9IGFkZEhlYWRlcnMob3V0cHV0SGVhZGVyS2V5cykgKyB0ZXh0Um93cy5qb2luKCdcXG4nKTtcclxuICAgICAgZCA9XHJcbiAgICAgICAgJzx0YWJsZT4nICtcclxuICAgICAgICBhZGRIZWFkZXJzKG91dHB1dEhlYWRlcktleXMsIHRydWUpICtcclxuICAgICAgICAnPHRyPicgK1xyXG4gICAgICAgIHRhYmxlUm93cy5qb2luKCc8L3RyPjx0cj4nKSArXHJcbiAgICAgICAgJzwvdHI+PC90YWJsZT4nO1xyXG4gICAgICBpZiAob3V0cHV0SGVhZGVyS2V5cy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAvLyBpZiB0aGVyZSB3YXMgb25seSBvbmUgY2VsbCBzZWxlY3RlZCwgcmVtb3ZlIHRoZSBxdW90ZXMgZnJvbSB0aGUgc3RyaW5nXHJcbiAgICAgICAgdCA9IHQuc3Vic3RyaW5nKDEsIHQubGVuZ3RoIC0gMSk7XHJcbiAgICAgIH1cclxuICAgICAgZS5jbGlwYm9hcmREYXRhLnNldERhdGEoJ3RleHQvaHRtbCcsIGQpO1xyXG4gICAgICBlLmNsaXBib2FyZERhdGEuc2V0RGF0YSgndGV4dC9wbGFpbicsIHQpO1xyXG4gICAgICBlLmNsaXBib2FyZERhdGEuc2V0RGF0YSgndGV4dC9jc3YnLCB0KTtcclxuICAgICAgZS5jbGlwYm9hcmREYXRhLnNldERhdGEoJ2FwcGxpY2F0aW9uL2pzb24nLCBKU09OLnN0cmluZ2lmeShzRGF0YSkpO1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9XHJcbiAgfTtcclxuICByZXR1cm47XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./lib/events.js\n");

/***/ }),

/***/ "./lib/intf.js":
/*!*********************!*\
  !*** ./lib/intf.js ***!
  \*********************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/*jslint browser: true, unparam: true, todo: true*/\n\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(self, ctor) {\n  self.scale = 1;\n  self.orders = {\n    rows: [],\n    columns: []\n  };\n  self.appliedInlineStyles = {};\n  self.cellGridAttributes = {};\n  self.treeGridAttributes = {};\n  self.visibleRowHeights = [];\n  self.hasFocus = false;\n  self.activeCell = {\n    columnIndex: 0,\n    rowIndex: 0\n  };\n  self.innerHTML = '';\n  self.storageName = 'canvasDataGrid';\n  self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n  self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n  self.dataType = 'application/x-canvas-datagrid';\n  self.orderBy = null;\n  self.orderDirection = 'asc';\n  self.orderings = {\n    columns: [],\n    add: function add(orderBy, orderDirection, sortFunction) {\n      self.orderings.columns = self.orderings.columns.filter(function (col) {\n        return col.orderBy !== orderBy;\n      });\n      self.orderings.columns.push({\n        orderBy: orderBy,\n        orderDirection: orderDirection,\n        sortFunction: sortFunction\n      });\n    },\n    sort: function sort() {\n      console.warn('grid.orderings.sort has been deprecated. Please use grid.refresh().');\n      self.orderings.columns.forEach(function (col) {\n        self.viewData.sort(col.sortFunction(col.orderBy, col.orderDirection));\n      });\n    }\n  };\n  self.columnFilters = {};\n  self.filters = {};\n  self.frozenRow = 0;\n  self.frozenColumn = 0;\n  self.ellipsisCache = {};\n  self.scrollCache = {\n    x: [],\n    y: []\n  };\n  self.scrollBox = {};\n  self.visibleRows = [];\n  self.visibleCells = [];\n  self.sizes = {\n    rows: {},\n    columns: {},\n    trees: {}\n  };\n  self.selections = [];\n  self.hovers = {};\n  self.attributes = {};\n  self.style = {};\n  self.formatters = {};\n  self.sorters = {};\n  self.parsers = {};\n  self.schemaHashes = {};\n  self.events = {};\n  self.changes = [];\n  self.scrollIndexTop = 0;\n  self.scrollPixelTop = 0;\n  self.scrollIndexLeft = 0;\n  self.scrollPixelLeft = 0;\n  self.childGrids = {};\n  self.openChildren = {};\n  self.scrollModes = ['vertical-scroll-box', 'vertical-scroll-top', 'vertical-scroll-bottom', 'horizontal-scroll-box', 'horizontal-scroll-right', 'horizontal-scroll-left'];\n  self.componentL1Events = {};\n  self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit', 'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid', 'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy', 'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress', 'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid', 'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize', 'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged', 'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n  self.mouse = {\n    x: 0,\n    y: 0\n  };\n\n  self.getSelectedData = function (expandToRow) {\n    var selectedData = [];\n    var schema = self.getSchema();\n    var viewDataLength = self.viewData.length;\n\n    if (viewDataLength === 0) {\n      return [];\n    } // self.selections is a sparse array, so `viewRowIndex` here\n    // will equal the row index as where it's rendered,\n    // not as where it is in the original data array.\n\n\n    self.selections.forEach(function (row, viewRowIndex) {\n      if (!row) {\n        return;\n      }\n\n      if (viewRowIndex === viewDataLength) {\n        return;\n      }\n\n      if (row.length === 0) {\n        selectedData[viewRowIndex] = null;\n        return;\n      }\n\n      selectedData[viewRowIndex] = {};\n      row.forEach(function (col) {\n        if (col === -1 || !schema[col]) {\n          return;\n        }\n\n        var orderedIndex = self.orders.columns[col];\n\n        if (!expandToRow && schema[orderedIndex].hidden) {\n          return;\n        }\n\n        if (self.viewData[viewRowIndex]) {\n          selectedData[viewRowIndex][schema[orderedIndex].name] = self.viewData[viewRowIndex][schema[orderedIndex].name];\n        }\n      });\n    });\n    return selectedData;\n  };\n\n  self.getBoundRowIndexFromViewRowIndex = function (viewRowIndex) {\n    if (self.boundRowIndexMap && self.boundRowIndexMap.has(viewRowIndex)) {\n      return self.boundRowIndexMap.get(viewRowIndex);\n    }\n\n    return undefined;\n  };\n\n  self.getColumnHeaderCellHeight = function () {\n    if (!self.attributes.showColumnHeaders) {\n      return 0;\n    }\n\n    return (self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale;\n  };\n\n  self.getRowHeaderCellWidth = function () {\n    if (!self.attributes.showRowHeaders) {\n      return 0;\n    }\n\n    return (self.sizes.columns[-1] || self.style.rowHeaderCellWidth) * self.scale;\n  };\n\n  self.setStorageData = function () {\n    if (!self.attributes.saveAppearance || !self.attributes.name) {\n      return;\n    }\n\n    var visibility = {};\n    self.getSchema().forEach(function (column) {\n      visibility[column.name] = !column.hidden;\n    });\n    localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n      sizes: {\n        rows: self.sizes.rows,\n        columns: self.sizes.columns\n      },\n      orders: {\n        rows: self.orders.rows,\n        columns: self.orders.columns\n      },\n      orderBy: self.orderBy,\n      orderDirection: self.orderDirection,\n      visibility: visibility\n    }));\n  };\n\n  self.getSchema = function () {\n    return self.schema || self.tempSchema || [];\n  };\n\n  function fillArray(low, high) {\n    var i = [],\n        x;\n\n    for (x = low; x <= high; x += 1) {\n      i[x] = x;\n    }\n\n    return i;\n  }\n\n  self.createColumnOrders = function () {\n    var s = self.getSchema();\n    self.orders.columns = fillArray(0, s.length - 1);\n  };\n\n  self.createRowOrders = function () {\n    self.orders.rows = fillArray(0, self.originalData.length - 1);\n  };\n\n  self.getVisibleSchema = function () {\n    return self.getSchema().filter(function (col) {\n      return !col.hidden;\n    });\n  };\n\n  self.applyDefaultValue = function (row, header, rowIndex) {\n    var d = header.defaultValue || '';\n\n    if (typeof d === 'function') {\n      d = d.apply(self.intf, [header, rowIndex]);\n    }\n\n    row[header.name] = d;\n  };\n\n  self.createNewRowData = function () {\n    self.newRow = {}; // The third argument of applyDefaultValue is the row index\n    // of the row for which to apply the default value. In this\n    // case, we're creating a new row but not yet appending it\n    // to self.originalData, so no row index exists\n\n    var newRowIndex = undefined;\n    self.getSchema().forEach(function forEachHeader(header) {\n      self.applyDefaultValue(self.newRow, header, newRowIndex);\n    });\n  };\n\n  self.getSchemaNameHash = function (key) {\n    var n = 0;\n\n    while (self.schemaHashes[key]) {\n      n += 1;\n      key = key + n;\n    }\n\n    return key;\n  };\n\n  self.filter = function (type) {\n    var f = self.filters[type];\n\n    if (!f && type !== undefined) {\n      console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n      f = self.filters.string;\n    }\n\n    return f;\n  };\n\n  self.hasActiveFilters = function () {\n    return self.columnFilters && Object.keys(self.columnFilters).length > 0;\n  };\n\n  self.getFilteredAndSortedViewData = function (originalData) {\n    // We make a copy of originalData here in order be able to\n    // filter and sort rows without modifying the original array.\n    // Each row is turned into a (row, rowIndex) tuple\n    // so that when we apply filters, we can refer back to the\n    // row's original row number in originalData. This becomes\n    // useful when emitting cell events.\n    var newViewData = originalData.map(function (row, originalRowIndex) {\n      return [row, originalRowIndex];\n    }); // Apply filtering\n\n    var _loop = function _loop() {\n      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          headerName = _Object$entries$_i[0],\n          filterText = _Object$entries$_i[1];\n\n      var header = self.getHeaderByName(headerName);\n\n      if (!header) {\n        return \"continue\";\n      }\n\n      var currentFilterFunction = header.filter || self.filter(header.type || 'string');\n      newViewData = newViewData.filter(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n            row = _ref2[0];\n\n        var cellValue = row[headerName];\n        var shouldIncludeRow = currentFilterFunction(cellValue, filterText);\n        return shouldIncludeRow;\n      });\n    };\n\n    for (var _i = 0, _Object$entries = Object.entries(self.columnFilters); _i < _Object$entries.length; _i++) {\n      var _ret = _loop();\n\n      if (_ret === \"continue\") continue;\n    } // Apply sorting\n\n\n    var _iterator = _createForOfIteratorHelper(self.orderings.columns),\n        _step;\n\n    try {\n      var _loop2 = function _loop2() {\n        var column = _step.value;\n        var sortFn = column.sortFunction(column.orderBy, column.orderDirection);\n        newViewData.sort(function (_ref7, _ref8) {\n          var _ref9 = _slicedToArray(_ref7, 1),\n              rowA = _ref9[0];\n\n          var _ref10 = _slicedToArray(_ref8, 1),\n              rowB = _ref10[0];\n\n          return sortFn(rowA, rowB);\n        });\n      };\n\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        _loop2();\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return {\n      viewData: newViewData.map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 1),\n            row = _ref4[0];\n\n        return row;\n      }),\n      boundRowIndexMap: new Map(newViewData.map(function (_ref5, viewRowIndex) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            _row = _ref6[0],\n            originalRowIndex = _ref6[1];\n\n        return [viewRowIndex, originalRowIndex];\n      }))\n    };\n  };\n\n  self.refresh = function () {\n    var _self$getFilteredAndS = self.getFilteredAndSortedViewData(self.originalData),\n        viewData = _self$getFilteredAndS.viewData,\n        boundRowIndexMap = _self$getFilteredAndS.boundRowIndexMap;\n\n    self.viewData = viewData;\n    self.boundRowIndexMap = boundRowIndexMap;\n    self.resize();\n    self.draw(true);\n  };\n\n  self.getBestGuessDataType = function (columnName, data) {\n    var t,\n        x,\n        l = data.length;\n\n    for (x = 0; x < l; x += 1) {\n      if (data[x] !== undefined && data[x] !== null && [null, undefined].indexOf(data[x][columnName]) !== -1) {\n        t = _typeof(data[x]);\n        return t === 'object' ? 'string' : t;\n      }\n    }\n\n    return 'string';\n  };\n\n  self.drawChildGrids = function () {\n    Object.keys(self.childGrids).forEach(function (gridKey) {\n      self.childGrids[gridKey].draw();\n    });\n  };\n\n  self.resizeChildGrids = function () {\n    Object.keys(self.childGrids).forEach(function (gridKey) {\n      self.childGrids[gridKey].resize();\n    });\n  };\n\n  self.autoScrollZone = function (e, x, y, ctrl) {\n    var setTimer,\n        rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n        columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n\n    if (y !== -1) {\n      if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n        self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n        setTimer = true;\n      }\n\n      if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n        self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n        setTimer = true;\n      }\n    }\n\n    if (y !== -1) {\n      if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n        self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n        setTimer = true;\n      }\n\n      if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n        self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n        setTimer = true;\n      }\n    }\n\n    if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n      self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n    }\n  };\n\n  self.validateColumn = function (c, s) {\n    if (!c.name) {\n      throw new Error('A column must contain at least a name.');\n    }\n\n    if (s.filter(function (i) {\n      return i.name === c.name;\n    }).length > 0) {\n      throw new Error('A column with the name ' + c.name + ' already exists and cannot be added again.');\n    }\n\n    return true;\n  };\n\n  self.setDefaults = function (obj1, obj2, key, def) {\n    obj1[key] = obj2[key] === undefined ? def : obj2[key];\n  };\n\n  self.setAttributes = function () {\n    self.defaults.attributes.forEach(function eachAttribute(i) {\n      self.setDefaults(self.attributes, self.args, i[0], i[1]);\n    });\n  };\n\n  self.setStyle = function () {\n    self.defaults.styles.forEach(function eachStyle(i) {\n      self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n    });\n  };\n\n  self.autosize = function (colName) {\n    self.getVisibleSchema().forEach(function (col, colIndex) {\n      if (col.name === colName || colName === undefined) {\n        self.sizes.columns[colIndex] = Math.max(self.findColumnMaxTextLength(col.name), self.style.minColumnWidth);\n      }\n    });\n    self.sizes.columns[-1] = self.findColumnMaxTextLength('cornerCell');\n  };\n\n  self.dispose = function () {\n    if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n      self.canvas.parentNode.removeChild(self.canvas);\n    }\n\n    if (!self.isChildGrid) {\n      document.body.removeChild(self.controlInput);\n    }\n\n    self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n    self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n    self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n    self.eventParent.removeEventListener('click', self.click, false);\n    self.eventParent.removeEventListener('mousemove', self.mousemove);\n    self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n    self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n    self.canvas.removeEventListener('copy', self.copy);\n    self.controlInput.removeEventListener('copy', self.copy);\n    self.controlInput.removeEventListener('cut', self.cut);\n    self.controlInput.removeEventListener('paste', self.paste);\n    self.controlInput.removeEventListener('keypress', self.keypress, false);\n    self.controlInput.removeEventListener('keyup', self.keyup, false);\n    self.controlInput.removeEventListener('keydown', self.keydown, false);\n    window.removeEventListener('resize', self.resize);\n\n    if (self.observer && self.observer.disconnect) {\n      self.observer.disconnect();\n    }\n  };\n\n  self.tryLoadStoredSettings = function () {\n    var s;\n    self.reloadStoredValues();\n\n    if (self.storedSettings && _typeof(self.storedSettings.orders) === 'object' && self.storedSettings.orders !== null) {\n      if (self.storedSettings.orders.rows.length >= (self.viewData || []).length) {\n        self.orders.rows = self.storedSettings.orders.rows;\n      }\n\n      s = self.getSchema();\n\n      if (self.storedSettings.orders.columns.length === s.length) {\n        self.orders.columns = self.storedSettings.orders.columns;\n      }\n\n      self.orderBy = self.storedSettings.orderBy === undefined ? s[0].name : self.storedSettings.orderBy;\n      self.orderDirection = self.storedSettings.orderDirection === undefined ? 'asc' : self.storedSettings.orderDirection;\n\n      if (self.storedSettings.orderBy !== undefined && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n        self.order(self.orderBy, self.orderDirection);\n      }\n    }\n  };\n\n  self.getDomRoot = function () {\n    return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n  };\n\n  self.getFontName = function (fontStyle) {\n    return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n  };\n\n  self.getFontHeight = function (fontStyle) {\n    return parseFloat(fontStyle, 10);\n  };\n\n  self.parseStyleValue = function (key) {\n    if (/Font/.test(key)) {\n      self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n      self.style[key + 'Name'] = self.getFontName(self.style[key]);\n      return;\n    } // when inheriting styles from already instantiated grids, don't parse already parsed values.\n\n\n    if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n      self.style[key] = self.style[key].split(',').map(function (i) {\n        return parseInt(i, 10);\n      });\n    }\n  };\n\n  self.initProp = function (propName) {\n    if (!self.args[propName]) {\n      return;\n    }\n\n    Object.keys(self.args[propName]).forEach(function (key) {\n      self[propName][key] = self.args[propName][key];\n    });\n  };\n\n  self.getStyleProperty = function (key) {\n    if (self.styleKeys.indexOf(key) === -1) {\n      return self.parentNodeStyle[key];\n    }\n\n    return self.style[key];\n  };\n\n  self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n    var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n\n    if (self.styleKeys.indexOf(key) === -1) {\n      self.parentNodeStyle[key] = value;\n    } else {\n      if (/-/.test(key)) {\n        key = self.dehyphenateProperty(key);\n      }\n\n      self.style[key] = value;\n      self.parseStyleValue(key);\n    }\n\n    if (isDim) {\n      self.resize();\n    }\n\n    if (!supressDrawAndEvent) {\n      self.draw(true);\n      self.dispatchEvent('stylechanged', {\n        name: 'style',\n        value: value\n      });\n    }\n  };\n\n  self.reloadStoredValues = function () {\n    if (self.attributes.name && self.attributes.saveAppearance) {\n      try {\n        self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n      } catch (e) {\n        console.warn('Error loading stored values. ' + e.message);\n        self.storedSettings = undefined;\n      }\n\n      if (self.storedSettings) {\n        try {\n          self.storedSettings = JSON.parse(self.storedSettings);\n        } catch (e) {\n          console.warn('could not read settings from localStore', e);\n          self.storedSettings = undefined;\n        }\n      }\n\n      if (self.storedSettings) {\n        if (_typeof(self.storedSettings.sizes) === 'object' && self.storedSettings.sizes !== null) {\n          self.sizes.rows = self.storedSettings.sizes.rows;\n          self.sizes.columns = self.storedSettings.sizes.columns;\n          ['trees', 'columns', 'rows'].forEach(function (i) {\n            if (!self.sizes[i]) {\n              self.sizes[i] = {};\n            }\n          });\n        }\n\n        if (_typeof(self.storedSettings.visibility) === 'object') {\n          self.getSchema().forEach(function (column) {\n            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n              column.hidden = !self.storedSettings.visibility[column.name];\n            }\n          });\n        }\n      }\n    }\n  };\n\n  self.init = function () {\n    if (self.initialized) {\n      return;\n    }\n\n    function addStyleKeyIfNoneExists(key) {\n      if (self.styleKeys.indexOf(key) === -1) {\n        self.styleKeys.push(key);\n      }\n    }\n\n    var publicStyleKeyIntf = {};\n    self.setAttributes();\n    self.setStyle();\n    self.initScrollBox();\n    self.setDom();\n    self.nodeType = 'canvas-datagrid';\n    self.ie = /Trident/.test(window.navigator.userAgent);\n    self.edge = /Edge/.test(window.navigator.userAgent);\n    self.webKit = /WebKit/.test(window.navigator.userAgent);\n    self.moz = /Gecko/.test(window.navigator.userAgent);\n    self.mobile = /Mobile/i.test(window.navigator.userAgent);\n    self.blankValues = [undefined, null, ''];\n    self.cursorGrab = 'grab';\n    self.cursorGrabing = 'grabbing';\n    self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n    self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n    self.pointerLockPosition = {\n      x: 0,\n      y: 0\n    };\n    Object.keys(self.style).forEach(self.parseStyleValue);\n    self.intf.moveSelection = self.moveSelection;\n    self.intf.moveTo = self.moveTo;\n    self.intf.addEventListener = self.addEventListener;\n    self.intf.removeEventListener = self.removeEventListener;\n    self.intf.dispatchEvent = self.dispatchEvent;\n    /**\r\n     * Releases grid resources and removes grid elements.\r\n     * @memberof canvasDatagrid\r\n     * @name dispose\r\n     * @method\r\n     */\n\n    self.intf.dispose = self.dispose;\n    /**\r\n     * Appends the grid to another element later.  Not implemented.\r\n     * @memberof canvasDatagrid\r\n     * @name appendTo\r\n     * @method\r\n     * @param {number} el The element to append the grid to.\r\n     */\n\n    self.intf.appendTo = self.appendTo;\n    self.intf.getVisibleCellByIndex = self.getVisibleCellByIndex;\n    self.intf.filters = self.filters;\n    self.intf.sorters = self.sorters;\n    self.intf.autosize = self.autosize;\n    self.intf.beginEditAt = self.beginEditAt;\n    self.intf.endEdit = self.endEdit;\n    self.intf.setActiveCell = self.setActiveCell;\n    self.intf.forEachSelectedCell = self.forEachSelectedCell;\n    self.intf.scrollIntoView = self.scrollIntoView;\n    self.intf.clearChangeLog = self.clearChangeLog;\n    self.intf.gotoCell = self.gotoCell;\n    self.intf.gotoRow = self.gotoRow;\n    self.intf.getHeaderByName = self.getHeaderByName;\n    self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n    self.intf.findRowScrollTop = self.findRowScrollTop;\n    self.intf.fitColumnToValues = self.fitColumnToValues;\n    self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n    self.intf.disposeContextMenu = self.disposeContextMenu;\n    self.intf.getCellAt = self.getCellAt;\n    self.intf.isCellVisible = self.isCellVisible;\n    self.intf.isRowVisible = self.isRowVisible;\n    self.intf.isColumnVisible = self.isColumnVisible;\n    self.intf.order = self.order;\n    self.intf.draw = self.draw;\n    self.intf.refresh = self.refresh;\n    self.intf.isComponent = self.isComponent;\n    self.intf.selectArea = self.selectArea;\n    self.intf.clipElement = self.clipElement;\n    self.intf.getSchemaFromData = self.getSchemaFromData;\n    self.intf.setFilter = self.setFilter;\n    self.intf.selectRow = self.selectRow;\n    self.intf.parentGrid = self.parentGrid;\n    self.intf.toggleTree = self.toggleTree;\n    self.intf.expandTree = self.expandTree;\n    self.intf.collapseTree = self.collapseTree;\n    self.intf.canvas = self.canvas;\n    self.intf.context = self.ctx;\n    self.intf.insertRow = self.insertRow;\n    self.intf.deleteRow = self.deleteRow;\n    self.intf.addRow = self.addRow;\n    self.intf.insertColumn = self.insertColumn;\n    self.intf.deleteColumn = self.deleteColumn;\n    self.intf.addColumn = self.addColumn;\n    self.intf.getClippingRect = self.getClippingRect;\n    self.intf.setRowHeight = self.setRowHeight;\n    self.intf.setColumnWidth = self.setColumnWidth;\n    self.intf.resetColumnWidths = self.resetColumnWidths;\n    self.intf.resetRowHeights = self.resetRowHeights;\n    self.intf.resize = self.resize;\n    self.intf.selectColumn = self.selectColumn;\n    self.intf.selectRow = self.selectRow;\n    self.intf.selectAll = self.selectAll;\n    self.intf.selectNone = self.selectNone;\n    self.intf.drawChildGrids = self.drawChildGrids;\n    self.intf.assertPxColor = self.assertPxColor;\n    self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n    self.intf.integerToAlpha = self.integerToAlpha;\n    self.intf.copy = self.copy;\n    self.intf.paste = self.paste;\n    self.intf.setStyleProperty = self.setStyleProperty;\n    Object.defineProperty(self.intf, 'defaults', {\n      get: function get() {\n        return {\n          styles: self.defaults.styles.reduce(function (a, i) {\n            a[i[0]] = i[1];\n            return a;\n          }, {}),\n          attributes: self.defaults.attributes.reduce(function (a, i) {\n            a[i[0]] = i[1];\n            return a;\n          }, {})\n        };\n      }\n    });\n    self.styleKeys = Object.keys(self.intf.defaults.styles);\n    self.styleKeys.map(function (i) {\n      return self.hyphenateProperty(i, false);\n    }).forEach(addStyleKeyIfNoneExists);\n    self.styleKeys.map(function (i) {\n      return self.hyphenateProperty(i, true);\n    }).forEach(addStyleKeyIfNoneExists);\n    self.DOMStyles = window.getComputedStyle(document.body, null);\n    self.styleKeys.concat(Object.keys(self.DOMStyles)).forEach(function (key) {\n      // unless this line is here, Object.keys() will not work on <instance>.style\n      publicStyleKeyIntf[key] = undefined;\n      Object.defineProperty(publicStyleKeyIntf, key, {\n        get: function get() {\n          return self.getStyleProperty(key);\n        },\n        set: function set(value) {\n          if (self.initialized) {\n            self.appliedInlineStyles[key] = value;\n          }\n\n          self.setStyleProperty(key, value);\n        }\n      });\n    });\n    Object.defineProperty(self.intf, 'shadowRoot', {\n      get: function get() {\n        return self.shadowRoot;\n      }\n    });\n    Object.defineProperty(self.intf, 'activeCell', {\n      get: function get() {\n        return self.activeCell;\n      }\n    });\n    Object.defineProperty(self.intf, 'hasFocus', {\n      get: function get() {\n        return self.hasFocus;\n      }\n    });\n    Object.defineProperty(self.intf, 'hasActiveFilters', {\n      get: function get() {\n        return self.hasActiveFilters();\n      }\n    });\n    Object.defineProperty(self.intf, 'style', {\n      get: function get() {\n        return publicStyleKeyIntf;\n      },\n      set: function set(valueObject) {\n        Object.keys(valueObject).forEach(function (key) {\n          self.setStyleProperty(key, valueObject[key], true);\n        });\n        self.draw(true);\n        self.dispatchEvent('stylechanged', {\n          name: 'style',\n          value: valueObject\n        });\n      }\n    });\n    Object.defineProperty(self.intf, 'attributes', {\n      value: {}\n    });\n    Object.keys(self.attributes).forEach(function (key) {\n      Object.defineProperty(self.intf.attributes, key, {\n        get: function get() {\n          return self.attributes[key];\n        },\n        set: function set(value) {\n          self.attributes[key] = value;\n\n          if (key === 'name') {\n            self.tryLoadStoredSettings();\n          }\n\n          self.draw(true);\n          self.dispatchEvent('attributechanged', {\n            name: key,\n            value: value[key]\n          });\n        }\n      });\n    });\n\n    self.filters.string = function (value, filterFor) {\n      if (filterFor === self.attributes.blanksText) {\n        return self.blankValues.includes(value == null ? value : String(value).trim());\n      }\n\n      value = String(value);\n      var filterRegExp,\n          regEnd = /\\/(i|g|m)*$/,\n          pattern = regEnd.exec(filterFor),\n          flags = pattern ? pattern[0].substring(1) : '',\n          flagLength = flags.length;\n      self.invalidFilterRegEx = undefined;\n\n      if (filterFor.substring(0, 1) === '/' && pattern) {\n        try {\n          filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n        } catch (e) {\n          self.invalidFilterRegEx = e;\n          return;\n        }\n\n        return filterRegExp.test(value);\n      }\n\n      return value.toString ? value.toString().toLocaleUpperCase().indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n    };\n\n    self.filters.number = function (value, filterFor) {\n      if (filterFor === self.attributes.blanksText) {\n        return self.blankValues.includes(value == null ? value : String(value).trim());\n      }\n\n      if (!filterFor) {\n        return true;\n      }\n\n      return value === filterFor;\n    };\n\n    ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n    self.applyComponentStyle(false, self.intf);\n    self.reloadStoredValues();\n\n    if (self.args.data) {\n      self.intf.data = self.args.data;\n    }\n\n    if (self.intf.innerText || self.intf.textContent) {\n      if (self.intf.dataType === 'application/x-canvas-datagrid') {\n        self.intf.dataType = 'application/json+x-canvas-datagrid';\n      }\n\n      self.intf.data = self.intf.innerText || self.intf.textContent;\n    }\n\n    if (self.args.schema) {\n      self.intf.schema = self.args.schema;\n    }\n\n    if (self.isChildGrid || !self.isComponent) {\n      requestAnimationFrame(function () {\n        self.resize(true);\n      });\n    } else {\n      self.resize(true);\n    }\n\n    self.initialized = true;\n    return self;\n  };\n  /**\r\n   * Removes focus from the grid.\r\n   * @memberof canvasDatagrid\r\n   * @name blur\r\n   * @method\r\n   */\n\n\n  self.intf.blur = function (e) {\n    self.hasFocus = false;\n  };\n  /**\r\n   * Focuses on the grid.\r\n   * @memberof canvasDatagrid\r\n   * @name focus\r\n   * @method\r\n   */\n\n\n  self.intf.focus = function () {\n    self.hasFocus = true;\n    self.controlInput.focus();\n  };\n\n  if (self.shadowRoot || self.isChildGrid) {\n    Object.defineProperty(self.intf, 'height', {\n      get: function get() {\n        if (self.shadowRoot) {\n          return self.shadowRoot.height;\n        }\n\n        return self.parentNode.height;\n      },\n      set: function set(value) {\n        if (self.shadowRoot) {\n          self.shadowRoot.height = value;\n        } else {\n          self.parentNode.height = value;\n        }\n\n        self.resize(true);\n      }\n    });\n    Object.defineProperty(self.intf, 'width', {\n      get: function get() {\n        if (self.shadowRoot) {\n          return self.shadowRoot.width;\n        }\n\n        return self.parentNode.width;\n      },\n      set: function set(value) {\n        if (self.shadowRoot) {\n          self.shadowRoot.width = value;\n        } else {\n          self.parentNode.width = value;\n        }\n\n        self.resize(true);\n      }\n    });\n    Object.defineProperty(self.intf, 'parentNode', {\n      get: function get() {\n        return self.parentNode;\n      },\n      set: function set(value) {\n        if (!self.isChildGrid) {\n          throw new TypeError('Cannot set property parentNode which has only a getter');\n        }\n\n        self.parentNode = value;\n      }\n    });\n  }\n\n  Object.defineProperty(self.intf, 'visibleRowHeights', {\n    get: function get() {\n      return self.visibleRowHeights;\n    }\n  });\n  Object.defineProperty(self.intf, 'openChildren', {\n    get: function get() {\n      return self.openChildren;\n    }\n  });\n  Object.defineProperty(self.intf, 'childGrids', {\n    get: function get() {\n      return Object.keys(self.childGrids).map(function (gridId) {\n        return self.childGrids[gridId];\n      });\n    }\n  });\n  Object.defineProperty(self.intf, 'isChildGrid', {\n    get: function get() {\n      return self.isChildGrid;\n    }\n  });\n  Object.defineProperty(self, 'cursor', {\n    get: function get() {\n      return self.parentNodeStyle.cursor;\n    },\n    set: function set(value) {\n      if (value === 'cell') {\n        value = 'default';\n      }\n\n      if (self.currentCursor !== value) {\n        self.parentNodeStyle.cursor = value;\n        self.currentCursor = value;\n      }\n    }\n  });\n  Object.defineProperty(self.intf, 'orderDirection', {\n    get: function get() {\n      return self.orderDirection;\n    },\n    set: function set(value) {\n      if (value !== 'desc') {\n        value = 'asc';\n      }\n\n      self.orderDirection = value;\n      self.order(self.orderBy, self.orderDirection);\n    }\n  });\n  Object.defineProperty(self.intf, 'orderBy', {\n    get: function get() {\n      return self.orderBy;\n    },\n    set: function set(value) {\n      if (self.getSchema().find(function (col) {\n        return col.name === value;\n      }) === undefined) {\n        throw new Error('Cannot sort by unknown column name.');\n      }\n\n      self.orderBy = value;\n      self.order(self.orderBy, self.orderDirection);\n    }\n  });\n\n  if (self.isComponent) {\n    Object.defineProperty(self.intf, 'offsetHeight', {\n      get: function get() {\n        return self.canvas.offsetHeight;\n      }\n    });\n    Object.defineProperty(self.intf, 'offsetWidth', {\n      get: function get() {\n        return self.canvas.offsetWidth;\n      }\n    });\n  }\n\n  Object.defineProperty(self.intf, 'scrollHeight', {\n    get: function get() {\n      return self.scrollBox.scrollHeight;\n    }\n  });\n  Object.defineProperty(self.intf, 'scrollWidth', {\n    get: function get() {\n      return self.scrollBox.scrollWidth;\n    }\n  });\n  Object.defineProperty(self.intf, 'scrollTop', {\n    get: function get() {\n      return self.scrollBox.scrollTop;\n    },\n    set: function set(value) {\n      self.scrollBox.scrollTop = value;\n    }\n  });\n  Object.defineProperty(self.intf, 'scrollLeft', {\n    get: function get() {\n      return self.scrollBox.scrollLeft;\n    },\n    set: function set(value) {\n      self.scrollBox.scrollLeft = value;\n    }\n  });\n  Object.defineProperty(self.intf, 'sizes', {\n    get: function get() {\n      return self.sizes;\n    }\n  });\n  Object.defineProperty(self.intf, 'parentDOMNode', {\n    get: function get() {\n      return self.parentDOMNode;\n    }\n  });\n  Object.defineProperty(self.intf, 'input', {\n    get: function get() {\n      return self.input;\n    }\n  });\n  Object.defineProperty(self.intf, 'controlInput', {\n    get: function get() {\n      return self.controlInput;\n    }\n  });\n  Object.defineProperty(self.intf, 'currentCell', {\n    get: function get() {\n      return self.currentCell;\n    }\n  });\n  Object.defineProperty(self.intf, 'visibleCells', {\n    get: function get() {\n      return self.visibleCells;\n    }\n  });\n  Object.defineProperty(self.intf, 'visibleRows', {\n    get: function get() {\n      return self.visibleRows;\n    }\n  });\n  Object.defineProperty(self.intf, 'selections', {\n    get: function get() {\n      return self.selections;\n    }\n  });\n  Object.defineProperty(self.intf, 'dragMode', {\n    get: function get() {\n      return self.dragMode;\n    }\n  });\n  Object.defineProperty(self.intf, 'changes', {\n    get: function get() {\n      return self.changes;\n    }\n  });\n  self.intf.formatters = self.formatters;\n  Object.defineProperty(self.intf, 'dataType', {\n    get: function get() {\n      return self.dataType;\n    },\n    set: function set(value) {\n      if (!self.parsers[value]) {\n        throw new Error('No parser for MIME type ' + value);\n      }\n\n      self.dataType = value;\n    }\n  });\n  self.eventNames.forEach(function (eventName) {\n    Object.defineProperty(self.intf, 'on' + eventName, {\n      get: function get() {\n        return self.componentL1Events[eventName];\n      },\n      set: function set(value) {\n        self.events[eventName] = [];\n        self.componentL1Events[eventName] = value;\n\n        if (!value) {\n          return;\n        }\n\n        self.addEventListener(eventName, value);\n      }\n    });\n  });\n  Object.defineProperty(self.intf, 'frozenRow', {\n    get: function get() {\n      return self.frozenRow;\n    },\n    set: function set(val) {\n      if (isNaN(val)) {\n        throw new TypeError('Expected value for frozenRow to be a number.');\n      }\n\n      if (self.visibleRows.length < val) {\n        throw new RangeError('Cannot set a value larger than the number of visible rows.');\n      }\n\n      self.frozenRow = val;\n    }\n  });\n  Object.defineProperty(self.intf, 'frozenColumn', {\n    get: function get() {\n      return self.frozenColumn;\n    },\n    set: function set(val) {\n      if (isNaN(val)) {\n        throw new TypeError('Expected value for frozenRow to be a number.');\n      }\n\n      if (self.getVisibleSchema().length < val) {\n        throw new RangeError('Cannot set a value larger than the number of visible columns.');\n      }\n\n      self.frozenColumn = val;\n    }\n  });\n  Object.defineProperty(self.intf, 'scrollIndexRect', {\n    get: function get() {\n      return {\n        top: self.scrollIndexTop,\n        right: self.scrollIndexRight,\n        bottom: self.scrollIndexBottom,\n        left: self.scrollIndexLeft\n      };\n    }\n  });\n  Object.defineProperty(self.intf, 'scrollPixelRect', {\n    get: function get() {\n      return {\n        top: self.scrollPixelTop,\n        right: self.scrollPixelRight,\n        bottom: self.scrollPixelBottom,\n        left: self.scrollPixelLeft\n      };\n    }\n  });\n  Object.defineProperty(self.intf, 'rowOrder', {\n    get: function get() {\n      return self.orders.rows;\n    },\n    set: function set(val) {\n      if (!Array.isArray(val)) {\n        throw new TypeError('Value must be an array.');\n      }\n\n      if (!self.originalData || val.length < self.originalData.length) {\n        throw new RangeError('Array length must be equal to or greater than number of rows.');\n      }\n\n      self.orders.rows = val;\n    }\n  });\n  Object.defineProperty(self.intf, 'columnOrder', {\n    get: function get() {\n      return self.orders.columns;\n    },\n    set: function set(val) {\n      if (!Array.isArray(val)) {\n        throw new TypeError('Value must be an array.');\n      }\n\n      if (val.length < self.getSchema().length) {\n        throw new RangeError('Array length must be equal to or greater than number of columns.');\n      }\n\n      self.orders.columns = val;\n    }\n  });\n  Object.defineProperty(self.intf, 'selectionBounds', {\n    get: function get() {\n      return self.getSelectionBounds();\n    }\n  });\n  Object.defineProperty(self.intf, 'selectedRows', {\n    get: function get() {\n      return self.getSelectedData(true);\n    }\n  });\n  Object.defineProperty(self.intf, 'selectedCells', {\n    get: function get() {\n      return self.getSelectedData();\n    }\n  });\n  Object.defineProperty(self.intf, 'visibleSchema', {\n    get: function get() {\n      return self.getVisibleSchema().map(function eachDataRow(col) {\n        return col;\n      });\n    }\n  });\n  Object.defineProperty(self.intf, 'treeGridAttributes', {\n    get: function get() {\n      return self.treeGridAttributes;\n    },\n    set: function setTreeGridAttributes(value) {\n      self.treeGridAttributes = value;\n    }\n  });\n  Object.defineProperty(self.intf, 'cellGridAttributes', {\n    get: function get() {\n      return self.cellGridAttributes;\n    },\n    set: function setCellGridAttributes(value) {\n      self.cellGridAttributes = value;\n    }\n  });\n  Object.defineProperty(self.intf, 'ctx', {\n    get: function get() {\n      return self.ctx;\n    }\n  });\n  Object.defineProperty(self.intf, 'schema', {\n    get: function schemaGetter() {\n      return self.getSchema();\n    },\n    set: function schemaSetter(value) {\n      if (value === undefined) {\n        // Issue #89 - allow schema to be set to initialized state\n        self.schema = undefined;\n        self.tempSchema = undefined;\n        self.dispatchEvent('schemachanged', {\n          schema: undefined\n        });\n        return;\n      }\n\n      if (!Array.isArray(value) || _typeof(value[0]) !== 'object') {\n        throw new Error('Schema must be an array of objects.');\n      }\n\n      if (value[0].name === undefined) {\n        throw new Error('Expected schema to contain an object with at least a name property.');\n      }\n\n      self.schema = value.map(function eachSchemaColumn(column, index) {\n        column.width = column.width || self.style.cellWidth;\n        column.filter = column.filter || self.filter(column.type);\n        column.type = column.type || 'string';\n        column.index = index;\n        column.columnIndex = index;\n        column.rowIndex = -1;\n        return column;\n      });\n      self.tempSchema = undefined;\n      self.createNewRowData();\n      self.createColumnOrders();\n      self.tryLoadStoredSettings();\n\n      if (self.storedSettings && _typeof(self.storedSettings.visibility) === 'object') {\n        self.schema.forEach(function hideEachSchemaColumn(column, index) {\n          if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n            column.hidden = !self.storedSettings.visibility[column.name];\n          }\n        });\n      }\n\n      self.resize(true);\n      self.dispatchEvent('schemachanged', {\n        schema: self.schema\n      });\n    }\n  });\n  /**\r\n   * Gets an array of currently registered MIME types.\r\n   * @memberof canvasDatagrid\r\n   * @name getDataTypes\r\n   * @method\r\n   */\n\n  self.intf.getTypes = function () {\n    return Object.keys(self.parsers);\n  };\n\n  self.parseInnerHtml = function (data) {\n    if (!data || /^ +$/.test(data)) {\n      return [];\n    }\n\n    try {\n      data = JSON.parse(data);\n    } catch (e) {\n      console.warn(Error('Cannot parse application/json+x-canvas-datagrid formated data. ' + e.message + '  \\nNote: canvas-datagrid.innerHTML is for string data only.  ' + 'Use the canvas-datagrid.data property to set object data.'));\n    }\n\n    return data;\n  };\n\n  self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n    self.parsers['application/x-canvas-datagrid'](self.parseInnerHtml(data), function (data, schema) {\n      return callback(data, schema);\n    });\n  };\n\n  self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n    return callback(data);\n  };\n\n  self.intf.parsers = self.parsers; // send to dataType ETL function to extract from input data\n  // and transform into native [{}, {}] format\n\n  self.etl = function (data, callback) {\n    if (!self.intf.parsers[self.dataType]) {\n      throw new Error('Unsupported data type.');\n    }\n\n    self.intf.parsers[self.dataType](data, function (data, schema) {\n      // set the unfiltered/sorted data array\n      self.originalData = data;\n      self.viewData = Array.from(self.originalData);\n\n      if (Array.isArray(schema)) {\n        self.schema = schema;\n      } // Issue #89 - allow schema to be auto-created every time data is set\n\n\n      if (self.attributes.autoGenerateSchema) {\n        self.schema = self.getSchemaFromData(data);\n      }\n\n      if (!self.schema) {\n        self.tempSchema = self.getSchemaFromData(data);\n      }\n\n      if (self.getSchema()) {\n        self.createColumnOrders();\n      } // apply filter, sort, etc to incoming dataset, set viewData:\n\n\n      self.refresh(); // empty data was set\n\n      if (!self.schema && (self.originalData || []).length === 0) {\n        self.tempSchema = [{\n          name: ''\n        }];\n      }\n\n      self.fitColumnToValues('cornerCell', true);\n\n      if (self.tempSchema && !self.schema || self.attributes.autoGenerateSchema) {\n        self.createColumnOrders();\n        self.dispatchEvent('schemachanged', {\n          schema: self.tempSchema\n        });\n      }\n\n      callback();\n    });\n  };\n\n  Object.defineProperty(self.intf, 'viewData', {\n    get: function get() {\n      return self.viewData;\n    }\n  });\n  Object.defineProperty(self.intf, 'boundData', {\n    get: function get() {\n      return self.originalData;\n    }\n  });\n  Object.defineProperty(self.intf, 'data', {\n    get: function dataGetter() {\n      return self.originalData;\n    },\n    set: function dataSetter(value) {\n      self.etl(value, function () {\n        self.changes = [];\n        self.createNewRowData();\n\n        if (self.attributes.autoResizeColumns && self.originalData.length > 0 && self.storedSettings === undefined) {\n          self.autosize();\n        } // set the header column to fit the numbers in it\n\n\n        self.fitColumnToValues('cornerCell', true);\n        self.createRowOrders();\n        self.tryLoadStoredSettings();\n        self.dispatchEvent('datachanged', {\n          data: self.originalData\n        });\n        self.resize(true);\n      });\n    }\n  });\n\n  self.initScrollBox = function () {\n    var sHeight = 0,\n        sWidth = 0,\n        scrollTop = 0,\n        scrollLeft = 0,\n        scrollHeight = 0,\n        scrollWidth = 0,\n        scrollBoxHeight = 20,\n        scrollBoxWidth = 20;\n\n    function setScrollTop(value, preventScrollEvent) {\n      if (isNaN(value)) {\n        throw new Error('ScrollTop value must be a number');\n      }\n\n      if (value < 0) {\n        value = 0;\n      }\n\n      if (value > scrollHeight) {\n        value = scrollHeight;\n      }\n\n      if (scrollHeight < 0) {\n        value = 0;\n      }\n\n      scrollTop = value;\n\n      if (!preventScrollEvent) {\n        self.scroll();\n      }\n    }\n\n    function setScrollLeft(value, preventScrollEvent) {\n      if (isNaN(value)) {\n        throw new Error('ScrollLeft value must be a number');\n      }\n\n      if (value < 0) {\n        value = 0;\n      }\n\n      if (value > scrollWidth) {\n        value = scrollWidth;\n      }\n\n      if (scrollWidth < 0) {\n        value = 0;\n      }\n\n      scrollLeft = value;\n\n      if (!preventScrollEvent) {\n        self.scroll();\n      }\n    }\n\n    self.scrollBox.toString = function () {\n      return '{\"width\": ' + scrollWidth.toFixed(2) + ', \"height\": ' + scrollHeight.toFixed(2) + ', \"left\": ' + scrollLeft.toFixed(2) + ', \"top\": ' + scrollTop.toFixed(2) + ', \"widthRatio\": ' + self.scrollBox.widthBoxRatio.toFixed(5) + ', \"heightRatio\": ' + self.scrollBox.heightBoxRatio.toFixed(5) + '}';\n    };\n\n    self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n      setScrollLeft(x, true);\n      setScrollTop(y, supressDrawEvent);\n    };\n\n    Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n      get: function get() {\n        return scrollBoxHeight;\n      },\n      set: function set(value) {\n        scrollBoxHeight = value;\n      }\n    });\n    Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n      get: function get() {\n        return scrollBoxWidth;\n      },\n      set: function set(value) {\n        scrollBoxWidth = value;\n      }\n    });\n    Object.defineProperty(self.scrollBox, 'height', {\n      get: function get() {\n        return sHeight;\n      },\n      set: function set(value) {\n        sHeight = value;\n      }\n    });\n    Object.defineProperty(self.scrollBox, 'width', {\n      get: function get() {\n        return sWidth;\n      },\n      set: function set(value) {\n        sWidth = value;\n      }\n    });\n    Object.defineProperty(self.scrollBox, 'scrollTop', {\n      get: function get() {\n        return scrollTop;\n      },\n      set: setScrollTop\n    });\n    Object.defineProperty(self.scrollBox, 'scrollLeft', {\n      get: function get() {\n        return scrollLeft;\n      },\n      set: setScrollLeft\n    });\n    Object.defineProperty(self.scrollBox, 'scrollHeight', {\n      get: function get() {\n        return scrollHeight;\n      },\n      set: function set(value) {\n        if (scrollTop > value) {\n          scrollTop = Math.max(value, 0);\n        }\n\n        scrollHeight = value;\n      }\n    });\n    Object.defineProperty(self.scrollBox, 'scrollWidth', {\n      get: function get() {\n        return scrollWidth;\n      },\n      set: function set(value) {\n        if (scrollLeft > value) {\n          scrollLeft = Math.max(value, 0);\n        }\n\n        scrollWidth = value;\n      }\n    });\n  };\n\n  return;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/intf.js\n");

/***/ }),

/***/ "./lib/main.js":
/*!*********************!*\
  !*** ./lib/main.js ***!
  \*********************/
/*! namespace exports */
/*! export default [provided] [used in main] [usage prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ canvasDatagrid; }\n/* harmony export */ });\n/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ \"./lib/component.js\");\n/* harmony import */ var _defaults__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./defaults */ \"./lib/defaults.js\");\n/* harmony import */ var _draw__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./draw */ \"./lib/draw.js\");\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./events */ \"./lib/events.js\");\n/* harmony import */ var _touch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./touch */ \"./lib/touch.js\");\n/* harmony import */ var _intf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./intf */ \"./lib/intf.js\");\n/* harmony import */ var _contextMenu__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./contextMenu */ \"./lib/contextMenu.js\");\n/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dom */ \"./lib/dom.js\");\n/* harmony import */ var _publicMethods__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./publicMethods */ \"./lib/publicMethods.js\");\n/*jslint browser: true, unparam: true, todo: true, evil: true*/\n\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n\n\n\n\n\n\n\n\n\nvar webComponent = (0,_component__WEBPACK_IMPORTED_MODULE_0__.default)();\nvar modules = [_defaults__WEBPACK_IMPORTED_MODULE_1__.default, _draw__WEBPACK_IMPORTED_MODULE_2__.default, _events__WEBPACK_IMPORTED_MODULE_3__.default, _touch__WEBPACK_IMPORTED_MODULE_4__.default, _intf__WEBPACK_IMPORTED_MODULE_5__.default, _contextMenu__WEBPACK_IMPORTED_MODULE_6__.default, _dom__WEBPACK_IMPORTED_MODULE_7__.default, _publicMethods__WEBPACK_IMPORTED_MODULE_8__.default];\n\nfunction Grid(args) {\n  args = args || {};\n  var self = {};\n  self.isComponent = args.component === undefined;\n  self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n\n  if (self.isChildGrid) {\n    self.intf = {};\n  } else {\n    self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : document.createElement('canvas');\n  }\n\n  self.args = args;\n  self.intf.args = args;\n  self.applyComponentStyle = webComponent.applyComponentStyle;\n  self.hyphenateProperty = webComponent.hyphenateProperty;\n  self.dehyphenateProperty = webComponent.dehyphenateProperty;\n\n  self.createGrid = function grid(args) {\n    args.component = false;\n    return new Grid(args);\n  };\n\n  modules.forEach(function (module) {\n    module(self);\n  });\n\n  if (self.isChildGrid) {\n    self.shadowRoot = args.parentNode.shadowRoot;\n    self.parentNode = args.parentNode;\n  } else {\n    self.shadowRoot = self.intf.attachShadow({\n      mode: 'open'\n    });\n    self.parentNode = self.shadowRoot;\n  }\n\n  self.init();\n  return self.intf;\n}\n\nif (window.HTMLElement) {\n  Grid.prototype = Object.create(window.HTMLElement.prototype);\n} // export web component\n\n\nif (window.customElements) {\n  Grid.observedAttributes = webComponent.getObservableAttributes();\n  Grid.prototype.disconnectedCallback = webComponent.disconnectedCallback;\n  Grid.prototype.attributeChangedCallback = webComponent.attributeChangedCallback;\n  Grid.prototype.connectedCallback = webComponent.connectedCallback;\n  Grid.prototype.adoptedCallback = webComponent.adoptedCallback;\n  window.customElements.define('canvas-datagrid', Grid);\n} // export global\n\n\nif (window && !window.canvasDatagrid && !window.require && // Present to exclude global declarations from ES Module bundles\n!window.EXCLUDE_GLOBAL) {\n  window.canvasDatagrid = function (args) {\n    return new Grid(args);\n  };\n} // export amd loader\n\n\nfunction canvasDatagrid(args) {\n  args = args || {};\n  var i,\n      tKeys = ['style', 'formatters', 'sorters', 'filters', 'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n\n  if (window.customElements) {\n    i = document.createElement('canvas-datagrid');\n    Object.keys(args).forEach(function (argKey) {\n      // set data and parentNode after everything else\n      if (argKey === 'data') {\n        return;\n      }\n\n      if (argKey === 'parentNode') {\n        return;\n      } // top level keys in args\n\n\n      if (tKeys.indexOf(argKey) !== -1) {\n        tKeys.forEach(function (tKey) {\n          if (args[tKey] === undefined || tKey !== argKey) {\n            return;\n          }\n\n          if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n            if (_typeof(args[tKey]) === 'object' && args[tKey] !== null) {\n              Object.keys(args[tKey]).forEach(function (sKey) {\n                i[tKey][sKey] = args[tKey][sKey];\n              });\n            }\n          } else {\n            i[tKey] = args[tKey];\n          }\n        });\n        return;\n      } // all others are attribute level keys\n\n\n      i.attributes[argKey] = args[argKey];\n    });\n\n    if (args.data) {\n      i.data = args.data;\n    } // add to the dom very last to avoid redraws\n\n\n    if (args.parentNode) {\n      args.parentNode.appendChild(i);\n    }\n\n    return i;\n  }\n\n  args.component = false;\n  i = new Grid(args);\n\n  if (args.parentNode && args.parentNode.appendChild) {\n    args.parentNode.appendChild(i);\n  }\n\n  return i;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/main.js\n");

/***/ }),

/***/ "./lib/publicMethods.js":
/*!******************************!*\
  !*** ./lib/publicMethods.js ***!
  \******************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/*jslint browser: true, unparam: true, todo: true*/\n\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(self) {\n  /**\r\n   * Converts a integer into a letter A - ZZZZZ...\r\n   * @memberof canvasDatagrid\r\n   * @name integerToAlpha\r\n   * @method\r\n   * @param {column} n The number to convert.\r\n   */\n  self.integerToAlpha = function (n) {\n    var ordA = 'a'.charCodeAt(0),\n        ordZ = 'z'.charCodeAt(0),\n        len = ordZ - ordA + 1,\n        s = '';\n\n    while (n >= 0) {\n      s = String.fromCharCode(n % len + ordA) + s;\n      n = Math.floor(n / len) - 1;\n    }\n\n    return s;\n  };\n  /**\r\n   * Inserts a new column before the specified index into the schema.\r\n   * @tutorial schema\r\n   * @memberof canvasDatagrid\r\n   * @name insertColumn\r\n   * @method\r\n   * @param {column} c The column to insert into the schema.\r\n   * @param {number} index The index of the column to insert before.\r\n   */\n\n\n  self.insertColumn = function (c, index) {\n    var s = self.getSchema();\n\n    if (s.length < index) {\n      throw new Error('Index is beyond the length of the schema.');\n    }\n\n    self.validateColumn(c, s);\n    s.splice(index, 0, c);\n    self.originalData.forEach(function (row, rowIndex) {\n      self.applyDefaultValue(row, c, rowIndex);\n    });\n    self.intf.schema = s;\n    self.refresh();\n  };\n  /**\r\n   * Deletes a column from the schema at the specified index.\r\n   * @memberof canvasDatagrid\r\n   * @name deleteColumn\r\n   * @tutorial schema\r\n   * @method\r\n   * @param {number} index The index of the column to delete.\r\n   */\n\n\n  self.deleteColumn = function (index) {\n    var schema = self.getSchema(); // remove data matching this column name from data\n\n    self.originalData.forEach(function (row) {\n      delete row[schema[index].name];\n    });\n    schema.splice(index, 1);\n    self.intf.schema = schema;\n    self.refresh();\n  };\n  /**\r\n   * Adds a new column into the schema.\r\n   * @tutorial schema\r\n   * @memberof canvasDatagrid\r\n   * @name addColumn\r\n   * @method\r\n   * @param {column} c The column to add to the schema.\r\n   */\n\n\n  self.addColumn = function (c) {\n    var s = self.getSchema();\n    self.validateColumn(c, s);\n    s.push(c);\n    self.originalData.forEach(function (row, rowIndex) {\n      self.applyDefaultValue(row, c, rowIndex);\n    });\n    self.intf.schema = s;\n    self.refresh();\n  };\n  /**\r\n   * Deletes a row from the dataset at the specified index.\r\n   * @memberof canvasDatagrid\r\n   * @name deleteRow\r\n   * @method\r\n   * @param {number} index The index of the row to delete.\r\n   */\n\n\n  self.deleteRow = function (index) {\n    self.originalData.splice(index, 1);\n    self.setFilter();\n    self.resize(true);\n  };\n  /**\r\n   * Inserts a new row into the dataset before the specified index.\r\n   * @memberof canvasDatagrid\r\n   * @name insertRow\r\n   * @method\r\n   * @param {object} d data.\r\n   * @param {number} index The index of the row to insert before.\r\n   */\n\n\n  self.insertRow = function (d, index) {\n    if (self.originalData.length < index) {\n      throw new Error('Index is beyond the length of the dataset.');\n    }\n\n    self.originalData.splice(index, 0, d);\n    self.getSchema().forEach(function (c) {\n      if (d[c.name] === undefined) {\n        self.applyDefaultValue(self.originalData[index], c, index);\n      }\n    }); // setFilter calls .refresh(), so we need not call it again:\n\n    self.setFilter();\n    self.resize(true);\n  };\n  /**\r\n   * Adds a new row into the dataset.\r\n   * @memberof canvasDatagrid\r\n   * @name addRow\r\n   * @method\r\n   * @param {object} d data.\r\n   */\n\n\n  self.addRow = function (d) {\n    self.originalData.push(d);\n    self.getSchema().forEach(function (c) {\n      if (d[c.name] === undefined) {\n        self.applyDefaultValue(self.originalData[self.originalData.length - 1], c, self.originalData.length - 1);\n      }\n    }); // setFilter calls .refresh(), so we need not call it again:\n\n    self.setFilter();\n    self.resize(true);\n  };\n  /**\r\n   * Sets the height of a given row by index number.\r\n   * @memberof canvasDatagrid\r\n   * @name setRowHeight\r\n   * @method\r\n   * @param {number} rowIndex The index of the row to set.\r\n   * @param {number} height Height to set the row to.\r\n   */\n\n\n  self.setRowHeight = function (rowIndex, height) {\n    self.sizes.rows[rowIndex] = height;\n    self.draw(true);\n  };\n  /**\r\n   * Sets the width of a given column by index number.\r\n   * @memberof canvasDatagrid\r\n   * @name setColumnWidth\r\n   * @method\r\n   * @param {number} colIndex The index of the column to set.\r\n   * @param {number} width Width to set the column to.\r\n   */\n\n\n  self.setColumnWidth = function (colIndex, width) {\n    self.sizes.columns[colIndex] = width;\n    self.draw(true);\n  };\n  /**\r\n   * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\r\n   * @memberof canvasDatagrid\r\n   * @name resetColumnWidths\r\n   * @tutorial schema\r\n   * @method\r\n   */\n\n\n  self.resetColumnWidths = function () {\n    self.sizes.columns = {};\n    self.draw(true);\n  };\n  /**\r\n   * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\r\n   * @memberof canvasDatagrid\r\n   * @name resetRowHeights\r\n   * @tutorial schema\r\n   * @method\r\n   */\n\n\n  self.resetRowHeights = function () {\n    self.sizes.rows = {};\n    self.draw(true);\n  };\n  /**\r\n   * Sets the value of the filter.\r\n   * @memberof canvasDatagrid\r\n   * @name setFilter\r\n   * @method\r\n   * @param {string} column Name of the column to filter.\r\n   * @param {string} value The value to filter for.\r\n   */\n\n\n  self.setFilter = function (column, value) {\n    if (column === undefined && value === undefined) {\n      self.columnFilters = {};\n    } else if (column && (value === '' || value === undefined)) {\n      delete self.columnFilters[column];\n    } else {\n      self.columnFilters[column] = value;\n    }\n\n    self.refresh();\n  };\n  /**\r\n   * Returns the number of pixels to scroll down to line up with row rowIndex.\r\n   * @memberof canvasDatagrid\r\n   * @name findRowScrollTop\r\n   * @method\r\n   * @param {number} rowIndex The row index of the row to scroll find.\r\n   */\n\n\n  self.findRowScrollTop = function (rowIndex) {\n    if (self.scrollCache.y[rowIndex] === undefined) {\n      throw new RangeError(\"Row index \".concat(rowIndex, \" out of range: \").concat(self.scrollCache.y.length, \".\"));\n    }\n\n    return self.scrollCache.y[rowIndex];\n  };\n  /**\r\n   * Returns the number of pixels to scroll to the left to line up with column columnIndex.\r\n   * @memberof canvasDatagrid\r\n   * @name findColumnScrollLeft\r\n   * @method\r\n   * @param {number} columnIndex The column index of the column to find.\r\n   */\n\n\n  self.findColumnScrollLeft = function (columnIndex) {\n    var i = Math.max(columnIndex - 1, 0);\n\n    if (self.scrollCache.x[i] === undefined) {\n      throw new Error('Column index out of range.');\n    }\n\n    return self.scrollCache.x[i] - self.getColumnWidth(self.orders.columns[columnIndex]);\n  };\n  /**\r\n   * Scrolls to the cell at columnIndex x, and rowIndex y.  If you define both rowIndex and columnIndex additional calculations can be made to center the cell using the target cell's height and width.  Defining only one rowIndex or only columnIndex will result in simpler calculations.\r\n   * @memberof canvasDatagrid\r\n   * @name gotoCell\r\n   * @method\r\n   * @param {number} x The column index of the cell to scroll to.\r\n   * @param {number} y The row index of the cell to scroll to.\r\n   * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\r\n   * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\r\n   */\n\n\n  self.gotoCell = function (x, y, offsetX, offsetY) {\n    var targetX = x === undefined ? undefined : self.findColumnScrollLeft(x),\n        targetY = y === undefined ? undefined : self.findRowScrollTop(y),\n        cell,\n        sbw = self.scrollBox.width - (self.scrollBox.verticalBarVisible ? self.style.scrollBarWidth : 0),\n        sbh = self.scrollBox.height - (self.scrollBox.horizontalBarVisible ? self.style.scrollBarWidth : 0);\n    offsetX = offsetX === undefined ? 0 : offsetX;\n    offsetY = offsetY === undefined ? 0 : offsetY;\n    targetX -= sbw * offsetX;\n    targetY -= sbh * offsetY;\n\n    if (x !== undefined && y !== undefined) {\n      self.scrollBox.scrollTo(targetX, targetY);\n      requestAnimationFrame(function () {\n        cell = self.getVisibleCellByIndex(x, y); // HACK: just don't offset if the target cell cannot be seen\n        // TODO: offset does not work on very small grids, not sure why\n\n        if (!cell) {\n          return;\n        }\n\n        targetX += cell.width * offsetX;\n        targetY += cell.height * offsetY;\n        self.scrollBox.scrollTo(targetX, targetY);\n      });\n    } else if (x !== undefined) {\n      self.scrollBox.scrollLeft = targetX;\n    } else if (y !== undefined) {\n      self.scrollBox.scrollTop = targetY;\n    }\n  };\n  /**\r\n   * Scrolls the row y.\r\n   * @memberof canvasDatagrid\r\n   * @name gotoRow\r\n   * @method\r\n   * @param {number} y The row index of the cell to scroll to.\r\n   */\n\n\n  self.gotoRow = function (y) {\n    self.gotoCell(0, y);\n  };\n  /**\r\n   * Scrolls the cell at cell x, row y into view if it is not already.\r\n   * @memberof canvasDatagrid\r\n   * @name scrollIntoView\r\n   * @method\r\n   * @param {number} x The column index of the cell to scroll into view.\r\n   * @param {number} y The row index of the cell to scroll into view.\r\n   * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\r\n   * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\r\n   */\n\n\n  self.scrollIntoView = function (x, y, offsetX, offsetY) {\n    if (self.visibleCells.filter(function (cell) {\n      return (cell.rowIndex === y || y === undefined) && (cell.columnIndex === x || x === undefined) && cell.x > 0 && cell.y > 0 && cell.x + cell.width < self.width && cell.y + cell.height < self.height;\n    }).length === 0) {\n      self.gotoCell(x, y, offsetX, offsetY);\n    }\n  };\n  /**\r\n   * Sets the active cell. Requires redrawing.\r\n   * @memberof canvasDatagrid\r\n   * @name setActiveCell\r\n   * @method\r\n   * @param {number} x The column index of the cell to set active.\r\n   * @param {number} y The row index of the cell to set active.\r\n   */\n\n\n  self.setActiveCell = function (x, y) {\n    if (x < 0) {\n      x = 0;\n    }\n\n    if (y < 0) {\n      y = 0;\n    }\n\n    self.activeCell = {\n      rowIndex: y,\n      columnIndex: x\n    };\n  };\n  /**\r\n   * Removes the selection.\r\n   * @memberof canvasDatagrid\r\n   * @name selectNone\r\n   * @param {boolean} dontDraw Suppress the draw method after the selection change.\r\n   * @method\r\n   */\n\n\n  self.selectNone = function (dontDraw) {\n    self.selections = [];\n    self.dispatchEvent('selectionchanged', {\n      selectedData: self.getSelectedData(),\n      selections: self.selections,\n      selectionBounds: self.selectionBounds\n    });\n\n    if (dontDraw) {\n      return;\n    }\n\n    self.draw();\n  };\n  /**\r\n   * Selects every visible cell.\r\n   * @memberof canvasDatagrid\r\n   * @name selectAll\r\n   * @param {boolean} dontDraw Suppress the draw method after the selection change.\r\n   * @method\r\n   */\n\n\n  self.selectAll = function (dontDraw) {\n    self.selectArea({\n      top: 0,\n      left: -1,\n      right: self.getSchema().length - 1,\n      bottom: self.viewData.length - 1\n    });\n\n    if (dontDraw) {\n      return;\n    }\n\n    self.draw();\n  };\n  /**\r\n   * Returns true if the selected columnIndex is selected on every row.\r\n   * @memberof canvasDatagrid\r\n   * @name isColumnSelected\r\n   * @method\r\n   * @param {number} columnIndex The column index to check.\r\n   */\n\n\n  self.isColumnSelected = function (columnIndex) {\n    var colIsSelected = true;\n    self.viewData.forEach(function (row, rowIndex) {\n      if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n        colIsSelected = false;\n      }\n    });\n    return colIsSelected;\n  };\n  /**\r\n   * Runs the defined method on each selected cell.\r\n   * @memberof canvasDatagrid\r\n   * @name forEachSelectedCell\r\n   * @method\r\n   * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\r\n   * @param {number} expandToRow When true the data in the array is expanded to the entire row.\r\n   */\n\n\n  self.forEachSelectedCell = function (fn, expandToRow) {\n    var d = [],\n        s = expandToRow ? self.getSchema() : self.getVisibleSchema(),\n        l = self.viewData.length;\n    self.selections.forEach(function (row, index) {\n      if (index === l) {\n        return;\n      }\n\n      if (row.length === 0) {\n        d[index] = null;\n        return;\n      }\n\n      d[index] = {};\n      row.forEach(function (col) {\n        if (col === -1 || !s[col]) {\n          return;\n        }\n\n        fn(self.viewData, index, s[col].name);\n      });\n    });\n  };\n  /**\r\n   * Selects a column.\r\n   * @memberof canvasDatagrid\r\n   * @name selectColumn\r\n   * @method\r\n   * @param {number} columnIndex The column index to select.\r\n   * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\r\n   * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\r\n   * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\r\n   */\n\n\n  self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n    var s, e, x;\n\n    function addCol(i) {\n      self.viewData.forEach(function (row, rowIndex) {\n        self.selections[rowIndex] = self.selections[rowIndex] || [];\n\n        if (self.selections[rowIndex].indexOf(i) === -1) {\n          self.selections[rowIndex].push(i);\n        }\n      });\n    }\n\n    function removeCol(i) {\n      self.viewData.forEach(function (row, rowIndex) {\n        self.selections[rowIndex] = self.selections[rowIndex] || [];\n\n        if (self.selections[rowIndex].indexOf(i) !== -1) {\n          self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n        }\n      });\n    }\n\n    if (shift) {\n      if (!self.activeCell) {\n        return;\n      }\n\n      s = Math.min(self.activeCell.columnIndex, columnIndex);\n      e = Math.max(self.activeCell.columnIndex, columnIndex);\n\n      for (x = s; e > x; x += 1) {\n        addCol(x);\n      }\n    }\n\n    if (!ctrl && !shift) {\n      self.selections = [];\n      self.activeCell.columnIndex = columnIndex;\n      self.activeCell.rowIndex = self.scrollIndexTop;\n    }\n\n    if (ctrl && self.isColumnSelected(columnIndex)) {\n      removeCol(columnIndex);\n    } else {\n      addCol(columnIndex);\n    }\n\n    if (supressEvent) {\n      return;\n    }\n\n    self.dispatchEvent('selectionchanged', {\n      selectedData: self.getSelectedData(),\n      selections: self.selections,\n      selectionBounds: self.getSelectionBounds()\n    });\n  };\n  /**\r\n   * Selects a row.\r\n   * @memberof canvasDatagrid\r\n   * @name selectRow\r\n   * @method\r\n   * @param {number} rowIndex The row index to select.\r\n   * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\r\n   * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\r\n   * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\r\n   */\n\n\n  self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n    var x,\n        st,\n        en,\n        s = self.getVisibleSchema();\n\n    function de() {\n      if (supressEvent) {\n        return;\n      }\n\n      self.dispatchEvent('selectionchanged', {\n        selectedData: self.getSelectedData(),\n        selections: self.selections,\n        selectionBounds: self.selectionBounds\n      });\n    }\n\n    function addRow(ri) {\n      self.selections[ri] = [];\n      self.selections[ri].push(-1);\n      s.forEach(function (col, index) {\n        self.selections[ri].push(self.orders.columns.indexOf(col.index));\n      });\n    }\n\n    if (self.dragAddToSelection === false || self.dragObject === undefined) {\n      if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n        if (ctrl) {\n          self.selections[rowIndex] = [];\n          de();\n          return;\n        }\n      }\n    }\n\n    if (self.dragAddToSelection === true || self.dragObject === undefined) {\n      if (shift && self.dragObject === undefined) {\n        if (!self.activeCell) {\n          return;\n        }\n\n        st = Math.min(self.activeCell.rowIndex, rowIndex);\n        en = Math.max(self.activeCell.rowIndex, rowIndex);\n\n        for (x = st; en >= x; x += 1) {\n          addRow(x);\n        }\n      } else {\n        addRow(rowIndex);\n      }\n    }\n\n    de();\n  };\n  /**\r\n   * Collapse a tree grid by row index.\r\n   * @memberof canvasDatagrid\r\n   * @name collapseTree\r\n   * @method\r\n   * @param {number} index The index of the row to collapse.\r\n   */\n\n\n  self.collapseTree = function (rowIndex) {\n    self.dispatchEvent('collapsetree', {\n      childGrid: self.childGrids[rowIndex],\n      data: self.viewData[rowIndex],\n      rowIndex: rowIndex\n    });\n    self.openChildren[rowIndex].blur();\n    self.openChildren[rowIndex].dispose();\n    delete self.openChildren[rowIndex];\n    delete self.sizes.trees[rowIndex];\n    delete self.childGrids[rowIndex];\n    self.dispatchEvent('resizerow', {\n      cellHeight: self.style.cellHeight\n    });\n    self.resize(true);\n    self.draw(true);\n  };\n  /**\r\n   * Expands a tree grid by row index.\r\n   * @memberof canvasDatagrid\r\n   * @name expandTree\r\n   * @method\r\n   * @param {number} index The index of the row to expand.\r\n   */\n\n\n  self.expandTree = function (rowIndex) {\n    var trArgs = self.args.treeGridAttributes || {},\n        columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n        rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n        h = self.sizes.trees[rowIndex] || self.style.treeGridHeight,\n        treeGrid;\n\n    if (!self.childGrids[rowIndex]) {\n      trArgs.debug = self.attributes.debug;\n      trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowIndex : undefined;\n      trArgs.style = trArgs.style || self.style;\n      trArgs.parentNode = {\n        parentGrid: self.intf,\n        nodeType: 'canvas-datagrid-tree',\n        offsetHeight: h,\n        offsetWidth: self.width - rowHeaderCellWidth,\n        header: {\n          width: self.width - rowHeaderCellWidth\n        },\n        offsetLeft: rowHeaderCellWidth,\n        offsetTop: columnHeaderCellHeight,\n        offsetParent: self.intf.parentNode,\n        parentNode: self.intf.parentNode,\n        style: 'tree',\n        data: self.viewData[rowIndex]\n      };\n      treeGrid = self.createGrid(trArgs);\n      self.childGrids[rowIndex] = treeGrid;\n    }\n\n    treeGrid = self.childGrids[rowIndex];\n    treeGrid.visible = true;\n    self.dispatchEvent('expandtree', {\n      treeGrid: treeGrid,\n      data: self.viewData[rowIndex],\n      rowIndex: rowIndex\n    });\n    self.openChildren[rowIndex] = treeGrid;\n    self.sizes.trees[rowIndex] = h;\n    self.dispatchEvent('resizerow', {\n      height: self.style.cellHeight\n    });\n    self.resize(true);\n  };\n  /**\r\n   * Toggles tree grid open and close by row index.\r\n   * @memberof canvasDatagrid\r\n   * @name toggleTree\r\n   * @method\r\n   * @param {number} index The index of the row to toggle.\r\n   */\n\n\n  self.toggleTree = function (rowIndex) {\n    var i = self.openChildren[rowIndex];\n\n    if (i) {\n      return self.collapseTree(rowIndex);\n    }\n\n    self.expandTree(rowIndex);\n  };\n  /**\r\n   * Returns a header from the schema by name.\r\n   * @memberof canvasDatagrid\r\n   * @name getHeaderByName\r\n   * @tutorial schema\r\n   * @method\r\n   * @returns {header} header with the selected name, or undefined.\r\n   * @param {string} name The name of the column to resize.\r\n   */\n\n\n  self.getHeaderByName = function (name) {\n    var x,\n        i = self.getSchema();\n\n    for (x = 0; x < i.length; x += 1) {\n      if (i[x].name === name) {\n        return i[x];\n      }\n    }\n  };\n  /**\r\n   * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\r\n   * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\r\n   * @memberof canvasDatagrid\r\n   * @name fitColumnToValues\r\n   * @method\r\n   * @param {string} name The name of the column to resize.\r\n   */\n\n\n  self.fitColumnToValues = function (name, internal) {\n    if (!self.canvas) {\n      return;\n    }\n\n    self.sizes.columns[name === 'cornerCell' ? -1 : self.getHeaderByName(name).index] = Math.max(self.findColumnMaxTextLength(name), self.style.minColumnWidth);\n\n    if (!internal) {\n      self.resize();\n      self.draw(true);\n    }\n  };\n  /**\r\n   * Checks if a cell is currently visible.\r\n   * @memberof canvasDatagrid\r\n   * @name isCellVisible\r\n   * @overload\r\n   * @method\r\n   * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\r\n   * @param {number} columnIndex The column index of the cell to check.\r\n   * @param {number} rowIndex The row index of the cell to check.\r\n   */\n\n\n  self.isCellVisible = function (cell, rowIndex) {\n    // overload\n    if (rowIndex !== undefined) {\n      return self.visibleCells.filter(function (c) {\n        return c.columnIndex === cell && c.rowIndex === rowIndex;\n      }).length > 0;\n    }\n\n    var x,\n        l = self.visibleCells.length;\n\n    for (x = 0; x < l; x += 1) {\n      if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * Sets the order of the data.\r\n   * @memberof canvasDatagrid\r\n   * @name order\r\n   * @method\r\n   * @param {number} columnName Name of the column to be sorted.\r\n   * @param {string} direction `asc` for ascending or `desc` for descending.\r\n   * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\r\n   * @param {bool} [dontSetStorageData] Don't store this setting for future use.\r\n   */\n\n\n  self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n    var f,\n        c = self.getSchema().filter(function (col) {\n      return col.name === columnName;\n    });\n\n    if (self.dispatchEvent('beforesortcolumn', {\n      name: columnName,\n      direction: direction\n    })) {\n      return;\n    }\n\n    self.orderBy = columnName;\n    self.orderDirection = direction;\n\n    if (!self.viewData || self.viewData.length === 0) {\n      return;\n    }\n\n    if (c.length === 0) {\n      throw new Error('Cannot sort.  No such column name');\n    }\n\n    f = sortFunction || c[0].sorter || self.sorters[c[0].type];\n\n    if (!f && c[0].type !== undefined) {\n      console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n    }\n\n    self.orderings.add(columnName, direction, typeof f === 'function' ? f : self.sorters.string);\n    self.refresh();\n    self.dispatchEvent('sortcolumn', {\n      name: columnName,\n      direction: direction\n    });\n\n    if (dontSetStorageData) {\n      return;\n    }\n\n    self.setStorageData();\n  };\n\n  self.isInGrid = function (e) {\n    if (e.x < 0 || e.x > self.width || e.y < 0 || e.y > self.height) {\n      return false;\n    }\n\n    return true;\n  };\n  /**\r\n   * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\r\n   * @memberof canvasDatagrid\r\n   * @name moveSelection\r\n   * @method\r\n   * @param {number} offsetX The number of columns to offset the selection.\r\n   * @param {number} offsetY The number of rows to offset the selection.\r\n   */\n\n\n  self.moveSelection = function (offsetX, offsetY) {\n    var sel = [];\n    self.selections.forEach(function (row, rowIndex) {\n      sel[rowIndex + offsetY] = [];\n      row.forEach(function (colIndex) {\n        sel[rowIndex + offsetY].push(colIndex + offsetX);\n      });\n    });\n    self.selections = sel;\n  };\n  /**\r\n   * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\r\n   * @memberof canvasDatagrid\r\n   * @name moveTo\r\n   * @method\r\n   * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\r\n   * @param {number} x The column index to start inserting the selection at.\r\n   * @param {number} y The row index to start inserting the selection at.\r\n   */\n\n\n  self.moveTo = function (sel, x, y) {\n    var selectedData = self.getSelectedData(),\n        visibleSchema = self.getVisibleSchema(),\n        selectionLength = sel.length,\n        xi,\n        maxRowLength = -Infinity,\n        minXi = Infinity,\n        yi = y - 1;\n    sel.forEach(function (row, rowIndex) {\n      if (rowIndex === selectionLength) {\n        return;\n      }\n\n      if (row.length === 0) {\n        return;\n      }\n\n      minXi = Math.min(self.getVisibleColumnIndexOf(x), minXi);\n      maxRowLength = Math.max(maxRowLength, row.length);\n      row.forEach(function (colIndex) {\n        // intentional redef of colIndex\n        colIndex = self.getVisibleColumnIndexOf(colIndex);\n\n        if (!visibleSchema[colIndex]) {\n          return;\n        } // TODO:\n\n\n        if (!self.data[rowIndex]) {\n          self.data[rowIndex] = {};\n        } // TODO:\n\n\n        self.data[rowIndex][visibleSchema[colIndex].name] = null;\n      });\n    });\n    sel.forEach(function (row, index) {\n      var lastSourceIndex;\n      yi += 1;\n      xi = self.getVisibleColumnIndexOf(x);\n      row.forEach(function (colIndex, cidx) {\n        colIndex = self.getVisibleColumnIndexOf(colIndex);\n\n        if (cidx > 0) {\n          // this confusing bit of nonsense figures out\n          // if the selection has skipped cells\n          xi += colIndex - lastSourceIndex;\n        }\n\n        lastSourceIndex = colIndex;\n\n        if (colIndex === -1 || !visibleSchema[xi] || !visibleSchema[colIndex] || // TODO:\n        self.data.length - 1 < yi || yi < 0) {\n          return;\n        } // TODO:\n\n\n        if (!self.data[yi]) {\n          self.data[yi] = {};\n        } // TODO:\n\n\n        self.data[yi][visibleSchema[xi].name] = selectedData[index][visibleSchema[colIndex].name];\n      });\n    });\n  };\n  /**\r\n   * Checks if a given column is visible.\r\n   * @memberof canvasDatagrid\r\n   * @name isColumnVisible\r\n   * @method\r\n   * @returns {boolean} When true, the column is visible.\r\n   * @param {number} columnIndex Column index.\r\n   */\n\n\n  self.isColumnVisible = function (columnIndex) {\n    return self.visibleCells.filter(function (c) {\n      return c.columnIndex === columnIndex;\n    }).length > 0;\n  };\n  /**\r\n   * Checks if a given row is visible.\r\n   * @memberof canvasDatagrid\r\n   * @name isRowVisible\r\n   * @method\r\n   * @returns {boolean} When true, the row is visible.\r\n   * @param {number} rowIndex Row index.\r\n   */\n\n\n  self.isRowVisible = function (rowIndex) {\n    return self.visibleCells.filter(function (c) {\n      return c.rowIndex === rowIndex;\n    }).length > 0;\n  };\n  /**\r\n   * Gets the cell at columnIndex and rowIndex.\r\n   * @memberof canvasDatagrid\r\n   * @name getVisibleCellByIndex\r\n   * @method\r\n   * @returns {cell} cell at the selected location.\r\n   * @param {number} x Column index.\r\n   * @param {number} y Row index.\r\n   */\n\n\n  self.getVisibleCellByIndex = function (x, y) {\n    return self.visibleCells.filter(function (c) {\n      return c.columnIndex === x && c.rowIndex === y;\n    })[0];\n  };\n  /**\r\n   * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\r\n   * @memberof canvasDatagrid\r\n   * @name getCellAt\r\n   * @method\r\n   * @returns {cell} cell at the selected location.\r\n   * @param {number} x Number of pixels from the left.\r\n   * @param {number} y Number of pixels from the top.\r\n   */\n\n\n  self.getCellAt = function (x, y, useTouchScrollZones) {\n    function getBorder(entitiy) {\n      if (entitiy.x + entitiy.width - self.attributes.borderResizeZone * 0.4 < x && entitiy.x + entitiy.width + self.attributes.borderResizeZone * 0.6 > x) {\n        return 'r';\n      }\n\n      if (entitiy.x - self.attributes.borderResizeZone * 0.4 < x && entitiy.x + self.attributes.borderResizeZone * 0.6 > x) {\n        return 'l';\n      }\n\n      if (entitiy.y + entitiy.height - self.attributes.borderResizeZone * 0.4 < y && entitiy.y + entitiy.height + self.attributes.borderResizeZone * 0.6 > y) {\n        return 'b';\n      }\n\n      if (entitiy.y - self.attributes.borderResizeZone * 0.4 < y && entitiy.y + self.attributes.borderResizeZone * 0.6 > y) {\n        return 't';\n      }\n    }\n\n    if (!self.visibleCells) {\n      return;\n    }\n\n    var border,\n        tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n        moveMode = self.attributes.borderDragBehavior === 'move',\n        i,\n        l = self.visibleCells.length,\n        moveBorder,\n        xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n        yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n        cell,\n        entitiy;\n\n    if (!self.visibleCells || !self.visibleCells.length) {\n      return;\n    }\n\n    self.hasFocus = true;\n\n    if (!(y < self.height && y > 0 && x < self.width && x > 0)) {\n      self.hasFocus = false;\n      return {\n        dragContext: 'inherit',\n        context: 'inherit'\n      };\n    }\n\n    for (i = 0; i < l; i += 1) {\n      cell = self.visibleCells[i]; // interactive dimensions of the cell.  used for touch \"over size\" zones\n\n      entitiy = {\n        x: cell.x,\n        y: cell.y,\n        height: cell.height,\n        width: cell.width\n      };\n\n      if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n        entitiy.x -= tsz;\n        entitiy.y -= tsz;\n        entitiy.height += tsz;\n        entitiy.width += tsz;\n      }\n\n      if (entitiy.x - self.style.cellBorderWidth < x && entitiy.x + entitiy.width + self.style.cellBorderWidth > x && entitiy.y - self.style.cellBorderWidth < y && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n        if (/frozen-row-marker/.test(cell.style)) {\n          cell.dragContext = cell.style;\n          cell.context = 'row-resize';\n          return cell;\n        }\n\n        if (/frozen-column-marker/.test(cell.style)) {\n          cell.dragContext = cell.style;\n          cell.context = 'col-resize';\n          return cell;\n        }\n\n        if (/selection-handle-/.test(cell.style)) {\n          cell.dragContext = cell.style;\n          cell.context = 'crosshair';\n          return cell;\n        }\n\n        if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n          cell.dragContext = 'vertical-scroll-box';\n          cell.context = 'vertical-scroll-box';\n          cell.isScrollBar = true;\n          cell.isVerticalScrollBar = true;\n\n          if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n            cell.dragContext = 'vertical-scroll-bottom';\n            cell.context = 'vertical-scroll-bottom';\n          } else if (y < self.scrollBox.box.v.y) {\n            cell.dragContext = 'vertical-scroll-top';\n            cell.context = 'vertical-scroll-top';\n          }\n\n          self.cursor = 'default';\n          return cell;\n        }\n\n        if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n          cell.dragContext = 'horizontal-scroll-box';\n          cell.context = 'horizontal-scroll-box';\n          cell.isScrollBar = true;\n          cell.isHorizontalScrollBar = true;\n\n          if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n            cell.dragContext = 'horizontal-scroll-right';\n            cell.context = 'horizontal-scroll-right';\n          } else if (x < self.scrollBox.box.h.x) {\n            cell.dragContext = 'horizontal-scroll-left';\n            cell.context = 'horizontal-scroll-left';\n          }\n\n          self.cursor = 'default';\n          return cell;\n        }\n\n        border = getBorder(entitiy); // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n\n        moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n\n        if (['l', 'r'].indexOf(border) !== -1 && (self.attributes.allowColumnResize || moveBorder) && (self.attributes.allowColumnResizeFromCell && cell.isNormal || !cell.isNormal || moveBorder) && (self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner) || !(cell.isRowHeader && cell.isCorner))) {\n          if ((cell.isColumnHeader || cell.isCorner || self.attributes.allowColumnResizeFromCell && cell.isNormal) && border === 'r') {\n            cell.context = 'ew-resize';\n            cell.dragContext = 'ew-resize';\n            return cell;\n          }\n\n          if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n            cell.context = xBorderBehavior;\n            cell.dragContext = border + '-move';\n            return cell;\n          }\n        }\n\n        if (['t', 'b'].indexOf(border) !== -1 && cell.rowIndex > -1 && (self.attributes.allowRowResize || moveBorder) && (self.attributes.allowRowResizeFromCell && cell.isNormal || !cell.isNormal || moveBorder) && !cell.isColumnHeader) {\n          if ((cell.isRowHeader || cell.isCorner || self.attributes.allowRowResizeFromCell && cell.isNormal) && border === 'b') {\n            cell.context = 'ns-resize';\n            cell.dragContext = 'ns-resize';\n            return cell;\n          }\n\n          if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n            cell.context = yBorderBehavior;\n            cell.dragContext = border + '-move';\n            return cell;\n          }\n        }\n\n        if (cell.style === 'columnHeaderCell') {\n          cell.context = 'cell';\n          cell.dragContext = 'column-reorder';\n          return cell;\n        }\n\n        if (cell.style === 'rowHeaderCell') {\n          if (self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y || !self.attributes.allowRowReordering) {\n            cell.dragContext = 'cell';\n            cell.context = 'cell';\n          } else {\n            cell.context = self.cursorGrab;\n            cell.dragContext = 'row-reorder';\n          }\n\n          return cell;\n        }\n\n        if (cell.isGrid) {\n          self.hasFocus = false;\n          cell.dragContext = 'cell-grid';\n          cell.context = 'cell-grid';\n          return cell;\n        }\n\n        if (cell.style === 'tree-grid') {\n          self.hasFocus = false;\n          cell.dragContext = 'tree';\n          cell.context = 'tree';\n          return cell;\n        }\n\n        cell.dragContext = 'cell';\n        cell.context = 'cell';\n        return cell;\n      }\n    }\n\n    self.hasFocus = true;\n    self.cursor = 'default';\n    return {\n      dragContext: 'background',\n      context: 'background',\n      style: 'background',\n      isBackground: true\n    };\n  };\n  /**\r\n   * Gets the bounds of current selection.\r\n   * @returns {rect} selection.\r\n   * @memberof canvasDatagrid\r\n   * @name getSelectionBounds\r\n   * @method\r\n   */\n\n\n  self.getSelectionBounds = function () {\n    var low = {\n      x: Infinity,\n      y: Infinity\n    },\n        high = {\n      x: -Infinity,\n      y: -Infinity\n    };\n    self.selections.forEach(function (row, rowIndex) {\n      var maxCol, minCol;\n      low.y = rowIndex < low.y ? rowIndex : low.y;\n      high.y = rowIndex > high.y ? rowIndex : high.y;\n      maxCol = Math.max.apply(null, row);\n      minCol = Math.min.apply(null, row);\n      low.x = minCol < low.x ? minCol : low.x;\n      high.x = maxCol > high.x ? maxCol : high.x;\n    });\n    return {\n      top: low.y,\n      left: low.x,\n      bottom: high.y,\n      right: high.x\n    };\n  };\n  /**\r\n   * Returns an auto generated schema based on data structure.\r\n   * @memberof canvasDatagrid\r\n   * @name getSchemaFromData\r\n   * @method\r\n   * @tutorial schema\r\n   * @returns {schema} schema A schema based on the first item in the data array.\r\n   */\n\n\n  self.getSchemaFromData = function (d) {\n    d = d || self.originalData;\n    return Object.keys(d[0] || {\n      ' ': ''\n    }).map(function mapEachSchemaColumn(key, index) {\n      var type = self.getBestGuessDataType(key, d),\n          i = {\n        name: key,\n        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n        index: index,\n        columnIndex: index,\n        type: type,\n        filter: self.filter(type)\n      };\n\n      if (self.storedSettings && self.storedSettings.visibility && self.storedSettings.visibility[i.name] !== undefined) {\n        i.hidden = !self.storedSettings.visibility[i.name];\n      }\n\n      return i;\n    });\n  };\n  /**\r\n   * Clears the change log grid.changes that keeps track of changes to the data set.\r\n   * This does not undo changes or alter data it is simply a convince array to keep\r\n   * track of changes made to the data since last this method was called.\r\n   * @memberof canvasDatagrid\r\n   * @name clearChangeLog\r\n   * @method\r\n   */\n\n\n  self.clearChangeLog = function () {\n    self.changes = [];\n  };\n  /**\r\n   * Selects an area of the grid.\r\n   * @memberof canvasDatagrid\r\n   * @name selectArea\r\n   * @method\r\n   * @param {rect} bounds A rect object representing the selected values.\r\n   */\n\n\n  self.selectArea = function (bounds, ctrl) {\n    self.selectionBounds = bounds || self.selectionBounds;\n    var ev,\n        x,\n        y,\n        s = self.getSchema();\n\n    if (!ctrl) {\n      self.selections = [];\n    }\n\n    if (self.selectionBounds.top < -1 || self.selectionBounds.bottom > self.viewData.length || self.selectionBounds.left < -1 || self.selectionBounds.right > s.length) {\n      throw new Error('Impossible selection area');\n    }\n\n    for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n      self.selections[x] = [];\n\n      for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n        if (self.selections[x].indexOf(y) === -1) {\n          self.selections[x].push(y);\n        }\n      }\n    }\n\n    ev = {\n      selections: self.selections,\n      selectionBounds: self.selectionBounds\n    };\n    Object.defineProperty(ev, 'selectedData', {\n      get: function get() {\n        return self.getSelectedData();\n      }\n    });\n    self.dispatchEvent('selectionchanged', ev);\n  };\n  /**\r\n   * Returns the maximum text width for a given column by column name.\r\n   * @memberof canvasDatagrid\r\n   * @name findColumnMaxTextLength\r\n   * @method\r\n   * @returns {number} The number of pixels wide the maximum width value in the selected column.\r\n   * @param {string} name The name of the column to calculate the value's width of.\r\n   */\n\n\n  self.findColumnMaxTextLength = function (name) {\n    var m = -Infinity;\n\n    if (name === 'cornerCell') {\n      self.ctx.font = self.style.rowHeaderCellFont;\n      return self.ctx.measureText((self.viewData.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width + self.style.autosizePadding + self.style.autosizeHeaderCellPadding + self.style.rowHeaderCellPaddingRight + self.style.rowHeaderCellPaddingLeft + (self.attributes.tree ? self.style.treeArrowWidth + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n    }\n\n    var formatter = null;\n    self.getSchema().forEach(function (col) {\n      if (col.name !== name) {\n        return;\n      }\n\n      self.ctx.font = self.style.columnHeaderCellFont;\n      var t = self.ctx.measureText(col.title || col.name).width + self.style.headerCellPaddingRight + self.style.headerCellPaddingLeft;\n      m = t > m ? t : m;\n      formatter = self.formatters[col.type];\n    });\n    self.viewData.forEach(function (row) {\n      var text = row[name];\n\n      if (formatter) {\n        text = formatter({\n          cell: {\n            value: text\n          }\n        });\n      }\n\n      self.ctx.font = self.style.cellFont;\n      var t = self.ctx.measureText(text).width + self.style.cellPaddingRight + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n      m = t > m ? t : m;\n    });\n    return m;\n  };\n  /**\r\n   * Gets the total width of all header columns.\r\n   * @memberof canvasDatagrid\r\n   * @name getHeaderWidth\r\n   * @method\r\n   */\n\n\n  self.getHeaderWidth = function () {\n    return self.getVisibleSchema().reduce(function (total, header) {\n      return total + parseInt(header.width || self.style.cellWidth, 10);\n    }, 0);\n  };\n  /**\r\n   * Gets the height of a row by index.\r\n   * @memberof canvasDatagrid\r\n   * @name getRowHeight\r\n   * @method\r\n   * @param {number} rowIndex The row index to lookup.\r\n   */\n\n\n  self.getRowHeight = function (rowIndex) {\n    return (self.sizes.rows[rowIndex] || self.style.cellHeight) * self.scale;\n  };\n  /**\r\n   * Gets the width of a column by index.\r\n   * @memberof canvasDatagrid\r\n   * @name getColumnWidth\r\n   * @method\r\n   * @param {number} columnIndex The column index to lookup.\r\n   */\n\n\n  self.getColumnWidth = function (columnIndex) {\n    return (self.sizes.columns[columnIndex] || self.getSchema()[columnIndex].width || self.style.cellWidth) * self.scale;\n  };\n\n  self.formatters.string = function cellFormatterString(e) {\n    return e.cell.value !== undefined ? e.cell.value : '';\n  };\n\n  self.formatters.rowHeaderCell = self.formatters.string;\n  self.formatters.headerCell = self.formatters.string;\n  self.formatters.number = self.formatters.string;\n  self.formatters[\"int\"] = self.formatters.string;\n  self.formatters.html = self.formatters.string;\n\n  self.sorters.string = function (columnName, direction) {\n    var asc = direction === 'asc';\n    return function (a, b) {\n      if (a[columnName] === undefined || a[columnName] === null) {\n        return 1;\n      }\n\n      if (b[columnName] === undefined || b[columnName] === null) {\n        return 0;\n      }\n\n      if (asc) {\n        if (!a[columnName].localeCompare) {\n          return 1;\n        }\n\n        return a[columnName].localeCompare(b[columnName]);\n      }\n\n      if (!b[columnName].localeCompare) {\n        return 1;\n      }\n\n      return b[columnName].localeCompare(a[columnName]);\n    };\n  };\n\n  self.sorters.number = function (columnName, direction) {\n    var asc = direction === 'asc';\n    return function (a, b) {\n      if (asc) {\n        return a[columnName] - b[columnName];\n      }\n\n      return b[columnName] - a[columnName];\n    };\n  };\n\n  self.sorters.date = function (columnName, direction) {\n    var asc = direction === 'asc';\n    return function (a, b) {\n      if (asc) {\n        return new Date(a[columnName]).getTime() - new Date(b[columnName]).getTime();\n      }\n\n      return new Date(b[columnName]).getTime() - new Date(a[columnName]).getTime();\n    };\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/publicMethods.js\n");

/***/ }),

/***/ "./lib/touch.js":
/*!**********************!*\
  !*** ./lib/touch.js ***!
  \**********************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(self) {\n  var touchTimerMs = 50,\n      debounceTouchMove,\n      touchMoving,\n      touchScrollTimeout;\n  self.scrollAnimation = {};\n  self.touchDelta = {};\n  self.touchAnimateTo = {};\n  self.animationFrames = 0;\n\n  self.getTouchPos = function (e, touchIndex) {\n    var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n        rect = self.canvas.getBoundingClientRect(),\n        pos;\n\n    if (!t) {\n      return;\n    }\n\n    pos = {\n      x: t.clientX - rect.left,\n      y: t.clientY - rect.top\n    };\n\n    if (self.isChildGrid) {\n      pos.x -= self.canvasOffsetLeft;\n      pos.y -= self.canvasOffsetTop;\n    }\n\n    return {\n      x: pos.x,\n      y: pos.y,\n      rect: rect\n    };\n  }; // shamelessly stolen from from https://gist.github.com/gre/1650294\n\n\n  self.easingFunctions = {\n    linear: function linear(t) {\n      return t;\n    },\n    easeInQuad: function easeInQuad(t) {\n      return t * t;\n    },\n    easeOutQuad: function easeOutQuad(t) {\n      return t * (2 - t);\n    },\n    easeInOutQuad: function easeInOutQuad(t) {\n      return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n    },\n    easeInCubic: function easeInCubic(t) {\n      return t * t * t;\n    },\n    easeOutCubic: function easeOutCubic(t) {\n      return --t * t * t + 1;\n    },\n    easeInOutCubic: function easeInOutCubic(t) {\n      return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n    },\n    easeInQuart: function easeInQuart(t) {\n      return t * t * t * t;\n    },\n    easeOutQuart: function easeOutQuart(t) {\n      return 1 - --t * t * t * t;\n    },\n    easeInOutQuart: function easeInOutQuart(t) {\n      return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n    },\n    easeInQuint: function easeInQuint(t) {\n      return t * t * t * t * t;\n    },\n    easeOutQuint: function easeOutQuint(t) {\n      return 1 + --t * t * t * t * t;\n    },\n    easeInOutQuint: function easeInOutQuint(t) {\n      return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n    }\n  };\n\n  self.easing = function (t, b, c, d) {\n    return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n  };\n\n  self.calculatePPSTimed = function () {\n    self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n    self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n    self.touchSigmaTimed = {\n      x: self.touchDelta.x,\n      y: self.touchDelta.y,\n      t: performance.now()\n    };\n  };\n\n  self.calculatePPS = function () {\n    self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n    self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n    self.touchSigma = {\n      x: self.touchDelta.x,\n      y: self.touchDelta.y,\n      t: performance.now()\n    };\n  };\n\n  self.touchEndAnimation = function () {\n    if (!self.canvas || !self.scrollBox.scrollTo) {\n      return requestAnimationFrame(self.touchEndAnimation);\n    }\n\n    var n = performance.now(),\n        d = self.attributes.touchReleaseAnimationDurationMs,\n        t;\n    t = n - self.touchDelta.t;\n    self.animationFrames += 1;\n    self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n    self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n\n    if (t > d || self.scrollAnimation.y === self.scrollBox.scrollTop && self.scrollAnimation.x === self.scrollBox.scrollLeft || self.stopAnimation) {\n      return;\n    }\n\n    self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n    requestAnimationFrame(self.touchEndAnimation);\n  };\n\n  self.touchEditCell = function (cell) {\n    self.beginEditAt(cell.columnIndex, cell.rowIndex);\n  };\n\n  self.touchCell = function (e) {\n    return function () {\n      clearInterval(self.calculatePPSTimer);\n      var i,\n          pos = self.getTouchPos(e);\n\n      if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n        i = self.getCellAt(pos.x, pos.y);\n\n        if (!i) {\n          return;\n        }\n\n        if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex && self.touchingCell.columnIndex === i.columnIndex) {\n          self.touchEditCell(i);\n          return;\n        }\n\n        if (self.input && self.input.editCell) {\n          self.endEdit();\n        }\n\n        self.touchingCell = i;\n        self.selectArea({\n          top: i.rowIndex,\n          bottom: i.rowIndex,\n          left: i.columnIndex,\n          right: i.columnIndex\n        });\n        self.draw(true);\n      }\n    };\n  };\n\n  self.touchstart = function (e) {\n    if (e.changedTouches[0]) {\n      self.touchStart = self.getTouchPos(e);\n      self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n    }\n\n    if (self.dispatchEvent('touchstart', {\n      NativeEvent: e,\n      cell: self.startingCell\n    })) {\n      return;\n    }\n\n    self.disposeContextMenu();\n    clearInterval(self.calculatePPSTimer);\n    clearTimeout(self.touchContextTimeout);\n    self.touchStartEvent = e;\n    self.stopAnimation = true;\n    self.animationFrames = 0;\n    self.stopPropagation(e);\n    e.preventDefault();\n\n    if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n      self.touchLength = 1;\n      self.touchStart = self.touchStart || self.touchStart1;\n      self.touchScrollStart = {\n        x: self.scrollBox.scrollLeft,\n        y: self.scrollBox.scrollTop,\n        t: performance.now()\n      };\n      self.touchDelta = {\n        x: 0,\n        y: 0,\n        scrollLeft: self.scrollBox.scrollLeft,\n        scrollTop: self.scrollBox.scrollTop,\n        t: self.touchScrollStart.t\n      };\n      self.touchSigma = {\n        x: self.touchDelta.x,\n        y: self.touchDelta.y,\n        t: self.touchDelta.t\n      };\n      self.touchSigmaTimed = {\n        x: self.touchDelta.x,\n        y: self.touchDelta.y,\n        t: self.touchDelta.t\n      };\n      self.touchContextTimeout = setTimeout(function () {\n        self.contextmenuEvent(e, self.touchStart);\n      }, self.attributes.touchContextMenuTimeMs);\n      self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n\n      if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n        self.hasFocus = false;\n        return;\n      }\n\n      self.hasFocus = true;\n\n      if (self.startingCell.isHeader) {\n        if (self.startingCell.isRowHeader) {\n          self.selectArea({\n            top: self.startingCell.rowIndex,\n            bottom: self.startingCell.rowIndex,\n            left: 0,\n            right: self.getVisibleSchema().length - 1\n          });\n          self.draw(true);\n        } else if (self.startingCell.isColumnHeader) {\n          if (self.attributes.columnHeaderClickBehavior === 'sort') {\n            if (self.orderBy === self.startingCell.header.name) {\n              self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n            } else {\n              self.orderDirection = 'asc';\n            }\n\n            self.order(self.startingCell.header.name, self.orderDirection);\n          }\n\n          if (self.attributes.columnHeaderClickBehavior === 'select') {\n            self.selectArea({\n              top: 0,\n              bottom: self.viewData.length - 1,\n              left: self.startingCell.columnIndex,\n              right: self.startingCell.columnIndex\n            });\n            self.draw(true);\n          }\n        }\n\n        self.touchEndEvents(e);\n        return;\n      }\n    }\n\n    if (self.zoomAltered) {\n      return;\n    }\n\n    document.body.addEventListener('touchmove', self.touchmove, {\n      passive: false\n    });\n    document.body.addEventListener('touchend', self.touchend, false);\n    document.body.addEventListener('touchcancel', self.touchcancel, false);\n    self.draw(true);\n  };\n\n  self.touchSelect = function (cell, handleType) {\n    if (cell.rowIndex === undefined || cell.columnIndex === undefined) {\n      return;\n    }\n\n    self.touchSelecting = true;\n    var bounds = self.getSelectionBounds();\n\n    if (handleType === 'selection-handle-bl' && cell.rowIndex >= bounds.top && cell.columnIndex <= bounds.right) {\n      bounds.bottom = cell.rowIndex;\n      bounds.left = cell.columnIndex;\n    } else if (handleType === 'selection-handle-tl' && cell.rowIndex <= bounds.bottom && cell.columnIndex <= bounds.right) {\n      bounds.top = cell.rowIndex;\n      bounds.left = cell.columnIndex;\n    } else if (handleType === 'selection-handle-tr' && cell.rowIndex <= bounds.bottom && cell.columnIndex >= bounds.left) {\n      bounds.top = cell.rowIndex;\n      bounds.right = cell.columnIndex;\n    } else if (handleType === 'selection-handle-br' && cell.rowIndex >= bounds.top && cell.columnIndex >= bounds.left) {\n      bounds.bottom = cell.rowIndex;\n      bounds.right = cell.columnIndex;\n    }\n\n    if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n      bounds.left = 0;\n      bounds.right = self.getSchema().length - 1;\n    } else {\n      bounds.left = Math.max(0, bounds.left);\n    }\n\n    self.selectArea(bounds);\n    self.draw(true);\n  };\n\n  function touchMove(e) {\n    var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n\n    if (self.dispatchEvent('beforetouchmove', {\n      NativeEvent: e\n    })) {\n      return;\n    }\n\n    clearTimeout(touchScrollTimeout);\n\n    if (e.changedTouches[0]) {\n      self.touchPosition = self.getTouchPos(e);\n    }\n\n    if (e.changedTouches[1]) {\n      self.touchPosition1 = self.getTouchPos(e, 1);\n    }\n\n    if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n      clearTimeout(self.touchContextTimeout);\n    }\n\n    if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n      t1 = self.touchPosition.y;\n      t2 = self.touchPosition1.y;\n\n      if (!self.zoomDeltaStart) {\n        self.zoomDeltaStart = Math.abs(t1 - t2);\n        self.startScale = self.scale;\n      }\n\n      self.touchLength = 2;\n      self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n      self.scale = self.startScale - self.scaleDelta * self.attributes.touchZoomSensitivity;\n      self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n      self.zoomAltered = true;\n      self.resize(true);\n      self.resizeChildGrids();\n      return;\n    }\n\n    if (self.zoomAltered) {\n      return;\n    }\n\n    self.touchLength = 1;\n    self.touchPosition = self.touchPosition || self.touchPosition1;\n    ch = self.getColumnHeaderCellHeight();\n    rw = self.getRowHeaderCellWidth();\n    rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n    lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n    bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n    tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n    sbw = self.style.scrollBarWidth;\n\n    function touchScroll() {\n      var x = self.scrollBox.scrollLeft,\n          y = self.scrollBox.scrollTop;\n      x += rScrollZone ? self.attributes.selectionScrollIncrement : 0;\n      y += bScrollZone ? self.attributes.selectionScrollIncrement : 0;\n      y -= tScrollZone ? self.attributes.selectionScrollIncrement : 0;\n      x -= lScrollZone ? self.attributes.selectionScrollIncrement : 0;\n      self.scrollBox.scrollTo(x, y);\n      touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n    }\n\n    e.stopPropagation();\n    self.touchDelta = {\n      x: self.touchPosition.x - self.touchStart.x,\n      y: self.touchPosition.y - self.touchStart.y,\n      scrollLeft: self.scrollBox.scrollLeft,\n      scrollTop: self.scrollBox.scrollTop,\n      t: performance.now()\n    };\n    self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n    self.dispatchEvent('touchmove', {\n      NativeEvent: e,\n      cell: self.currentCell\n    });\n    self.calculatePPS();\n    self.touchDuration = performance.now() - self.touchScrollStart.t;\n    self.stopAnimation = true;\n    self.animationFrames = 0;\n\n    if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n      touchScroll();\n    }\n\n    if (/vertical-scroll-/.test(self.startingCell.style)) {\n      self.scrollBox.scrollTop = self.scrollBox.scrollHeight * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n      return;\n    }\n\n    if (/horizontal-scroll-/.test(self.startingCell.style)) {\n      self.scrollBox.scrollLeft = self.scrollBox.scrollWidth * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n      return;\n    }\n\n    if (/selection-handle-/.test(self.startingCell.style)) {\n      self.touchSelect(self.currentCell, self.startingCell.style);\n      return;\n    }\n\n    self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x, self.touchScrollStart.y - self.touchDelta.y);\n  }\n\n  self.touchmove = function (e) {\n    if (touchMoving) {\n      return;\n    }\n\n    requestAnimationFrame(function () {\n      touchMoving = true;\n      touchMove(e);\n      touchMoving = false;\n    });\n  };\n\n  self.touchEndEvents = function (e) {\n    self.zoomDeltaStart = undefined;\n    self.touchSelecting = false;\n    clearInterval(self.touchScrollTimeout);\n    clearInterval(self.touchContextTimeout);\n    clearInterval(self.calculatePPSTimer);\n    e.stopPropagation();\n    document.body.removeEventListener('touchmove', self.touchmove, {\n      passive: false\n    });\n    document.body.removeEventListener('touchend', self.touchend, false);\n    document.body.removeEventListener('touchcancel', self.touchcancel, false);\n  };\n\n  self.touchend = function (e) {\n    if (self.dispatchEvent('touchend', {\n      NativeEvent: e,\n      cell: self.currentCell\n    })) {\n      return;\n    }\n\n    self.zoomDeltaStart = undefined;\n\n    if (e.changedTouches[0]) {\n      self.touchPosition = undefined;\n    }\n\n    if (e.changedTouches[1]) {\n      self.touchPosition1 = undefined;\n    }\n\n    if (self.zoomAltered) {\n      if (e.touches.length === 0) {\n        self.zoomAltered = false;\n      }\n\n      return;\n    }\n\n    var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n\n    if (isNaN(self.xPPS)) {\n      self.xPPS = 0;\n    }\n\n    if (isNaN(self.yPPS)) {\n      self.yPPS = 0;\n    }\n\n    if (isNaN(self.xPPST)) {\n      self.xPPST = 0;\n    }\n\n    if (isNaN(self.yPPST)) {\n      self.yPPST = 0;\n    }\n\n    self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n    self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n    self.calculatePPSTimed();\n\n    if (dz && !self.contextMenu) {\n      self.touchCell(self.touchStartEvent)();\n    } else if (self.animationFrames === 0 && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold) && !/-scroll-/.test(self.startingCell.style) && !dz) {\n      self.stopAnimation = false;\n      self.touchEndAnimation();\n    }\n\n    self.touchEndEvents(e);\n  };\n\n  self.touchcancel = function (e) {\n    if (self.dispatchEvent('touchcancel', {\n      NativeEvent: e,\n      cell: self.currentCell\n    })) {\n      return;\n    }\n\n    self.touchEndEvents(e);\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/touch.js\n");

/***/ }),

/***/ "./node_modules/is-printable-key-event/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/is-printable-key-event/dist/index.js ***!
  \***********************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module */
/*! CommonJS bailout: module.exports is used directly at 1:0-14 */
/***/ (function(module) {

eval("module.exports=function(e){var o={};function a(t){if(o[t])return o[t].exports;var r=o[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,a),r.l=!0,r.exports}return a.m=e,a.c=o,a.d=function(e,o,t){a.o(e,o)||Object.defineProperty(e,o,{enumerable:!0,get:t})},a.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},a.t=function(e,o){if(1&o&&(e=a(e)),8&o)return e;if(4&o&&\"object\"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(a.r(t),Object.defineProperty(t,\"default\",{enumerable:!0,value:e}),2&o&&\"string\"!=typeof e)for(var r in e)a.d(t,r,function(o){return e[o]}.bind(null,r));return t},a.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(o,\"a\",o),o},a.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},a.p=\"\",a(a.s=0)}([function(e,o,a){\"use strict\";Object.defineProperty(o,\"__esModule\",{value:!0});var t=a(1),r=Object.keys(t.default).reduce((function(e,o){return e.concat(t.default[o])}),[]);o.default=function(e){return-1===r.indexOf(e.key)}},function(e,o,a){\"use strict\";Object.defineProperty(o,\"__esModule\",{value:!0});o.default={modifier:[\"Alt\",\"AltGraph\",\"CapsLock\",\"Control\",\"Fn\",\"FnLock\",\"Meta\",\"NumLock\",\"ScrollLock\",\"Shift\",\"Symbol\",\"SymbolLock\"],legacyModifier:[\"Hyper\",\"Super\"],whiteSpace:[\"Enter\",\"Tab\"],navigation:[\"ArrowDown\",\"ArrowLeft\",\"ArrowRight\",\"ArrowUp\",\"End\",\"Home\",\"PageDown\",\"PageUp\"],editing:[\"Backspace\",\"Clear\",\"Copy\",\"CrSel\",\"Cut\",\"Delete\",\"EraseEof\",\"ExSel\",\"Insert\",\"Paste\",\"Redo\",\"Undo\"],ui:[\"Accept\",\"Again\",\"Attn\",\"Cancel\",\"ContextMenu\",\"Escape\",\"Execute\",\"Find\",\"Help\",\"Pause\",\"Play\",\"Props\",\"Select\",\"ZoomIn\",\"ZoomOut\"],device:[\"BrightnessDown\",\"BrightnessUp\",\"Eject\",\"LogOff\",\"Power\",\"PowerOff\",\"PrintScreen\",\"Hibernate\",\"Standby\",\"WakeUp\"],imeCompositionKeys:[\"AllCandidates\",\"Alphanumeric\",\"CodeInput\",\"Compose\",\"Convert\",\"Dead\",\"FinalMode\",\"GroupFirst\",\"GroupLast\",\"GroupNext\",\"GroupPrevious\",\"ModeChange\",\"NextCandidate\",\"NonConvert\",\"PreviousCandidate\",\"Process\",\"SingleCandidate\"],koreanSpecific:[\"HangulMode\",\"HanjaMode\",\"JunjaMode\"],japaneseSpecific:[\"Eisu\",\"Hankaku\",\"Hiragana\",\"HiraganaKatakana\",\"KanaMode\",\"KanjiMode\",\"Katakana\",\"Romaji\",\"Zenkaku\",\"ZenkakuHankaku\"],commonFunction:[\"F1\",\"F2\",\"F3\",\"F4\",\"F5\",\"F6\",\"F7\",\"F8\",\"F9\",\"F10\",\"F11\",\"F12\",\"Soft1\",\"Soft2\",\"Soft3\",\"Soft4\"],multimedia:[\"ChannelDown\",\"ChannelUp\",\"Close\",\"MailForward\",\"MailReply\",\"MailSend\",\"MediaClose\",\"MediaFastForward\",\"MediaPause\",\"MediaPlay\",\"MediaPlayPause\",\"MediaRecord\",\"MediaRewind\",\"MediaStop\",\"MediaTrackNext\",\"MediaTrackPrevious\",\"New\",\"Open\",\"Print\",\"Save\",\"SpellCheck\"],multimediaNumpad:[\"Key11\",\"Key12\"],audio:[\"AudioBalanceLeft\",\"AudioBalanceRight\",\"AudioBassBoostDown\",\"AudioBassBoostToggle\",\"AudioBassBoostUp\",\"AudioFaderFront\",\"AudioFaderRear\",\"AudioSurroundModeNext\",\"AudioTrebleDown\",\"AudioTrebleUp\",\"AudioVolumeDown\",\"AudioVolumeUp\",\"AudioVolumeMute\",\"MicrophoneToggle\",\"MicrophoneVolumeDown\",\"MicrophoneVolumeUp\",\"MicrophoneVolumeMute\"],speech:[\"SpeechCorrectionList\",\"SpeechInputToggle\"],application:[\"LaunchApplication1\",\"LaunchApplication2\",\"LaunchCalendar\",\"LaunchContacts\",\"LaunchMail\",\"LaunchMediaPlayer\",\"LaunchMusicPlayer\",\"LaunchPhone\",\"LaunchScreenSaver\",\"LaunchSpreadsheet\",\"LaunchWebBrowser\",\"LaunchWebCam\",\"LaunchWordProcessor\"],browser:[\"BrowserBack\",\"BrowserFavorites\",\"BrowserForward\",\"BrowserHome\",\"BrowserRefresh\",\"BrowserSearch\",\"BrowserStop\"],mobilePhone:[\"AppSwitch\",\"Call\",\"Camera\",\"CameraFocus\",\"EndCall\",\"GoBack\",\"GoHome\",\"HeadsetHook\",\"LastNumberRedial\",\"Notification\",\"MannerMode\",\"VoiceDial\"],tv:[\"TV\",\"TV3DMode\",\"TVAntennaCable\",\"TVAudioDescription\",\"TVAudioDescriptionMixDown\",\"TVAudioDescriptionMixUp\",\"TVContentsMenu\",\"TVDataService\",\"TVInput\",\"TVInputComponent1\",\"TVInputComponent2\",\"TVInputComposite1\",\"TVInputComposite2\",\"TVInputHDMI1\",\"TVInputHDMI2\",\"TVInputHDMI3\",\"TVInputHDMI4\",\"TVInputVGA1\",\"TVMediaContext\",\"TVNetwork\",\"TVNumberEntry\",\"TVPower\",\"TVRadioService\",\"TVSatellite\",\"TVSatelliteBS\",\"TVSatelliteCS\",\"TVSatelliteToggle\",\"TVTerrestrialAnalog\",\"TVTerrestrialDigital\",\"TVTimer\"],mediaControls:[\"AVRInput\",\"AVRPower\",\"ColorF0Red\",\"ColorF1Green\",\"ColorF2Yellow\",\"ColorF3Blue\",\"ColorF4Grey\",\"ColorF5Brown\",\"ClosedCaptionToggle\",\"Dimmer\",\"DisplaySwap\",\"DVR\",\"Exit\",\"FavoriteClear0\",\"FavoriteClear1\",\"FavoriteClear2\",\"FavoriteClear3\",\"FavoriteRecall0\",\"FavoriteRecall1\",\"FavoriteRecall2\",\"FavoriteRecall3\",\"FavoriteStore0\",\"FavoriteStore1\",\"FavoriteStore2\",\"FavoriteStore3\",\"Guide\",\"GuideNextDay\",\"GuidePreviousDay\",\"Info\",\"InstantReplay\",\"Link\",\"ListProgram\",\"LiveContent\",\"Lock\",\"MediaApps\",\"MediaAudioTrack\",\"MediaLast\",\"MediaSkipBackward\",\"MediaSkipForward\",\"MediaStepBackward\",\"MediaStepForward\",\"MediaTopMenu\",\"NavigateIn\",\"NavigateNext\",\"NavigateOut\",\"NavigatePrevious\",\"NextFavoriteChannel\",\"NextUserProfile\",\"OnDemand\",\"Pairing\",\"PinPDown\",\"PinPMove\",\"PinPToggle\",\"PinPUp\",\"PlaySpeedDown\",\"PlaySpeedReset\",\"PlaySpeedUp\",\"RandomToggle\",\"RcLowBattery\",\"RecordSpeedNext\",\"RfBypass\",\"ScanChannelsToggle\",\"ScreenModeNext\",\"Settings\",\"SplitScreenToggle\",\"STBInput\",\"STBPower\",\"Subtitle\",\"Teletext\",\"VideoModeNext\",\"Wink\",\"ZoomToggle\"]}}]).default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/is-printable-key-event/dist/index.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__("./lib/main.js");
/******/ })()
.default;
});